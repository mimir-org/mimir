[{"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\reportWebVitals.js":"1","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\components\\nodetypes\\NodeTypeOverview.tsx":"2","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\components\\nodetypes\\NodeTypeComponent.tsx":"3","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\index.tsx":"4","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\components\\workspace\\WorkspaceComponent.tsx":"5","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\store\\workspace\\reducers.ts":"6","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\store\\workspace\\types.ts":"7","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\sagas\\index.ts":"8","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\sagas\\workspace\\saga.ts":"9","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\store\\workspace\\actions.ts":"10","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\store\\index.ts":"11","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\data\\WorkspaceDataset.js":"12","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\components\\home\\Home.tsx":"13","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\components\\workspace\\index.ts":"14","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\components\\home\\index.ts":"15","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\components\\nodetypes\\index.ts":"16","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\components\\app\\index.ts":"17","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\components\\app\\App.tsx":"18","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\components\\index.ts":"19","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\components\\header\\index.ts":"20","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\components\\footer\\index.ts":"21","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\components\\header\\Header.tsx":"22","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\components\\footer\\Footer.tsx":"23","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\store\\nodetypes\\reducers.ts":"24","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\store\\nodetypes\\types.ts":"25","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\store\\nodetypes\\actions.ts":"26","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\sagas\\nodetype\\saga.ts":"27","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\data\\NodeTypeDataset.js":"28","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\store\\models\\node\\MbNodeWidget.tsx":"29","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\store\\models\\node\\MbNodeModel.ts":"30","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\store\\models\\node\\MbNodeFactory.tsx":"31","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\store\\models\\index.ts":"32","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\store\\models\\port\\MbPortFactory.ts":"33","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\store\\models\\port\\MbPortModel.ts":"34","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\store\\models\\link\\MbLinkModel.ts":"35","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\store\\models\\label\\MbLabelModel.tsx":"36","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\store\\treeview\\reducers.ts":"37","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\store\\treeview\\types.ts":"38","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\sagas\\treeview\\saga.ts":"39","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\data\\TreeviewDataset.js":"40","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\store\\treeview\\actions.ts":"41"},{"size":362,"mtime":499162500000,"results":"42","hashOfConfig":"43"},{"size":1300,"mtime":1613381168291,"results":"44","hashOfConfig":"43"},{"size":397,"mtime":1612956930086,"results":"45","hashOfConfig":"43"},{"size":783,"mtime":1612534775687,"results":"46","hashOfConfig":"43"},{"size":3642,"mtime":1613134813096,"results":"47","hashOfConfig":"43"},{"size":716,"mtime":1612522521687,"results":"48","hashOfConfig":"43"},{"size":1135,"mtime":1612957384360,"results":"49","hashOfConfig":"43"},{"size":616,"mtime":1613380803753,"results":"50","hashOfConfig":"43"},{"size":1141,"mtime":1612950000645,"results":"51","hashOfConfig":"43"},{"size":410,"mtime":1612522640230,"results":"52","hashOfConfig":"43"},{"size":891,"mtime":1613380133096,"results":"53","hashOfConfig":"43"},{"size":1212,"mtime":1612535433375,"results":"54","hashOfConfig":"43"},{"size":936,"mtime":1612956878807,"results":"55","hashOfConfig":"43"},{"size":131,"mtime":1612941736854,"results":"56","hashOfConfig":"43"},{"size":58,"mtime":1612941786577,"results":"57","hashOfConfig":"43"},{"size":131,"mtime":1612941776778,"results":"58","hashOfConfig":"43"},{"size":54,"mtime":1612955648121,"results":"59","hashOfConfig":"43"},{"size":344,"mtime":1612955668412,"results":"60","hashOfConfig":"43"},{"size":300,"mtime":1612955988156,"results":"61","hashOfConfig":"43"},{"size":63,"mtime":1612955890890,"results":"62","hashOfConfig":"43"},{"size":60,"mtime":1612955828571,"results":"63","hashOfConfig":"43"},{"size":619,"mtime":1612955903422,"results":"64","hashOfConfig":"43"},{"size":607,"mtime":1612955806599,"results":"65","hashOfConfig":"43"},{"size":717,"mtime":1612957590954,"results":"66","hashOfConfig":"43"},{"size":758,"mtime":1612957324096,"results":"67","hashOfConfig":"43"},{"size":374,"mtime":1612957422953,"results":"68","hashOfConfig":"43"},{"size":1139,"mtime":1612959405124,"results":"69","hashOfConfig":"43"},{"size":567,"mtime":1612959156169,"results":"70","hashOfConfig":"43"},{"size":1078,"mtime":1613128453511,"results":"71","hashOfConfig":"43"},{"size":851,"mtime":1613375494879,"results":"72","hashOfConfig":"43"},{"size":597,"mtime":1613375392378,"results":"73","hashOfConfig":"43"},{"size":218,"mtime":1613131777829,"results":"74","hashOfConfig":"43"},{"size":409,"mtime":1613134616760,"results":"75","hashOfConfig":"43"},{"size":1955,"mtime":1613134704777,"results":"76","hashOfConfig":"43"},{"size":3312,"mtime":1613134216783,"results":"77","hashOfConfig":"43"},{"size":906,"mtime":1613133952471,"results":"78","hashOfConfig":"43"},{"size":691,"mtime":1613379576360,"results":"79","hashOfConfig":"43"},{"size":730,"mtime":1613379377255,"results":"80","hashOfConfig":"43"},{"size":1097,"mtime":1613380685597,"results":"81","hashOfConfig":"43"},{"size":1429,"mtime":1613380425991,"results":"82","hashOfConfig":"43"},{"size":376,"mtime":1613380058197,"results":"83","hashOfConfig":"43"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},"1ud2c32",{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"91"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"91"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"91"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"91"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\reportWebVitals.js",[],["172","173"],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\components\\nodetypes\\NodeTypeOverview.tsx",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\components\\nodetypes\\NodeTypeComponent.tsx",[],["174","175"],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\index.tsx",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\components\\workspace\\WorkspaceComponent.tsx",["176","177","178"],"import React, { FC, useState } from 'react';\r\nimport { NodeTypeOverview } from '..';\r\nimport createEngine, { DefaultNodeModel, DiagramModel, PortModelAlignment } from '@projectstorm/react-diagrams';\r\nimport { CanvasWidget } from '@projectstorm/react-canvas-core';\r\nimport { PortType, Workspace } from '../../store/workspace/types';\r\nimport { MdNodeFactory, MbPortFactory, MbPortModel, MbNodeModel } from '../../store/models';\r\n\r\n\r\nconst WorkspaceComponent : FC<Workspace> = ({id, name, nodes }: Workspace) => {\r\n\r\n  useState(() => {\r\n    console.log('this will run the first time the component renders!');\r\n  });\r\n\r\n  const engine = createEngine();\r\n  engine\r\n    .getPortFactories()\r\n\t\t.registerFactory(new MbPortFactory());\r\n\tengine.getNodeFactories().registerFactory(new MdNodeFactory());\r\n\r\n  const model = new DiagramModel();\r\n\r\n  if(nodes) {\r\n    nodes.forEach(node => {\r\n    const n = new DefaultNodeModel({ name: node.name, color: node.nodeType.color});\r\n    n.setPosition(node.x, node.y);\r\n      node.ports.forEach(port => {\r\n        if(port.type === PortType.In) {\r\n          n.addInPort(port.name);\r\n        } else {\r\n          n.addOutPort(port.name);\r\n        }\r\n      });\r\n\r\n      n.setLocked(false);\r\n\r\n      n.registerListener({\r\n        // selectionChanged: () => { console.log(n.getOptions()) },\r\n        positionChanged: () => { console.log(n.getPosition()) }\r\n     });\r\n\r\n     \r\n\r\n            // these are never triggered\r\n        // zoomUpdated: e => console.log(\"zoomUpdated\", e),\r\n        // gridUpdated: e => console.log(\"gridUpdated\", e),\r\n        // offsetUpdated: e => console.log(\"offsetUpdated\", e),\r\n        // entityRemoved: e => console.log(\"entityRemoved\", e),\r\n        // n.registerListener({\r\n        //   eventDidFire: (event) => {console.log(\"\", event)})\r\n        // });\r\n      \r\n\r\n\r\n    model.addNode(n);\r\n    model.setLocked(false);\r\n\r\n\r\n\r\n\r\n  \r\n\r\n\r\n  });\r\n}\r\n\r\n\r\n \r\n\r\n// model.registerListener({\r\n//   // nodesUpdated: (event) => {console.log(event)},\r\n//   // linksUpdated: (event) => {console.log(event)},\r\n//   // entityRemoved: (event) => {console.log(event)}\r\n//   eventDidFire: (event) => {console.log(event)}      \r\n// });\r\nmodel.registerListener({\r\n  nodesUpdated: () => { console.log(\"Event nodesUpdated\") },\r\n  offsetUpdated: () => { console.log(\"Event offsetUpdated\") }\r\n});\r\n\r\n  engine.setModel(model);\r\n  \r\n\r\n\r\n\r\n  // // link them and add a label to the link\r\n// const link = port1.link<DefaultLinkModel>(port2);\r\n// link.addLabel('Hello World!');\r\n\r\n\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {/* <button onClick={() => dispatch(getWorkspace({ id: 1, name: 'jsv', nodes: [] }))}>Hent graf</button> */}\r\n      <br /><br />\r\n      <div id=\"canvas\" className='graph' onDrop={ e => { \r\n          let nodeType = JSON.parse(e.dataTransfer.getData(\"node_type\"));\r\n          \r\n\r\n          const n = new MbNodeModel({name: \"Krafla\", title: \"Dette er en lang\"});\r\n          // let newNode = new FamNode();\r\n          // newNode.id = '';\r\n\r\n    //       id: string,\r\n    // name: string,\r\n    // x: number,\r\n    // y: number,\r\n    // ports: Port[],\r\n    // nodeType: Nodetype\r\n\r\n\r\n\r\n          var pos = engine.getRelativeMousePoint(e);\r\n          n.setPosition(pos.x, pos.y);\r\n          model.addNode(n);\r\n          engine.setModel(model);\r\n          \r\n          // var nodes = model.getNodes();\r\n          // console.log(nodes);\r\n\r\n          \r\n          \r\n        }}  \r\n        onDragOver={ e => { e.preventDefault(); } }>\r\n      <CanvasWidget engine={engine} className='canvas' />\r\n      </div>\r\n      <NodeTypeOverview />\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\n  export default WorkspaceComponent;\r\n","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\store\\workspace\\reducers.ts",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\store\\workspace\\types.ts",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\sagas\\index.ts",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\sagas\\workspace\\saga.ts",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\store\\workspace\\actions.ts",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\store\\index.ts",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\data\\WorkspaceDataset.js",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\components\\home\\Home.tsx",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\components\\workspace\\index.ts",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\components\\home\\index.ts",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\components\\nodetypes\\index.ts",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\components\\app\\index.ts",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\components\\app\\App.tsx",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\components\\index.ts",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\components\\header\\index.ts",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\components\\footer\\index.ts",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\components\\header\\Header.tsx",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\components\\footer\\Footer.tsx",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\store\\nodetypes\\reducers.ts",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\store\\nodetypes\\types.ts",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\store\\nodetypes\\actions.ts",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\sagas\\nodetype\\saga.ts",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\data\\NodeTypeDataset.js",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\store\\models\\node\\MbNodeWidget.tsx",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\store\\models\\node\\MbNodeModel.ts",["179","180","181"],"import { NodeModel, NodeModelGenerics, PortModelAlignment } from '@projectstorm/react-diagrams';\r\nimport { MbPortModel } from '../port/MbPortModel';\r\nimport { BasePositionModelOptions, DeserializeEvent } from '@projectstorm/react-canvas-core';\r\n\r\nexport interface MbModelOptions extends BasePositionModelOptions {\r\n\tname?: string;\r\n\ttitle?: string;\r\n}\r\n\r\nexport interface MbNodeModelGenerics extends NodeModelGenerics {\r\n\tOPTIONS: MbModelOptions;\r\n}\r\n\r\nexport class MbNodeModel extends NodeModel<MbNodeModelGenerics> {\r\n\tconstructor(options?: MbModelOptions) {\r\n\t\tsuper({ type: 'mb', ...options });\r\n\t\t\r\n\t\t// this.addPort(new MbPortModel(true, \"port\"));\r\n\t\t// this.addPort(new MdPortModel(PortModelAlignment.LEFT));\r\n\t\t// this.addPort(new MdPortModel(PortModelAlignment.BOTTOM));\r\n\t\t// this.addPort(new MdPortModel(PortModelAlignment.RIGHT));\r\n\t}\r\n}\r\n","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\store\\models\\node\\MbNodeFactory.tsx",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\store\\models\\index.ts",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\store\\models\\port\\MbPortFactory.ts",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\store\\models\\port\\MbPortModel.ts",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\store\\models\\link\\MbLinkModel.ts",["182","183"],"import {\r\n\tDiagramEngine,\r\n\tLabelModel,\r\n\tLinkModel,\r\n\tLinkModelGenerics,\r\n\tLinkModelListener,\r\n\tPortModel,\r\n\tPortModelAlignment\r\n} from '@projectstorm/react-diagrams-core';\r\nimport { MbLabelModel } from '../label/MbLabelModel';\r\nimport { BezierCurve } from '@projectstorm/geometry';\r\nimport { BaseEntityEvent, BaseModelOptions, DeserializeEvent } from '@projectstorm/react-canvas-core';\r\n\r\nexport interface MbLinkModelListener extends LinkModelListener {\r\n\tcolorChanged?(event: BaseEntityEvent<MbLinkModel> & { color: null | string }): void;\r\n\twidthChanged?(event: BaseEntityEvent<MbLinkModel> & { width: 0 | number }): void;\r\n}\r\n\r\nexport interface MbLinkModelOptions extends BaseModelOptions {\r\n\twidth?: number;\r\n\tcolor?: string;\r\n\tselectedColor?: string;\r\n\tcurvyness?: number;\r\n\ttype?: string;\r\n\ttestName?: string;\r\n}\r\n\r\nexport interface MbLinkModelGenerics extends LinkModelGenerics {\r\n\tLISTENER: MbLinkModelListener;\r\n\tOPTIONS: MbLinkModelOptions;\r\n}\r\n\r\nexport class MbLinkModel extends LinkModel<MbLinkModelGenerics> {\r\n\tconstructor(options: MbLinkModelOptions = {}) {\r\n\t\tsuper({\r\n\t\t\ttype: 'mb',\r\n\t\t\twidth: options.width || 3,\r\n\t\t\tcolor: options.color || 'gray',\r\n\t\t\tselectedColor: options.selectedColor || 'rgb(0,192,255)',\r\n\t\t\tcurvyness: 50,\r\n\t\t\t...options\r\n\t\t});\r\n\t}\r\n\r\n\tcalculateControlOffset(port: PortModel): [number, number] {\r\n\t\tif (port.getOptions().alignment === PortModelAlignment.RIGHT) {\r\n\t\t\treturn [this.options.curvyness, 0];\r\n\t\t} else if (port.getOptions().alignment === PortModelAlignment.LEFT) {\r\n\t\t\treturn [-this.options.curvyness, 0];\r\n\t\t} else if (port.getOptions().alignment === PortModelAlignment.TOP) {\r\n\t\t\treturn [0, -this.options.curvyness];\r\n\t\t}\r\n\t\treturn [0, this.options.curvyness];\r\n\t}\r\n\r\n\tgetSVGPath(): string {\r\n\t\tif (this.points.length == 2) {\r\n\t\t\tconst curve = new BezierCurve();\r\n\t\t\tcurve.setSource(this.getFirstPoint().getPosition());\r\n\t\t\tcurve.setTarget(this.getLastPoint().getPosition());\r\n\t\t\tcurve.setSourceControl(this.getFirstPoint().getPosition().clone());\r\n\t\t\tcurve.setTargetControl(this.getLastPoint().getPosition().clone());\r\n\r\n\t\t\tif (this.sourcePort) {\r\n\t\t\t\tcurve.getSourceControl().translate(...this.calculateControlOffset(this.getSourcePort()));\r\n\t\t\t}\r\n\r\n\t\t\tif (this.targetPort) {\r\n\t\t\t\tcurve.getTargetControl().translate(...this.calculateControlOffset(this.getTargetPort()));\r\n\t\t\t}\r\n\t\t\treturn curve.getSVGCurve();\r\n\t\t}\r\n\t}\r\n\r\n\tserialize() {\r\n\t\treturn {\r\n\t\t\t...super.serialize(),\r\n\t\t\twidth: this.options.width,\r\n\t\t\tcolor: this.options.color,\r\n\t\t\tcurvyness: this.options.curvyness,\r\n\t\t\tselectedColor: this.options.selectedColor\r\n\t\t};\r\n\t}\r\n\r\n\tdeserialize(event: DeserializeEvent<this>) {\r\n\t\tsuper.deserialize(event);\r\n\t\tthis.options.color = event.data.color;\r\n\t\tthis.options.width = event.data.width;\r\n\t\tthis.options.curvyness = event.data.curvyness;\r\n\t\tthis.options.selectedColor = event.data.selectedColor;\r\n\t}\r\n\r\n\taddLabel(label: LabelModel | string) {\r\n\t\tif (label instanceof LabelModel) {\r\n\t\t\treturn super.addLabel(label);\r\n\t\t}\r\n\t\tlet labelOb = new MbLabelModel();\r\n\t\tlabelOb.setLabel(label);\r\n\t\treturn super.addLabel(labelOb);\r\n\t}\r\n\r\n\tsetWidth(width: number) {\r\n\t\tthis.options.width = width;\r\n\t\tthis.fireEvent({ width }, 'widthChanged');\r\n\t}\r\n\r\n\tsetColor(color: string) {\r\n\t\tthis.options.color = color;\r\n\t\tthis.fireEvent({ color }, 'colorChanged');\r\n\t}\r\n}","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\store\\models\\label\\MbLabelModel.tsx",["184"],"import { DiagramEngine, LabelModel, LabelModelGenerics, LabelModelOptions } from '@projectstorm/react-diagrams-core';\r\nimport { DeserializeEvent } from '@projectstorm/react-canvas-core';\r\n\r\nexport interface MbLabelModelOptions extends LabelModelOptions {\r\n\tlabel?: string;\r\n}\r\n\r\nexport interface MbLabelModelGenerics extends LabelModelGenerics {\r\n\tOPTIONS: MbLabelModelOptions;\r\n}\r\n\r\nexport class MbLabelModel extends LabelModel<MbLabelModelGenerics> {\r\n\tconstructor(options: MbLabelModelOptions = {}) {\r\n\t\tsuper({\r\n\t\t\toffsetY: options.offsetY == null ? -23 : options.offsetY,\r\n\t\t\ttype: 'mb',\r\n\t\t\t...options\r\n\t\t});\r\n\t}\r\n\r\n\tsetLabel(label: string) {\r\n\t\tthis.options.label = label;\r\n\t}\r\n\r\n\tdeserialize(event: DeserializeEvent<this>) {\r\n\t\tsuper.deserialize(event);\r\n\t\tthis.options.label = event.data.label;\r\n\t}\r\n\r\n\tserialize() {\r\n\t\treturn {\r\n\t\t\t...super.serialize(),\r\n\t\t\tlabel: this.options.label\r\n\t\t};\r\n\t}\r\n}","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\store\\treeview\\reducers.ts",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\store\\treeview\\types.ts",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\sagas\\treeview\\saga.ts",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\data\\TreeviewDataset.js",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\store\\treeview\\actions.ts",[],{"ruleId":"185","replacedBy":"186"},{"ruleId":"187","replacedBy":"188"},{"ruleId":"185","replacedBy":"186"},{"ruleId":"187","replacedBy":"188"},{"ruleId":"189","severity":1,"message":"190","line":3,"column":56,"nodeType":"191","messageId":"192","endLine":3,"endColumn":74},{"ruleId":"189","severity":1,"message":"193","line":6,"column":40,"nodeType":"191","messageId":"192","endLine":6,"endColumn":51},{"ruleId":"189","severity":1,"message":"194","line":97,"column":15,"nodeType":"191","messageId":"192","endLine":97,"endColumn":23},{"ruleId":"189","severity":1,"message":"190","line":1,"column":40,"nodeType":"191","messageId":"192","endLine":1,"endColumn":58},{"ruleId":"189","severity":1,"message":"193","line":2,"column":10,"nodeType":"191","messageId":"192","endLine":2,"endColumn":21},{"ruleId":"189","severity":1,"message":"195","line":3,"column":36,"nodeType":"191","messageId":"192","endLine":3,"endColumn":52},{"ruleId":"189","severity":1,"message":"196","line":2,"column":2,"nodeType":"191","messageId":"192","endLine":2,"endColumn":15},{"ruleId":"197","severity":1,"message":"198","line":57,"column":26,"nodeType":"199","messageId":"200","endLine":57,"endColumn":28},{"ruleId":"189","severity":1,"message":"196","line":1,"column":10,"nodeType":"191","messageId":"192","endLine":1,"endColumn":23},"no-native-reassign",["201"],"no-negated-in-lhs",["202"],"@typescript-eslint/no-unused-vars","'PortModelAlignment' is defined but never used.","Identifier","unusedVar","'MbPortModel' is defined but never used.","'nodeType' is assigned a value but never used.","'DeserializeEvent' is defined but never used.","'DiagramEngine' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]