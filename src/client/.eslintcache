[{"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\index.tsx":"1","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\reportWebVitals.js":"2","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\store\\index.ts":"3","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\index.ts":"4","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\store\\workspace\\reducers.ts":"5","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\store\\nodetypes\\reducers.ts":"6","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\store\\user\\reducers.ts":"7","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\store\\nodetypes\\types.ts":"8","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\store\\user\\types.ts":"9","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\store\\workspace\\types.ts":"10","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\sagas\\index.ts":"11","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\home\\index.ts":"12","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\header\\index.ts":"13","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\footer\\index.ts":"14","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\app\\index.ts":"15","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\nodetypes\\index.ts":"16","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\index.ts":"17","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\toolbox\\index.ts":"18","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\index.ts":"19","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\sagas\\workspace\\saga.ts":"20","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\sagas\\nodetype\\saga.ts":"21","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\sagas\\user\\saga.ts":"22","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\data\\WorkspaceDataset.js":"23","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\data\\NodeTypeDataset.js":"24","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\data\\UserDataset.js":"25","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\services\\workspaceService.ts":"26","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\home\\Home.tsx":"27","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\header\\Header.tsx":"28","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\footer\\Footer.tsx":"29","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\app\\App.tsx":"30","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\DiagramComponent.tsx":"31","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\nodetypes\\NodeTypeComponent.tsx":"32","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\nodetypes\\NodeTypeOverview.tsx":"33","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\toolbox\\ToolboxComponent.tsx":"34","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\TreeviewComponent.tsx":"35","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\store\\workspace\\actions.ts":"36","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\store\\nodetypes\\actions.ts":"37","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\ConnectSelectorNode.tsx":"38","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\DefaultSelectorNode.tsx":"39","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\models\\user\\index.ts":"40","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\services\\index.ts":"41","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\models\\diagram\\index.ts":"42","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\models\\user\\types.ts":"43","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\models\\diagram\\Diagram.ts":"44","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\assets\\index.ts":"45","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\TreeviewBody.tsx":"46","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\TreeviewHeader.tsx":"47","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\TreeviewAspectDropdown.tsx":"48","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\TreeviewAspectInfo.tsx":"49","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\inspector\\TreeviewInspectorComponent.tsx":"50","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\inspector\\index.ts":"51","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\inspector\\TreeviewInspectorContent.tsx":"52","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\textResources.tsx":"53","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\DiagramAddNodes.tsx":"54","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\DiagramAddConnections.tsx":"55"},{"size":822,"mtime":1615460685173,"results":"56","hashOfConfig":"57"},{"size":375,"mtime":1615282721492,"results":"58","hashOfConfig":"57"},{"size":875,"mtime":1615384119040,"results":"59","hashOfConfig":"57"},{"size":414,"mtime":1615384119008,"results":"60","hashOfConfig":"57"},{"size":821,"mtime":1615384119047,"results":"61","hashOfConfig":"57"},{"size":717,"mtime":1615384119042,"results":"62","hashOfConfig":"57"},{"size":750,"mtime":1615384119044,"results":"63","hashOfConfig":"57"},{"size":758,"mtime":1615384119043,"results":"64","hashOfConfig":"57"},{"size":707,"mtime":1615384119045,"results":"65","hashOfConfig":"57"},{"size":715,"mtime":1615384119048,"results":"66","hashOfConfig":"57"},{"size":592,"mtime":1615384119036,"results":"67","hashOfConfig":"57"},{"size":58,"mtime":1615384119007,"results":"68","hashOfConfig":"57"},{"size":63,"mtime":1615384119006,"results":"69","hashOfConfig":"57"},{"size":60,"mtime":1615384119002,"results":"70","hashOfConfig":"57"},{"size":54,"mtime":1615384118995,"results":"71","hashOfConfig":"57"},{"size":131,"mtime":1615384119010,"results":"72","hashOfConfig":"57"},{"size":215,"mtime":1615465136973,"results":"73","hashOfConfig":"57"},{"size":73,"mtime":1615384119013,"results":"74","hashOfConfig":"57"},{"size":347,"mtime":1615459079621,"results":"75","hashOfConfig":"57"},{"size":1525,"mtime":1615384119038,"results":"76","hashOfConfig":"57"},{"size":1119,"mtime":1615384119036,"results":"77","hashOfConfig":"57"},{"size":1302,"mtime":1615384119037,"results":"78","hashOfConfig":"57"},{"size":11085,"mtime":1615384119024,"results":"79","hashOfConfig":"57"},{"size":414,"mtime":1615384119022,"results":"80","hashOfConfig":"57"},{"size":934,"mtime":1615384119023,"results":"81","hashOfConfig":"57"},{"size":11825,"mtime":1615384119040,"results":"82","hashOfConfig":"57"},{"size":1812,"mtime":1615464165089,"results":"83","hashOfConfig":"57"},{"size":1392,"mtime":1615463214185,"results":"84","hashOfConfig":"57"},{"size":607,"mtime":1615384119001,"results":"85","hashOfConfig":"57"},{"size":359,"mtime":1615460713999,"results":"86","hashOfConfig":"57"},{"size":3582,"mtime":1615465165601,"results":"87","hashOfConfig":"57"},{"size":397,"mtime":1615384119009,"results":"88","hashOfConfig":"57"},{"size":972,"mtime":1615384119009,"results":"89","hashOfConfig":"57"},{"size":348,"mtime":1615384119012,"results":"90","hashOfConfig":"57"},{"size":684,"mtime":1615459128837,"results":"91","hashOfConfig":"57"},{"size":386,"mtime":1615384119046,"results":"92","hashOfConfig":"57"},{"size":374,"mtime":1615384119041,"results":"93","hashOfConfig":"57"},{"size":1117,"mtime":1615464542981,"results":"94","hashOfConfig":"57"},{"size":1877,"mtime":1615464554206,"results":"95","hashOfConfig":"57"},{"size":24,"mtime":1615384119031,"results":"96","hashOfConfig":"57"},{"size":60,"mtime":1615384119039,"results":"97","hashOfConfig":"57"},{"size":26,"mtime":1615384119030,"results":"98","hashOfConfig":"57"},{"size":293,"mtime":1615384119031,"results":"99","hashOfConfig":"57"},{"size":2700,"mtime":1615384119030,"results":"100","hashOfConfig":"57"},{"size":192,"mtime":1615386236376,"results":"101","hashOfConfig":"57"},{"size":1219,"mtime":1615392273946,"results":"102","hashOfConfig":"57"},{"size":187,"mtime":1615390453194,"results":"103","hashOfConfig":"57"},{"size":926,"mtime":1615463315974,"results":"104","hashOfConfig":"57"},{"size":513,"mtime":1615460678231,"results":"105","hashOfConfig":"57"},{"size":395,"mtime":1615463317179,"results":"106","hashOfConfig":"57"},{"size":192,"mtime":1615459264036,"results":"107","hashOfConfig":"57"},{"size":274,"mtime":1615463313911,"results":"108","hashOfConfig":"57"},{"size":424,"mtime":1615463583851,"results":"109","hashOfConfig":"57"},{"size":572,"mtime":1615465078899,"results":"110","hashOfConfig":"57"},{"size":516,"mtime":1615464994617,"results":"111","hashOfConfig":"57"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},"127lrwc",{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"114"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\index.tsx",[],["225","226"],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\reportWebVitals.js",[],["227","228"],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\store\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\store\\workspace\\reducers.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\store\\nodetypes\\reducers.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\store\\user\\reducers.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\store\\nodetypes\\types.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\store\\user\\types.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\store\\workspace\\types.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\sagas\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\home\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\header\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\footer\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\app\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\nodetypes\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\toolbox\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\sagas\\workspace\\saga.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\sagas\\nodetype\\saga.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\sagas\\user\\saga.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\data\\WorkspaceDataset.js",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\data\\NodeTypeDataset.js",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\data\\UserDataset.js",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\services\\workspaceService.ts",["229","230","231","232","233"],"import { Workspace, Node, Edge, Aspects, Graph, CategoryDescriptor, AspectDescriptor, Connection } from '../models/workspace';\r\nimport { Diagram, DiagramNode, DiagramConnector, DiagramConnectorType, DiagramConnectionType,  DiagramConnection, DIAGRAM_CONNECTOR_TYPE, DIAGRAM_CONNECTION_TYPE } from './../models/diagram';\r\nimport { AspectRatioSharp } from '@material-ui/icons';\r\nimport { brotliDecompress } from 'zlib';\r\nimport { nodetypeReducer } from '../store/nodetypes/reducers';\r\n\r\nexport class WorkspaceService {\r\n    private workspace: Workspace;\r\n    functionalNodeMap: Map<string, Node>;\r\n    productNodeMap: Map<string, Node>;\r\n    functionalEdgeMap: Map<string, Edge>;\r\n    productEdgeMap: Map<string, Edge>;\r\n\r\n    proxyNodeMap: Map<string, Node>;\r\n    proxyEdgeMap: Map<string, Edge>;\r\n\r\n    constructor(workspace: Workspace) {\r\n        this.workspace = workspace;\r\n        this.functionalNodeMap = this.createNodeMap('1', '1');\r\n        this.productNodeMap = this.createNodeMap('2', '1');\r\n        this.functionalEdgeMap = this.createEdgeMap('1', '1');\r\n        this.productEdgeMap = this.createEdgeMap('2', '1');\r\n        this.proxyNodeMap = new Map<string, Node>();\r\n        this.proxyEdgeMap = new Map<string, Edge>();\r\n    }\r\n\r\n    createNodeMap(aspect: string, category: string): Map<string, Node> {\r\n        var aspects = this.workspace.aspects.filter(x => x.aspect === aspect && x.category === category);\r\n        if(!aspects && aspects.length <= 0)\r\n            return new Map<string, Node>();\r\n\r\n        return new Map(aspects[0].graph.nodes.map(obj => [obj.id, obj] as [string, Node]));\r\n    }\r\n\r\n    createEdgeMap(aspect: string, category: string): Map<string, Edge> {\r\n        var aspects = this.workspace.aspects.filter(x => x.aspect === aspect && x.category === category);\r\n        if(!aspects && aspects.length <= 0)\r\n            return new Map<string, Edge>();\r\n\r\n        return new Map(aspects[0].graph.edges.map(obj => [obj.id, obj] as [string, Edge]));\r\n    }\r\n\r\n    getProductLabel(nodeId: string): string {\r\n        var actualProductnode = this.productNodeMap.get(nodeId);\r\n        if(actualProductnode) {\r\n            return actualProductnode.label;\r\n        }\r\n\r\n        const actualNode = this.functionalNodeMap.get(nodeId);\r\n        \r\n        if(!actualNode)\r\n            return '';\r\n\r\n        // TODO: Use Typeregister\r\n        if(actualNode.type === 'imft:Reservoir')\r\n            return 'Reservoir';        \r\n    }\r\n\r\n    getRootEdges(nodeId: string): Edge[] {\r\n        var aspects = this.workspace.aspects.filter(x => x.aspect === '1' && x.category === '1');\r\n        if(!aspects && aspects.length <= 0)\r\n            return [];\r\n        \r\n        const edges = aspects[0].graph.edges.filter(x => x.to === nodeId && (x.type === 'imfo:partOf'));\r\n        let filteredEdges: Edge[] = [];\r\n\r\n        // TODO: Use Typeregister\r\n        edges.forEach(edge => {\r\n            const node = this.functionalNodeMap.get(edge.from);\r\n            if(node && !node.type.toLowerCase().includes('input') && !node.type.toLowerCase().includes('output')) {\r\n                filteredEdges.push(edge);\r\n            }                \r\n        });\r\n        return filteredEdges;\r\n    }\r\n\r\n    getConnectorEdges(nodeId: string): Edge[] {\r\n        var aspects = this.workspace.aspects.filter(x => x.aspect === '1' && x.category === '1');\r\n        if(!aspects && aspects.length <= 0)\r\n            return [];\r\n        \r\n        const edges = aspects[0].graph.edges.filter(x => x.to === nodeId && x.type === 'imfo:partOf');\r\n        let filteredEdges: Edge[] = [];\r\n\r\n        // TODO: Use Typeregister\r\n        edges.forEach(edge => {\r\n            const node = this.functionalNodeMap.get(edge.from);\r\n            if(node && (node.type.toLowerCase().includes('input') || node.type.toLowerCase().includes('output'))) {\r\n                filteredEdges.push(edge);\r\n            }                \r\n        });\r\n        return filteredEdges;\r\n    }\r\n\r\n    getFunctionalAspect(): Aspects[] {\r\n        return this.workspace.aspects.filter(x => x.aspect === '1');\r\n    }\r\n\r\n    getProductAspect(): Aspects[] {\r\n        return this.workspace.aspects.filter(x => x.aspect === '2');\r\n    }\r\n\r\n    getAreaAspect(): Aspects[] {\r\n        return this.workspace.aspects.filter(x => x.aspect === '3');\r\n    }\r\n\r\n    getFunctionalAspectCategories() : CategoryDescriptor[] {\r\n        let functionalCategories: CategoryDescriptor[] = [];\r\n        const fAspect = this.getFunctionalAspect();\r\n        fAspect.forEach(aspect => {\r\n            functionalCategories.push({\r\n                id: aspect.category,\r\n                name: aspect.descriptor.name,\r\n                description: aspect.descriptor.description\r\n            });\r\n        })\r\n        return functionalCategories;\r\n    }\r\n\r\n    getProductAspectCategories() : CategoryDescriptor[] {\r\n        let productCategories: CategoryDescriptor[] = [];\r\n        const pAspect = this.getProductAspect();\r\n        pAspect.forEach(aspect => {\r\n            productCategories.push({\r\n                id: aspect.category,\r\n                name: aspect.descriptor.name,\r\n                description: aspect.descriptor.description\r\n            });\r\n        })\r\n        return productCategories;\r\n    }\r\n\r\n    getAreaAspectCategories() : CategoryDescriptor[] {\r\n        let areaCategories: CategoryDescriptor[] = [];\r\n        const aAspect = this.getAreaAspect();\r\n        aAspect.forEach(aspect => {\r\n            areaCategories.push({\r\n                id: aspect.category,\r\n                name: aspect.descriptor.name,\r\n                description: aspect.descriptor.description\r\n            });\r\n        })\r\n        if(!areaCategories || areaCategories.length <= 0){\r\n            areaCategories.push({\r\n                id: null,\r\n                name: 'default',\r\n                description: ''\r\n            });\r\n        }\r\n        return areaCategories;\r\n    }\r\n\r\n    // getNodesConnectedToRoot(aspectId: string): Node[] {\r\n    //     const aspectEdges: Edge[] = [];\r\n    //     const aspectNodes: Node[] = [];\r\n    //     const chosenAspect = this.workspace.aspects\r\n\t// \t.filter(x => x.aspect === aspectId);\r\n\r\n\t// \tchosenAspect.forEach(aspect => {\r\n\t// \t\tif(aspect.graph.edges.filter(e => e.to === 'root' && e.type === 'imfo:partOf')){\r\n\t// \t\t\taspectEdges.push({\r\n\t// \t\t\t\tid: e.id;\r\n\t// \t\t\t});\r\n\t// \t\t}\t\r\n\t// \t})\r\n\r\n    getConnectionEdges(nodeId: string): Connection[] {\r\n        var aspects = this.workspace.aspects.filter(x => x.aspect === '1' && x.category === '1');\r\n        \r\n        if(!aspects && aspects.length <= 0)\r\n            return [];\r\n\r\n            const edges = aspects[0].graph.edges.filter(x => x.to === nodeId && x.type !== 'imfo:partOf');\r\n            let filteredConnections: Connection[] = [];\r\n\r\n        // TODO: Use Typeregister\r\n        edges.forEach(edge => {\r\n            if(edge) {           \r\n                var parent = aspects[0].graph.edges.filter(x => x.from === edge.from && x.type === 'imfo:partOf');\r\n                \r\n                if(parent && parent.length > 0)\r\n                {\r\n                    filteredConnections.push({\r\n                        id: edge.id,\r\n                        type: edge.type,\r\n                        from: parent[0].to,\r\n                        to: edge.to,\r\n                        connector: parent[0].id\r\n                    });\r\n                }\r\n            }              \r\n        });\r\n\r\n        return filteredConnections;\r\n    }\r\n\r\n    getDiagram(nodeId: string) : Diagram {\r\n        var aspects = this.workspace.aspects.filter(x => x.aspect === '1' && x.category === '1');\r\n        \r\n        if(!aspects && aspects.length <= 0)\r\n            return null;\r\n\r\n        var diagram = new Diagram(nodeId, this.productNodeMap.get(nodeId)?.label ?? this.functionalNodeMap.get(nodeId)?.label ?? this.workspace.root.title);\r\n        const nodeEdges = aspects[0].graph.edges.filter(x => x.to === nodeId && x.type === 'imfo:partOf' && !this.functionalNodeMap.get(x.from).type.toLowerCase().includes('input') && !this.functionalNodeMap.get(x.from).type.toLowerCase().includes('output'));\r\n        \r\n        diagram.nodes = nodeEdges.map(x => {\r\n            const node = this.functionalNodeMap.get(x.from);\r\n            const label = this.productNodeMap.get(node.id)?.label ?? node.type;\r\n            const diagramNode = new DiagramNode(node.id, label);\r\n            diagramNode.connectors = this.getConnectors(node.id, aspects[0]);\r\n\r\n            diagram.connections = diagram.connections.concat(this.getConnections(node.id, aspects[0], diagramNode.connectors));\r\n\r\n\r\n            return diagramNode;\r\n            });\r\n        return diagram;\r\n    }\r\n\r\n    getConnectors(nodeId: string, aspects: Aspects): DiagramConnector[] {\r\n        if(!aspects && !aspects.graph && !aspects.graph.edges && aspects.graph.edges.length <= 0)\r\n            return [];\r\n\r\n            const connectors = aspects.graph.edges\r\n                .filter(x => x.to === nodeId && x.type === 'imfo:partOf' && (this.functionalNodeMap.get(x.from).type.toLowerCase().includes('input') || this.functionalNodeMap.get(x.from).type.toLowerCase().includes('output') || this.functionalNodeMap.get(x.from).type.toLowerCase().includes('supply')))\r\n                .map(x => {\r\n                    const diagramType = this.functionalNodeMap.get(x.from).type.toLowerCase().includes('input') ? DIAGRAM_CONNECTOR_TYPE.TARGET as DiagramConnectorType : DIAGRAM_CONNECTOR_TYPE.SOURCE as DiagramConnectorType;\r\n                    const label = this.functionalNodeMap.get(x.from)?.type ?? x.type;\r\n                    return new DiagramConnector(x.id, label, diagramType); \r\n                });\r\n            return connectors;\r\n    }\r\n\r\n    getConnections(nodeId: string, aspects: Aspects, connectors: DiagramConnector[]): DiagramConnection[] {\r\n        if(!aspects && !aspects.graph && !aspects.graph.edges && aspects.graph.edges.length <= 0)\r\n            return [];\r\n\r\n        return aspects.graph.edges\r\n            .filter(x => x.to === nodeId && Object.values(DIAGRAM_CONNECTION_TYPE).includes(x.type))\r\n            .map(x => {\r\n                const sourceParentEdge = aspects.graph.edges.filter(e => e.from === 'n2' && e.type === 'imfo:partOf')[0];\r\n                const targetConnector = connectors.filter(x => x.type === DIAGRAM_CONNECTOR_TYPE.TARGET)[0];\r\n                // TODO: This values must be dynamic \r\n                return new DiagramConnection(x.id, x.type, sourceParentEdge.to, 'e2', 'n4', targetConnector.id, x.type as DiagramConnectionType);\r\n            });\r\n    }\r\n\r\n    guid() : string {\r\n        function _p8(s: boolean) {\r\n            var p = (Math.random().toString(16)+\"000000000\").substr(2,8);\r\n            return s ? \"-\" + p.substr(0,4) + \"-\" + p.substr(4,4) : p ;\r\n        }\r\n        return _p8(false) + _p8(true) + _p8(true) + _p8(false);\r\n    }\r\n\r\n    getProxyNodes(aspect: Aspects) {\r\n        if(!aspect && !aspect.graph && !aspect.graph.edges && aspect.graph.edges.length <= 0)\r\n            return;\r\n\r\n        aspect.graph.nodes\r\n            .filter(x => !x.type.toLowerCase().includes('input') && !x.type.toLowerCase().includes('output') && !x.type.toLowerCase().includes('pipeline'))\r\n            .forEach(n => {\r\n                const sourceNodeId = this.guid();\r\n                const targetNodeId = this.guid();\r\n                \r\n                aspect.graph.nodes.push({id: sourceNodeId, type: \"imfo:SupplyOutput\", label:'Supply output' });\r\n                aspect.graph.nodes.push({id: targetNodeId, type: \"imfo:SupplyInput\", label:'Supply input' });\r\n\r\n                aspect.graph.edges.push({ id: this.guid(), type: 'imfo:partOf', from: sourceNodeId, to: n.id});\r\n                aspect.graph.edges.push({ id: this.guid(), type: 'imfo:partOf', from: targetNodeId, to: n.id});\r\n            });\r\n    }\r\n}\r\n","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\home\\Home.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\header\\Header.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\footer\\Footer.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\app\\App.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\DiagramComponent.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\nodetypes\\NodeTypeComponent.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\nodetypes\\NodeTypeOverview.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\toolbox\\ToolboxComponent.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\TreeviewComponent.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\store\\workspace\\actions.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\store\\nodetypes\\actions.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\ConnectSelectorNode.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\DefaultSelectorNode.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\models\\user\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\services\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\models\\diagram\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\models\\user\\types.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\models\\diagram\\Diagram.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\assets\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\TreeviewBody.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\TreeviewHeader.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\TreeviewAspectDropdown.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\TreeviewAspectInfo.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\inspector\\TreeviewInspectorComponent.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\inspector\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\inspector\\TreeviewInspectorContent.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\textResources.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\DiagramAddNodes.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\DiagramAddConnections.tsx",[],{"ruleId":"234","replacedBy":"235"},{"ruleId":"236","replacedBy":"237"},{"ruleId":"234","replacedBy":"235"},{"ruleId":"236","replacedBy":"237"},{"ruleId":"238","severity":1,"message":"239","line":1,"column":42,"nodeType":"240","messageId":"241","endLine":1,"endColumn":47},{"ruleId":"238","severity":1,"message":"242","line":1,"column":69,"nodeType":"240","messageId":"241","endLine":1,"endColumn":85},{"ruleId":"238","severity":1,"message":"243","line":3,"column":10,"nodeType":"240","messageId":"241","endLine":3,"endColumn":26},{"ruleId":"238","severity":1,"message":"244","line":4,"column":10,"nodeType":"240","messageId":"241","endLine":4,"endColumn":26},{"ruleId":"238","severity":1,"message":"245","line":5,"column":10,"nodeType":"240","messageId":"241","endLine":5,"endColumn":25},"no-native-reassign",["246"],"no-negated-in-lhs",["247"],"@typescript-eslint/no-unused-vars","'Graph' is defined but never used.","Identifier","unusedVar","'AspectDescriptor' is defined but never used.","'AspectRatioSharp' is defined but never used.","'brotliDecompress' is defined but never used.","'nodetypeReducer' is defined but never used.","no-global-assign","no-unsafe-negation"]