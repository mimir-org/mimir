<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
[{"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\index.tsx":"1","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\index.ts":"2","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\home\\index.ts":"3","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\header\\index.ts":"4","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\app\\index.ts":"5","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\nodetypes\\index.ts":"6","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\index.ts":"7","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\toolbox\\index.ts":"8","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\index.ts":"9","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\data\\WorkspaceDataset.js":"10","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\data\\NodeTypeDataset.js":"11","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\data\\UserDataset.js":"12","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\services\\workspaceService.ts":"13","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\home\\Home.tsx":"14","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\header\\Header.tsx":"15","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\app\\App.tsx":"16","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\DiagramComponent.tsx":"17","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\nodetypes\\NodeTypeComponent.tsx":"18","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\nodetypes\\NodeTypeOverview.tsx":"19","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\toolbox\\ToolboxComponent.tsx":"20","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\TreeviewComponent.tsx":"21","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\models\\user\\index.ts":"22","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\services\\index.ts":"23","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\models\\diagram\\index.ts":"24","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\models\\user\\types.ts":"25","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\models\\diagram\\Diagram.ts":"26","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\assets\\index.ts":"27","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\TreeviewBody.tsx":"28","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\TreeviewHeader.tsx":"29","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\textResources.tsx":"30","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\DiagramAddNodes.tsx":"31","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\DiagramAddConnections.tsx":"32","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\selectorNodes\\defaultSelectors\\DefaultSelectorNode.tsx":"33","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\selectorNodes\\connectSelectors\\ConnectSelectorNode.tsx":"34","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\selectorNodes\\defaultSelectors\\InputConnect.tsx":"35","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\selectorNodes\\defaultSelectors\\OutputConnect.tsx":"36","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\selectorNodes\\connectSelectors\\DataConnect.tsx":"37","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\DrawMiniMap.tsx":"38","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\hooks\\useTreeviewChangeHandler.tsx":"39","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\workspace\\actions.ts":"40","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\workspace\\types.ts":"41","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\nodetypes\\actions.ts":"42","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\nodetypes\\types.ts":"43","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\index.ts":"44","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\nodetypes\\reducers.ts":"45","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\workspace\\reducers.ts":"46","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\user\\reducers.ts":"47","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\sagas\\index.ts":"48","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\user\\types.ts":"49","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\sagas\\workspace\\saga.ts":"50","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\sagas\\user\\saga.ts":"51","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\sagas\\nodetype\\saga.ts":"52","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\testing\\getAspect.tsx":"53","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\testing\\aspectReducer.tsx":"54","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\index.ts":"55","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\InspectorComponent.tsx":"56","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\styled\\StyledInspectorComponent.tsx":"57","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\styled\\StyledToggleButton.tsx":"58","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\hooks\\useInspectorChangeHandler.tsx":"59","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\styled\\animated\\index.ts":"60","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\styled\\index.ts":"61","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\styled\\animated\\AnimatedToggleButton.tsx":"62","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\styled\\animated\\AnimatedMenu.tsx":"63","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\index.ts":"64","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\FragmentData.tsx":"65","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\helpers\\GetContentData.tsx":"66","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\helpers\\GetTextResource.tsx":"67","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\helpers\\index.ts":"68","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\styled\\index.ts":"69","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\helpers\\GetColor.tsx":"70","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\inspector\\actions\\changeInspector.tsx":"71","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\FragmentContent.tsx":"72","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\aspect\\AspectInfo.tsx":"73","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\aspect\\AspectDropdown.tsx":"74","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\inspector\\reducers\\inspectorReducer.tsx":"75","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\inspector\\reducers\\showInspectorReducer.tsx":"76","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\footer\\index.ts":"77","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\aspect\\index.ts":"78","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\footer\\Footer.tsx":"79","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\InspectorHeader.tsx":"80","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\ToggleBox.tsx":"81","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\hooks\\useInspectorToggleChangeHandler.tsx":"82","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\styled\\FragmentHeader.ts":"83","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\styled\\ToggleInspectorIcon.tsx":"84","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\styled\\StyledToggleBox.tsx":"85","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\styled\\FragmentHeaderWrapper.tsx":"86","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\styled\\StyledInspectorTitle.tsx":"87","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\styled\\StyledContainer.tsx":"88","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\styled\\FragmentDataWrapper.tsx":"89","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\styled\\StyledColumn.tsx":"90","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\styled\\StyledParagraph.tsx":"91","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\styled\\StyledInput.tsx":"92","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\inspector\\actions\\changeToggleInspector.tsx":"93"},{"size":511,"mtime":1615884814509,"results":"94","hashOfConfig":"95"},{"size":414,"mtime":1616630247585,"results":"96","hashOfConfig":"95"},{"size":58,"mtime":1615384119007,"results":"97","hashOfConfig":"95"},{"size":63,"mtime":1615384119006,"results":"98","hashOfConfig":"95"},{"size":56,"mtime":1615884814467,"results":"99","hashOfConfig":"95"},{"size":131,"mtime":1615384119010,"results":"100","hashOfConfig":"95"},{"size":215,"mtime":1615884814472,"results":"101","hashOfConfig":"95"},{"size":73,"mtime":1615384119013,"results":"102","hashOfConfig":"95"},{"size":329,"mtime":1616630247686,"results":"103","hashOfConfig":"95"},{"size":7908,"mtime":1616630247612,"results":"104","hashOfConfig":"95"},{"size":330,"mtime":1615884814507,"results":"105","hashOfConfig":"95"},{"size":723,"mtime":1615884814508,"results":"106","hashOfConfig":"95"},{"size":11954,"mtime":1615884814523,"results":"107","hashOfConfig":"95"},{"size":2321,"mtime":1616630247584,"results":"108","hashOfConfig":"95"},{"size":1392,"mtime":1615884814493,"results":"109","hashOfConfig":"95"},{"size":333,"mtime":1616607032091,"results":"110","hashOfConfig":"95"},{"size":3247,"mtime":1616630247578,"results":"111","hashOfConfig":"95"},{"size":476,"mtime":1615884814495,"results":"112","hashOfConfig":"95"},{"size":983,"mtime":1615884814496,"results":"113","hashOfConfig":"95"},{"size":354,"mtime":1615884814497,"results":"114","hashOfConfig":"95"},{"size":589,"mtime":1616630247607,"results":"115","hashOfConfig":"95"},{"size":24,"mtime":1615384119031,"results":"116","hashOfConfig":"95"},{"size":56,"mtime":1615884814522,"results":"117","hashOfConfig":"95"},{"size":26,"mtime":1615384119030,"results":"118","hashOfConfig":"95"},{"size":284,"mtime":1615884814511,"results":"119","hashOfConfig":"95"},{"size":2558,"mtime":1615884814510,"results":"120","hashOfConfig":"95"},{"size":210,"mtime":1615943687001,"results":"121","hashOfConfig":"95"},{"size":1209,"mtime":1616630247683,"results":"122","hashOfConfig":"95"},{"size":187,"mtime":1616075917914,"results":"123","hashOfConfig":"95"},{"size":783,"mtime":1616630247621,"results":"124","hashOfConfig":"95"},{"size":572,"mtime":1616445233098,"results":"125","hashOfConfig":"95"},{"size":516,"mtime":1616445333196,"results":"126","hashOfConfig":"95"},{"size":888,"mtime":1616493014694,"results":"127","hashOfConfig":"95"},{"size":528,"mtime":1615884814474,"results":"128","hashOfConfig":"95"},{"size":646,"mtime":1616630247579,"results":"129","hashOfConfig":"95"},{"size":614,"mtime":1615884814491,"results":"130","hashOfConfig":"95"},{"size":673,"mtime":1615884814478,"results":"131","hashOfConfig":"95"},{"size":648,"mtime":1615884814471,"results":"132","hashOfConfig":"95"},{"size":365,"mtime":1615812248733,"results":"133","hashOfConfig":"95"},{"size":342,"mtime":1615884814519,"results":"134","hashOfConfig":"95"},{"size":716,"mtime":1615884814520,"results":"135","hashOfConfig":"95"},{"size":342,"mtime":1615884814516,"results":"136","hashOfConfig":"95"},{"size":752,"mtime":1615884814517,"results":"137","hashOfConfig":"95"},{"size":1195,"mtime":1616630247619,"results":"138","hashOfConfig":"95"},{"size":746,"mtime":1616630247620,"results":"139","hashOfConfig":"95"},{"size":747,"mtime":1615884814520,"results":"140","hashOfConfig":"95"},{"size":824,"mtime":1615884814518,"results":"141","hashOfConfig":"95"},{"size":578,"mtime":1615884814512,"results":"142","hashOfConfig":"95"},{"size":692,"mtime":1615884814518,"results":"143","hashOfConfig":"95"},{"size":1409,"mtime":1615884814514,"results":"144","hashOfConfig":"95"},{"size":1136,"mtime":1615884814514,"results":"145","hashOfConfig":"95"},{"size":1009,"mtime":1615884814513,"results":"146","hashOfConfig":"95"},{"size":278,"mtime":1615887694260,"results":"147","hashOfConfig":"95"},{"size":494,"mtime":1615930158637,"results":"148","hashOfConfig":"95"},{"size":136,"mtime":1616630247601,"results":"149","hashOfConfig":"95"},{"size":820,"mtime":1616630247586,"results":"150","hashOfConfig":"95"},{"size":373,"mtime":1616630247602,"results":"151","hashOfConfig":"95"},{"size":630,"mtime":1616630247603,"results":"152","hashOfConfig":"95"},{"size":621,"mtime":1616629915746,"results":"153","hashOfConfig":"95"},{"size":134,"mtime":1615990840618,"results":"154","hashOfConfig":"95"},{"size":154,"mtime":1616532538448,"results":"155","hashOfConfig":"95"},{"size":459,"mtime":1616630247604,"results":"156","hashOfConfig":"95"},{"size":413,"mtime":1615990840616,"results":"157","hashOfConfig":"95"},{"size":124,"mtime":1616625469917,"results":"158","hashOfConfig":"95"},{"size":851,"mtime":1616630247589,"results":"159","hashOfConfig":"95"},{"size":2905,"mtime":1616630247591,"results":"160","hashOfConfig":"95"},{"size":477,"mtime":1616074562583,"results":"161","hashOfConfig":"95"},{"size":179,"mtime":1616074562583,"results":"162","hashOfConfig":"95"},{"size":672,"mtime":1616630247599,"results":"163","hashOfConfig":"95"},{"size":190,"mtime":1616630247590,"results":"164","hashOfConfig":"95"},{"size":396,"mtime":1616630247614,"results":"165","hashOfConfig":"95"},{"size":1323,"mtime":1616630247589,"results":"166","hashOfConfig":"95"},{"size":516,"mtime":1616630247718,"results":"167","hashOfConfig":"95"},{"size":1391,"mtime":1616630247719,"results":"168","hashOfConfig":"95"},{"size":900,"mtime":1616630247617,"results":"169","hashOfConfig":"95"},{"size":596,"mtime":1616630247618,"results":"170","hashOfConfig":"95"},{"size":60,"mtime":1616630247582,"results":"171","hashOfConfig":"95"},{"size":118,"mtime":1616630247686,"results":"172","hashOfConfig":"95"},{"size":639,"mtime":1616630247580,"results":"173","hashOfConfig":"95"},{"size":504,"mtime":1616630247587,"results":"174","hashOfConfig":"95"},{"size":1012,"mtime":1616630247588,"results":"175","hashOfConfig":"95"},{"size":432,"mtime":1616630247600,"results":"176","hashOfConfig":"95"},{"size":1055,"mtime":1616630247593,"results":"177","hashOfConfig":"95"},{"size":606,"mtime":1616630247598,"results":"178","hashOfConfig":"95"},{"size":254,"mtime":1616630247598,"results":"179","hashOfConfig":"95"},{"size":329,"mtime":1616630247594,"results":"180","hashOfConfig":"95"},{"size":206,"mtime":1616630247596,"results":"181","hashOfConfig":"95"},{"size":208,"mtime":1616630247595,"results":"182","hashOfConfig":"95"},{"size":349,"mtime":1616630247592,"results":"183","hashOfConfig":"95"},{"size":152,"mtime":1616630247594,"results":"184","hashOfConfig":"95"},{"size":152,"mtime":1616630247597,"results":"185","hashOfConfig":"95"},{"size":234,"mtime":1616630247596,"results":"186","hashOfConfig":"95"},{"size":241,"mtime":1616630247615,"results":"187","hashOfConfig":"95"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"190"},"127lrwc",{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"190"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"190"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"190"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"190"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"190"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"190"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"211"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"211"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"190"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"190"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"190"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"190"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"190"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"190"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"190"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"190"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"190"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"190"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"190"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"190"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"190"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"190"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"190"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"190"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"190"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"190"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"190"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"267","usedDeprecatedRules":"268"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"271","usedDeprecatedRules":"272"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"190"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"190"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"190"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"190"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"190"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"190"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"190"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"190"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"190"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"190"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"190"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"190"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"190"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"307","messages":"308","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"309","messages":"310","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"311","messages":"312","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"190"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"190"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"190"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"319","messages":"320","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"190"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"190"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"325","messages":"326","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"327","messages":"328","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"190"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"190"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"333","messages":"334","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"335","messages":"336","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"337","messages":"338","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"339","messages":"340","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"341","messages":"342","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"343","messages":"344","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"345","messages":"346","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"347","messages":"348","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"349","messages":"350","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"351","messages":"352","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"353","messages":"354","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"355","messages":"356","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"357","messages":"358","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"359","messages":"360","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"361","messages":"362","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"363","messages":"364","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"365","messages":"366","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"367","messages":"368","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"369","messages":"370","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"371","messages":"372","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"373","messages":"374","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"375","messages":"376","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"377","messages":"378","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"379","messages":"380","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\index.tsx",[],["381","382"],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\home\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\header\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\app\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\nodetypes\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\toolbox\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\data\\WorkspaceDataset.js",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\data\\NodeTypeDataset.js",[],["383","384"],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\data\\UserDataset.js",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\services\\workspaceService.ts",["385","386","387","388","389"],"import {\r\n  Workspace,\r\n  Node,\r\n  Edge,\r\n  Aspects,\r\n  Graph,\r\n  CategoryDescriptor,\r\n  AspectDescriptor,\r\n  Connection,\r\n} from \"../models/workspace\";\r\nimport {\r\n  Diagram,\r\n  DiagramNode,\r\n  DiagramConnector,\r\n  DiagramConnectorType,\r\n  DiagramConnectionType,\r\n  DiagramConnection,\r\n  DIAGRAM_CONNECTOR_TYPE,\r\n  DIAGRAM_CONNECTION_TYPE,\r\n} from \"./../models/diagram\";\r\nimport { AspectRatioSharp } from \"@material-ui/icons\";\r\nimport { brotliDecompress } from \"zlib\";\r\nimport { nodetypeReducer } from \"../redux/store/nodetypes/reducers\";\r\n\r\nexport class WorkspaceService {\r\n  private workspace: Workspace;\r\n  functionalNodeMap: Map<string, Node>;\r\n  productNodeMap: Map<string, Node>;\r\n  functionalEdgeMap: Map<string, Edge>;\r\n  productEdgeMap: Map<string, Edge>;\r\n\r\n  proxyNodeMap: Map<string, Node>;\r\n  proxyEdgeMap: Map<string, Edge>;\r\n\r\n  constructor(workspace: Workspace) {\r\n    this.workspace = workspace;\r\n    this.functionalNodeMap = this.createNodeMap(\"1\", \"1\");\r\n    this.productNodeMap = this.createNodeMap(\"2\", \"1\");\r\n    this.functionalEdgeMap = this.createEdgeMap(\"1\", \"1\");\r\n    this.productEdgeMap = this.createEdgeMap(\"2\", \"1\");\r\n    this.proxyNodeMap = new Map<string, Node>();\r\n    this.proxyEdgeMap = new Map<string, Edge>();\r\n  }\r\n\r\n  createNodeMap(aspect: string, category: string): Map<string, Node> {\r\n    var aspects = this.workspace.aspects.filter(\r\n      (x) => x.aspect === aspect && x.category === category\r\n    );\r\n    if (!aspects && aspects.length <= 0) return new Map<string, Node>();\r\n\r\n    return new Map(\r\n      aspects[0].graph.nodes.map((obj) => [obj.id, obj] as [string, Node])\r\n    );\r\n  }\r\n\r\n  createEdgeMap(aspect: string, category: string): Map<string, Edge> {\r\n    var aspects = this.workspace.aspects.filter(\r\n      (x) => x.aspect === aspect && x.category === category\r\n    );\r\n    if (!aspects && aspects.length <= 0) return new Map<string, Edge>();\r\n\r\n    return new Map(\r\n      aspects[0].graph.edges.map((obj) => [obj.id, obj] as [string, Edge])\r\n    );\r\n  }\r\n\r\n  getProductLabel(nodeId: string): string {\r\n    var actualProductnode = this.productNodeMap.get(nodeId);\r\n    if (actualProductnode) {\r\n      return actualProductnode.label;\r\n    }\r\n\r\n    const actualNode = this.functionalNodeMap.get(nodeId);\r\n\r\n    if (!actualNode) return \"\";\r\n\r\n    // TODO: Use Typeregister\r\n    if (actualNode.type === \"imft:Reservoir\") return \"Reservoir\";\r\n  }\r\n\r\n  getRootEdges(nodeId: string): Edge[] {\r\n    var aspects = this.workspace.aspects.filter(\r\n      (x) => x.aspect === \"1\" && x.category === \"1\"\r\n    );\r\n    if (!aspects && aspects.length <= 0) return [];\r\n\r\n    const edges = aspects[0].graph.edges.filter(\r\n      (x) => x.to === nodeId && x.type === \"imfo:partOf\"\r\n    );\r\n    let filteredEdges: Edge[] = [];\r\n\r\n    // TODO: Use Typeregister\r\n    edges.forEach((edge) => {\r\n      const node = this.functionalNodeMap.get(edge.from);\r\n      if (\r\n        node &&\r\n        !node.type.toLowerCase().includes(\"input\") &&\r\n        !node.type.toLowerCase().includes(\"output\")\r\n      ) {\r\n        filteredEdges.push(edge);\r\n      }\r\n    });\r\n    return filteredEdges;\r\n  }\r\n\r\n  getConnectorEdges(nodeId: string): Edge[] {\r\n    var aspects = this.workspace.aspects.filter(\r\n      (x) => x.aspect === \"1\" && x.category === \"1\"\r\n    );\r\n    if (!aspects && aspects.length <= 0) return [];\r\n\r\n    const edges = aspects[0].graph.edges.filter(\r\n      (x) => x.to === nodeId && x.type === \"imfo:partOf\"\r\n    );\r\n    let filteredEdges: Edge[] = [];\r\n\r\n    // TODO: Use Typeregister\r\n    edges.forEach((edge) => {\r\n      const node = this.functionalNodeMap.get(edge.from);\r\n      if (\r\n        node &&\r\n        (node.type.toLowerCase().includes(\"input\") ||\r\n          node.type.toLowerCase().includes(\"output\"))\r\n      ) {\r\n        filteredEdges.push(edge);\r\n      }\r\n    });\r\n    return filteredEdges;\r\n  }\r\n\r\n  getFunctionalAspect(): Aspects[] {\r\n    return this.workspace.aspects.filter((x) => x.aspect === \"1\");\r\n  }\r\n\r\n  getProductAspect(): Aspects[] {\r\n    return this.workspace.aspects.filter((x) => x.aspect === \"2\");\r\n  }\r\n\r\n  getAreaAspect(): Aspects[] {\r\n    return this.workspace.aspects.filter((x) => x.aspect === \"3\");\r\n  }\r\n\r\n  getFunctionalAspectCategories(): CategoryDescriptor[] {\r\n    let functionalCategories: CategoryDescriptor[] = [];\r\n    const fAspect = this.getFunctionalAspect();\r\n    fAspect.forEach((aspect) => {\r\n      functionalCategories.push({\r\n        id: aspect.category,\r\n        name: aspect.descriptor.name,\r\n        description: aspect.descriptor.description,\r\n      });\r\n    });\r\n    return functionalCategories;\r\n  }\r\n\r\n  getProductAspectCategories(): CategoryDescriptor[] {\r\n    let productCategories: CategoryDescriptor[] = [];\r\n    const pAspect = this.getProductAspect();\r\n    pAspect.forEach((aspect) => {\r\n      productCategories.push({\r\n        id: aspect.category,\r\n        name: aspect.descriptor.name,\r\n        description: aspect.descriptor.description,\r\n      });\r\n    });\r\n    return productCategories;\r\n  }\r\n\r\n  getAreaAspectCategories(): CategoryDescriptor[] {\r\n    let areaCategories: CategoryDescriptor[] = [];\r\n    const aAspect = this.getAreaAspect();\r\n    aAspect.forEach((aspect) => {\r\n      areaCategories.push({\r\n        id: aspect.category,\r\n        name: aspect.descriptor.name,\r\n        description: aspect.descriptor.description,\r\n      });\r\n    });\r\n    if (!areaCategories || areaCategories.length <= 0) {\r\n      areaCategories.push({\r\n        id: null,\r\n        name: \"default\",\r\n        description: \"\",\r\n      });\r\n    }\r\n    return areaCategories;\r\n  }\r\n\r\n  // getNodesConnectedToRoot(aspectId: string): Node[] {\r\n  //     const aspectEdges: Edge[] = [];\r\n  //     const aspectNodes: Node[] = [];\r\n  //     const chosenAspect = this.workspace.aspects\r\n  // \t.filter(x => x.aspect === aspectId);\r\n\r\n  // \tchosenAspect.forEach(aspect => {\r\n  // \t\tif(aspect.graph.edges.filter(e => e.to === 'root' && e.type === 'imfo:partOf')){\r\n  // \t\t\taspectEdges.push({\r\n  // \t\t\t\tid: e.id;\r\n  // \t\t\t});\r\n  // \t\t}\r\n  // \t})\r\n\r\n  getConnectionEdges(nodeId: string): Connection[] {\r\n    var aspects = this.workspace.aspects.filter(\r\n      (x) => x.aspect === \"1\" && x.category === \"1\"\r\n    );\r\n\r\n    if (!aspects && aspects.length <= 0) return [];\r\n\r\n    const edges = aspects[0].graph.edges.filter(\r\n      (x) => x.to === nodeId && x.type !== \"imfo:partOf\"\r\n    );\r\n    let filteredConnections: Connection[] = [];\r\n\r\n    // TODO: Use Typeregister\r\n    edges.forEach((edge) => {\r\n      if (edge) {\r\n        var parent = aspects[0].graph.edges.filter(\r\n          (x) => x.from === edge.from && x.type === \"imfo:partOf\"\r\n        );\r\n\r\n        if (parent && parent.length > 0) {\r\n          filteredConnections.push({\r\n            id: edge.id,\r\n            type: edge.type,\r\n            from: parent[0].to,\r\n            to: edge.to,\r\n            connector: parent[0].id,\r\n          });\r\n        }\r\n      }\r\n    });\r\n\r\n    return filteredConnections;\r\n  }\r\n\r\n  getDiagram(nodeId: string): Diagram {\r\n    var aspects = this.workspace.aspects.filter(\r\n      (x) => x.aspect === \"1\" && x.category === \"1\"\r\n    );\r\n\r\n    if (!aspects && aspects.length <= 0) return null;\r\n\r\n    var diagram = new Diagram(\r\n      nodeId,\r\n      this.productNodeMap.get(nodeId)?.label ??\r\n        this.functionalNodeMap.get(nodeId)?.label ??\r\n        this.workspace.root.title\r\n    );\r\n    const nodeEdges = aspects[0].graph.edges.filter(\r\n      (x) =>\r\n        x.to === nodeId &&\r\n        x.type === \"imfo:partOf\" &&\r\n        !this.functionalNodeMap\r\n          .get(x.from)\r\n          .type.toLowerCase()\r\n          .includes(\"input\") &&\r\n        !this.functionalNodeMap\r\n          .get(x.from)\r\n          .type.toLowerCase()\r\n          .includes(\"output\")\r\n    );\r\n\r\n    diagram.nodes = nodeEdges.map((x) => {\r\n      const node = this.functionalNodeMap.get(x.from);\r\n      const label = this.productNodeMap.get(node.id)?.label ?? node.type;\r\n      const diagramNode = new DiagramNode(node.id, label);\r\n      diagramNode.connectors = this.getConnectors(node.id, aspects[0]);\r\n\r\n      diagram.connections = diagram.connections.concat(\r\n        this.getConnections(node.id, aspects[0], diagramNode.connectors)\r\n      );\r\n\r\n      return diagramNode;\r\n    });\r\n    return diagram;\r\n  }\r\n\r\n  getConnectors(nodeId: string, aspects: Aspects): DiagramConnector[] {\r\n    if (\r\n      !aspects &&\r\n      !aspects.graph &&\r\n      !aspects.graph.edges &&\r\n      aspects.graph.edges.length <= 0\r\n    )\r\n      return [];\r\n\r\n    const connectors = aspects.graph.edges\r\n      .filter(\r\n        (x) =>\r\n          x.to === nodeId &&\r\n          x.type === \"imfo:partOf\" &&\r\n          (this.functionalNodeMap\r\n            .get(x.from)\r\n            .type.toLowerCase()\r\n            .includes(\"input\") ||\r\n            this.functionalNodeMap\r\n              .get(x.from)\r\n              .type.toLowerCase()\r\n              .includes(\"output\") ||\r\n            this.functionalNodeMap\r\n              .get(x.from)\r\n              .type.toLowerCase()\r\n              .includes(\"supply\"))\r\n      )\r\n      .map((x) => {\r\n        const diagramType = this.functionalNodeMap\r\n          .get(x.from)\r\n          .type.toLowerCase()\r\n          .includes(\"input\")\r\n          ? (DIAGRAM_CONNECTOR_TYPE.TARGET as DiagramConnectorType)\r\n          : (DIAGRAM_CONNECTOR_TYPE.SOURCE as DiagramConnectorType);\r\n        const label = this.functionalNodeMap.get(x.from)?.type ?? x.type;\r\n        return new DiagramConnector(x.id, label, diagramType);\r\n      });\r\n    return connectors;\r\n  }\r\n\r\n  getConnections(\r\n    nodeId: string,\r\n    aspects: Aspects,\r\n    connectors: DiagramConnector[]\r\n  ): DiagramConnection[] {\r\n    if (\r\n      !aspects &&\r\n      !aspects.graph &&\r\n      !aspects.graph.edges &&\r\n      aspects.graph.edges.length <= 0\r\n    )\r\n      return [];\r\n\r\n    return aspects.graph.edges\r\n      .filter(\r\n        (x) =>\r\n          x.to === nodeId &&\r\n          Object.values(DIAGRAM_CONNECTION_TYPE).includes(x.type)\r\n      )\r\n      .map((x) => {\r\n        const sourceParentEdge = aspects.graph.edges.filter(\r\n          (e) => e.from === \"n2\" && e.type === \"imfo:partOf\"\r\n        )[0];\r\n        const targetConnector = connectors.filter(\r\n          (x) => x.type === DIAGRAM_CONNECTOR_TYPE.TARGET\r\n        )[0];\r\n        // TODO: This values must be dynamic\r\n        return new DiagramConnection(\r\n          x.id,\r\n          x.type,\r\n          sourceParentEdge.to,\r\n          \"e2\",\r\n          \"n4\",\r\n          targetConnector.id,\r\n          x.type as DiagramConnectionType\r\n        );\r\n      });\r\n  }\r\n\r\n  guid(): string {\r\n    function _p8(s: boolean) {\r\n      var p = (Math.random().toString(16) + \"000000000\").substr(2, 8);\r\n      return s ? \"-\" + p.substr(0, 4) + \"-\" + p.substr(4, 4) : p;\r\n    }\r\n    return _p8(false) + _p8(true) + _p8(true) + _p8(false);\r\n  }\r\n\r\n  getProxyNodes(aspect: Aspects) {\r\n    if (\r\n      !aspect &&\r\n      !aspect.graph &&\r\n      !aspect.graph.edges &&\r\n      aspect.graph.edges.length <= 0\r\n    )\r\n      return;\r\n\r\n    aspect.graph.nodes\r\n      .filter(\r\n        (x) =>\r\n          !x.type.toLowerCase().includes(\"input\") &&\r\n          !x.type.toLowerCase().includes(\"output\") &&\r\n          !x.type.toLowerCase().includes(\"pipeline\")\r\n      )\r\n      .forEach((n) => {\r\n        const sourceNodeId = this.guid();\r\n        const targetNodeId = this.guid();\r\n\r\n        aspect.graph.nodes.push({\r\n          id: sourceNodeId,\r\n          type: \"imfo:SupplyOutput\",\r\n          label: \"Supply output\",\r\n        });\r\n        aspect.graph.nodes.push({\r\n          id: targetNodeId,\r\n          type: \"imfo:SupplyInput\",\r\n          label: \"Supply input\",\r\n        });\r\n\r\n        aspect.graph.edges.push({\r\n          id: this.guid(),\r\n          type: \"imfo:partOf\",\r\n          from: sourceNodeId,\r\n          to: n.id,\r\n        });\r\n        aspect.graph.edges.push({\r\n          id: this.guid(),\r\n          type: \"imfo:partOf\",\r\n          from: targetNodeId,\r\n          to: n.id,\r\n        });\r\n      });\r\n  }\r\n}\r\n","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\home\\Home.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\header\\Header.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\app\\App.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\DiagramComponent.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\nodetypes\\NodeTypeComponent.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\nodetypes\\NodeTypeOverview.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\toolbox\\ToolboxComponent.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\TreeviewComponent.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\models\\user\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\services\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\models\\diagram\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\models\\user\\types.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\models\\diagram\\Diagram.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\assets\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\TreeviewBody.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\TreeviewHeader.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\textResources.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\DiagramAddNodes.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\DiagramAddConnections.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\selectorNodes\\defaultSelectors\\DefaultSelectorNode.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\selectorNodes\\connectSelectors\\ConnectSelectorNode.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\selectorNodes\\defaultSelectors\\InputConnect.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\selectorNodes\\defaultSelectors\\OutputConnect.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\selectorNodes\\connectSelectors\\DataConnect.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\DrawMiniMap.tsx",["390"],"import { MiniMap, Node } from \"react-flow-renderer\";\r\n\r\nconst DrawMiniMap = () => {\r\n  let color: string;\r\n\r\n  return (\r\n    <MiniMap\r\n      nodeStrokeColor={(node: Node): string => {\r\n        return node.type === \"input\"\r\n          ? (color = \"#00041d0\")\r\n          : node.type === \"selectorNode\"\r\n          ? (color = \"#ccc\")\r\n          : node.type === \"output\"\r\n          ? (color = \"#ff0072\")\r\n          : (color = \"#eee\");\r\n      }}\r\n      nodeColor={(node: Node): string => {\r\n        return node.type === \"selectorNode\"\r\n          ? (color = \"#ccc\")\r\n          : (color = \"#fff\");\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default DrawMiniMap;\r\n",["391","392"],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\hooks\\useTreeviewChangeHandler.tsx",["393","394","395"],"import { useCallback } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../../store/index\";\r\n\r\nconst useTreeviewChangeHandler = () => {\r\n  // const aspectList = useSelector<RootState>((state) => state.workspace);\r\n\r\n  const test = \"one\";\r\n  console.log(test);\r\n  return test;\r\n};\r\n\r\nexport default useTreeviewChangeHandler;\r\n",["396","397"],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\workspace\\actions.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\workspace\\types.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\nodetypes\\actions.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\nodetypes\\types.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\nodetypes\\reducers.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\workspace\\reducers.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\user\\reducers.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\sagas\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\user\\types.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\sagas\\workspace\\saga.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\sagas\\user\\saga.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\sagas\\nodetype\\saga.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\testing\\getAspect.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\testing\\aspectReducer.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\InspectorComponent.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\styled\\StyledInspectorComponent.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\styled\\StyledToggleButton.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\hooks\\useInspectorChangeHandler.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\styled\\animated\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\styled\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\styled\\animated\\AnimatedToggleButton.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\styled\\animated\\AnimatedMenu.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\FragmentData.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\helpers\\GetContentData.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\helpers\\GetTextResource.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\helpers\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\styled\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\helpers\\GetColor.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\inspector\\actions\\changeInspector.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\FragmentContent.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\aspect\\AspectInfo.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\aspect\\AspectDropdown.tsx",["398"],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\inspector\\reducers\\inspectorReducer.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\inspector\\reducers\\showInspectorReducer.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\footer\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\aspect\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\footer\\Footer.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\InspectorHeader.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\ToggleBox.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\hooks\\useInspectorToggleChangeHandler.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\styled\\FragmentHeader.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\styled\\ToggleInspectorIcon.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\styled\\StyledToggleBox.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\styled\\FragmentHeaderWrapper.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\styled\\StyledInspectorTitle.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\styled\\StyledContainer.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\styled\\FragmentDataWrapper.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\styled\\StyledColumn.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\styled\\StyledParagraph.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\styled\\StyledInput.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\inspector\\actions\\changeToggleInspector.tsx",[],{"ruleId":"399","replacedBy":"400"},{"ruleId":"401","replacedBy":"402"},{"ruleId":"399","replacedBy":"400"},{"ruleId":"401","replacedBy":"402"},{"ruleId":"403","severity":1,"message":"404","line":6,"column":3,"nodeType":"405","messageId":"406","endLine":6,"endColumn":8},{"ruleId":"403","severity":1,"message":"407","line":8,"column":3,"nodeType":"405","messageId":"406","endLine":8,"endColumn":19},{"ruleId":"403","severity":1,"message":"408","line":21,"column":10,"nodeType":"405","messageId":"406","endLine":21,"endColumn":26},{"ruleId":"403","severity":1,"message":"409","line":22,"column":10,"nodeType":"405","messageId":"406","endLine":22,"endColumn":26},{"ruleId":"403","severity":1,"message":"410","line":23,"column":10,"nodeType":"405","messageId":"406","endLine":23,"endColumn":25},{"ruleId":"403","severity":1,"message":"411","line":20,"column":14,"nodeType":"405","messageId":"406","endLine":20,"endColumn":19},{"ruleId":"399","replacedBy":"412"},{"ruleId":"401","replacedBy":"413"},{"ruleId":"403","severity":1,"message":"414","line":1,"column":10,"nodeType":"405","messageId":"406","endLine":1,"endColumn":21},{"ruleId":"403","severity":1,"message":"415","line":2,"column":10,"nodeType":"405","messageId":"406","endLine":2,"endColumn":21},{"ruleId":"403","severity":1,"message":"416","line":3,"column":10,"nodeType":"405","messageId":"406","endLine":3,"endColumn":19},{"ruleId":"399","replacedBy":"417"},{"ruleId":"401","replacedBy":"418"},{"ruleId":"403","severity":1,"message":"419","line":16,"column":11,"nodeType":"405","messageId":"406","endLine":16,"endColumn":16},"no-native-reassign",["420"],"no-negated-in-lhs",["421"],"@typescript-eslint/no-unused-vars","'Graph' is defined but never used.","Identifier","unusedVar","'AspectDescriptor' is defined but never used.","'AspectRatioSharp' is defined but never used.","'brotliDecompress' is defined but never used.","'nodetypeReducer' is defined but never used.","'color' is assigned a value but never used.",["420"],["421"],"'useCallback' is defined but never used.","'useSelector' is defined but never used.","'RootState' is defined but never used.",["420"],["421"],"'value' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]
=======
[{"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\index.tsx":"1","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\index.ts":"2","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\home\\index.ts":"3","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\header\\index.ts":"4","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\app\\index.ts":"5","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\nodetypes\\index.ts":"6","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\index.ts":"7","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\toolbox\\index.ts":"8","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\index.ts":"9","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\data\\WorkspaceDataset.js":"10","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\data\\NodeTypeDataset.js":"11","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\data\\UserDataset.js":"12","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\services\\workspaceService.ts":"13","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\home\\Home.tsx":"14","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\header\\Header.tsx":"15","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\app\\App.tsx":"16","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\DiagramComponent.tsx":"17","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\nodetypes\\NodeTypeComponent.tsx":"18","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\nodetypes\\NodeTypeOverview.tsx":"19","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\toolbox\\ToolboxComponent.tsx":"20","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\TreeviewComponent.tsx":"21","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\models\\user\\index.ts":"22","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\services\\index.ts":"23","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\models\\diagram\\index.ts":"24","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\models\\user\\types.ts":"25","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\models\\diagram\\Diagram.ts":"26","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\assets\\index.ts":"27","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\TreeviewBody.tsx":"28","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\TreeviewHeader.tsx":"29","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\textResources.tsx":"30","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\DiagramAddNodes.tsx":"31","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\DiagramAddConnections.tsx":"32","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\selectorNodes\\defaultSelectors\\DefaultSelectorNode.tsx":"33","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\selectorNodes\\connectSelectors\\ConnectSelectorNode.tsx":"34","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\selectorNodes\\defaultSelectors\\InputConnect.tsx":"35","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\selectorNodes\\defaultSelectors\\OutputConnect.tsx":"36","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\selectorNodes\\connectSelectors\\DataConnect.tsx":"37","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\DrawMiniMap.tsx":"38","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\hooks\\useTreeviewChangeHandler.tsx":"39","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\workspace\\actions.ts":"40","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\workspace\\types.ts":"41","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\nodetypes\\actions.ts":"42","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\nodetypes\\types.ts":"43","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\index.ts":"44","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\nodetypes\\reducers.ts":"45","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\workspace\\reducers.ts":"46","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\user\\reducers.ts":"47","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\sagas\\index.ts":"48","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\user\\types.ts":"49","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\sagas\\workspace\\saga.ts":"50","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\sagas\\user\\saga.ts":"51","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\sagas\\nodetype\\saga.ts":"52","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\testing\\getAspect.tsx":"53","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\testing\\aspectReducer.tsx":"54","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\index.ts":"55","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\InspectorComponent.tsx":"56","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\InspectorContent.tsx":"57","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\styled\\StyledInspectorComponent.tsx":"58","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\styled\\StyledToggleButton.tsx":"59","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\styled\\StyledHeader.ts":"60","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\inspector\\changeInspector.tsx":"61","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\inspector\\inspectorReducer.tsx":"62","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\hooks\\useInspectorChangeHandler.tsx":"63","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\styled\\animated\\index.ts":"64","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\styled\\index.ts":"65","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\styled\\animated\\AnimatedToggleButton.tsx":"66","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\styled\\animated\\AnimatedMenu.tsx":"67","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\index.ts":"68","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\FragmentData.tsx":"69","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\FragmentContent.tsx":"70","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\styled\\index.ts":"71","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\helpers\\index.ts":"72","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\styled\\StyledInspectorContent.tsx":"73","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\helpers\\GetTextResource.tsx":"74","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\helpers\\GetColor.tsx":"75","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\helpers\\GetContentData.tsx":"76","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\aspect\\AspectDropdown.tsx":"77","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\aspect\\AspectInfo.tsx":"78","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\aspect\\index.ts":"79"},{"size":511,"mtime":1615884814509,"results":"80","hashOfConfig":"81"},{"size":367,"mtime":1616076248053,"results":"82","hashOfConfig":"81"},{"size":58,"mtime":1615384119007,"results":"83","hashOfConfig":"81"},{"size":63,"mtime":1615384119006,"results":"84","hashOfConfig":"81"},{"size":56,"mtime":1615884814467,"results":"85","hashOfConfig":"81"},{"size":131,"mtime":1615384119010,"results":"86","hashOfConfig":"81"},{"size":215,"mtime":1615884814472,"results":"87","hashOfConfig":"81"},{"size":73,"mtime":1615384119013,"results":"88","hashOfConfig":"81"},{"size":329,"mtime":1616076038956,"results":"89","hashOfConfig":"81"},{"size":7917,"mtime":1615884814509,"results":"90","hashOfConfig":"81"},{"size":330,"mtime":1615884814507,"results":"91","hashOfConfig":"81"},{"size":723,"mtime":1615884814508,"results":"92","hashOfConfig":"81"},{"size":11954,"mtime":1615884814523,"results":"93","hashOfConfig":"81"},{"size":2421,"mtime":1615943687003,"results":"94","hashOfConfig":"81"},{"size":1392,"mtime":1615884814493,"results":"95","hashOfConfig":"81"},{"size":333,"mtime":1615943687002,"results":"96","hashOfConfig":"81"},{"size":3247,"mtime":1615884814469,"results":"97","hashOfConfig":"81"},{"size":476,"mtime":1615884814495,"results":"98","hashOfConfig":"81"},{"size":983,"mtime":1615884814496,"results":"99","hashOfConfig":"81"},{"size":354,"mtime":1615884814497,"results":"100","hashOfConfig":"81"},{"size":683,"mtime":1616075917864,"results":"101","hashOfConfig":"81"},{"size":24,"mtime":1615384119031,"results":"102","hashOfConfig":"81"},{"size":56,"mtime":1615884814522,"results":"103","hashOfConfig":"81"},{"size":26,"mtime":1615384119030,"results":"104","hashOfConfig":"81"},{"size":284,"mtime":1615884814511,"results":"105","hashOfConfig":"81"},{"size":2558,"mtime":1615884814510,"results":"106","hashOfConfig":"81"},{"size":210,"mtime":1615943687001,"results":"107","hashOfConfig":"81"},{"size":1209,"mtime":1616076082428,"results":"108","hashOfConfig":"81"},{"size":187,"mtime":1616075917914,"results":"109","hashOfConfig":"81"},{"size":775,"mtime":1616074562591,"results":"110","hashOfConfig":"81"},{"size":572,"mtime":1615884814468,"results":"111","hashOfConfig":"81"},{"size":516,"mtime":1615884814468,"results":"112","hashOfConfig":"81"},{"size":888,"mtime":1615884814479,"results":"113","hashOfConfig":"81"},{"size":528,"mtime":1615884814474,"results":"114","hashOfConfig":"81"},{"size":646,"mtime":1615884814480,"results":"115","hashOfConfig":"81"},{"size":614,"mtime":1615884814491,"results":"116","hashOfConfig":"81"},{"size":673,"mtime":1615884814478,"results":"117","hashOfConfig":"81"},{"size":648,"mtime":1615884814471,"results":"118","hashOfConfig":"81"},{"size":365,"mtime":1615812248733,"results":"119","hashOfConfig":"81"},{"size":342,"mtime":1615884814519,"results":"120","hashOfConfig":"81"},{"size":716,"mtime":1615884814520,"results":"121","hashOfConfig":"81"},{"size":342,"mtime":1615884814516,"results":"122","hashOfConfig":"81"},{"size":752,"mtime":1615884814517,"results":"123","hashOfConfig":"81"},{"size":1059,"mtime":1615943687019,"results":"124","hashOfConfig":"81"},{"size":746,"mtime":1615884814516,"results":"125","hashOfConfig":"81"},{"size":747,"mtime":1615884814520,"results":"126","hashOfConfig":"81"},{"size":824,"mtime":1615884814518,"results":"127","hashOfConfig":"81"},{"size":578,"mtime":1615884814512,"results":"128","hashOfConfig":"81"},{"size":692,"mtime":1615884814518,"results":"129","hashOfConfig":"81"},{"size":1409,"mtime":1615884814514,"results":"130","hashOfConfig":"81"},{"size":1136,"mtime":1615884814514,"results":"131","hashOfConfig":"81"},{"size":1009,"mtime":1615884814513,"results":"132","hashOfConfig":"81"},{"size":278,"mtime":1615887694260,"results":"133","hashOfConfig":"81"},{"size":494,"mtime":1615930158637,"results":"134","hashOfConfig":"81"},{"size":138,"mtime":1615888115943,"results":"135","hashOfConfig":"81"},{"size":980,"mtime":1615990840614,"results":"136","hashOfConfig":"81"},{"size":345,"mtime":1616074562576,"results":"137","hashOfConfig":"81"},{"size":332,"mtime":1615990840615,"results":"138","hashOfConfig":"81"},{"size":628,"mtime":1616074562588,"results":"139","hashOfConfig":"81"},{"size":641,"mtime":1616074562583,"results":"140","hashOfConfig":"81"},{"size":397,"mtime":1616074562589,"results":"141","hashOfConfig":"81"},{"size":900,"mtime":1616074562590,"results":"142","hashOfConfig":"81"},{"size":613,"mtime":1616074562583,"results":"143","hashOfConfig":"81"},{"size":134,"mtime":1615990840618,"results":"144","hashOfConfig":"81"},{"size":154,"mtime":1615980390335,"results":"145","hashOfConfig":"81"},{"size":417,"mtime":1615990840617,"results":"146","hashOfConfig":"81"},{"size":413,"mtime":1615990840616,"results":"147","hashOfConfig":"81"},{"size":124,"mtime":1616074562583,"results":"148","hashOfConfig":"81"},{"size":193,"mtime":1616074562576,"results":"149","hashOfConfig":"81"},{"size":1495,"mtime":1616074562576,"results":"150","hashOfConfig":"81"},{"size":138,"mtime":1616074562583,"results":"151","hashOfConfig":"81"},{"size":179,"mtime":1616074562583,"results":"152","hashOfConfig":"81"},{"size":434,"mtime":1616074562583,"results":"153","hashOfConfig":"81"},{"size":477,"mtime":1616074562583,"results":"154","hashOfConfig":"81"},{"size":297,"mtime":1616074562582,"results":"155","hashOfConfig":"81"},{"size":2988,"mtime":1616074562583,"results":"156","hashOfConfig":"81"},{"size":1391,"mtime":1616075774212,"results":"157","hashOfConfig":"81"},{"size":516,"mtime":1616075790435,"results":"158","hashOfConfig":"81"},{"size":118,"mtime":1616075880021,"results":"159","hashOfConfig":"81"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},"127lrwc",{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"162"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"162"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"162"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243","usedDeprecatedRules":"244"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"311","messages":"312","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"321","usedDeprecatedRules":"162"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\index.tsx",[],["326","327"],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\home\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\header\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\app\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\nodetypes\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\toolbox\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\data\\WorkspaceDataset.js",[],["328","329"],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\data\\NodeTypeDataset.js",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\data\\UserDataset.js",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\services\\workspaceService.ts",["330","331","332","333","334"],"import {\r\n  Workspace,\r\n  Node,\r\n  Edge,\r\n  Aspects,\r\n  Graph,\r\n  CategoryDescriptor,\r\n  AspectDescriptor,\r\n  Connection,\r\n} from \"../models/workspace\";\r\nimport {\r\n  Diagram,\r\n  DiagramNode,\r\n  DiagramConnector,\r\n  DiagramConnectorType,\r\n  DiagramConnectionType,\r\n  DiagramConnection,\r\n  DIAGRAM_CONNECTOR_TYPE,\r\n  DIAGRAM_CONNECTION_TYPE,\r\n} from \"./../models/diagram\";\r\nimport { AspectRatioSharp } from \"@material-ui/icons\";\r\nimport { brotliDecompress } from \"zlib\";\r\nimport { nodetypeReducer } from \"../redux/store/nodetypes/reducers\";\r\n\r\nexport class WorkspaceService {\r\n  private workspace: Workspace;\r\n  functionalNodeMap: Map<string, Node>;\r\n  productNodeMap: Map<string, Node>;\r\n  functionalEdgeMap: Map<string, Edge>;\r\n  productEdgeMap: Map<string, Edge>;\r\n\r\n  proxyNodeMap: Map<string, Node>;\r\n  proxyEdgeMap: Map<string, Edge>;\r\n\r\n  constructor(workspace: Workspace) {\r\n    this.workspace = workspace;\r\n    this.functionalNodeMap = this.createNodeMap(\"1\", \"1\");\r\n    this.productNodeMap = this.createNodeMap(\"2\", \"1\");\r\n    this.functionalEdgeMap = this.createEdgeMap(\"1\", \"1\");\r\n    this.productEdgeMap = this.createEdgeMap(\"2\", \"1\");\r\n    this.proxyNodeMap = new Map<string, Node>();\r\n    this.proxyEdgeMap = new Map<string, Edge>();\r\n  }\r\n\r\n  createNodeMap(aspect: string, category: string): Map<string, Node> {\r\n    var aspects = this.workspace.aspects.filter(\r\n      (x) => x.aspect === aspect && x.category === category\r\n    );\r\n    if (!aspects && aspects.length <= 0) return new Map<string, Node>();\r\n\r\n    return new Map(\r\n      aspects[0].graph.nodes.map((obj) => [obj.id, obj] as [string, Node])\r\n    );\r\n  }\r\n\r\n  createEdgeMap(aspect: string, category: string): Map<string, Edge> {\r\n    var aspects = this.workspace.aspects.filter(\r\n      (x) => x.aspect === aspect && x.category === category\r\n    );\r\n    if (!aspects && aspects.length <= 0) return new Map<string, Edge>();\r\n\r\n    return new Map(\r\n      aspects[0].graph.edges.map((obj) => [obj.id, obj] as [string, Edge])\r\n    );\r\n  }\r\n\r\n  getProductLabel(nodeId: string): string {\r\n    var actualProductnode = this.productNodeMap.get(nodeId);\r\n    if (actualProductnode) {\r\n      return actualProductnode.label;\r\n    }\r\n\r\n    const actualNode = this.functionalNodeMap.get(nodeId);\r\n\r\n    if (!actualNode) return \"\";\r\n\r\n    // TODO: Use Typeregister\r\n    if (actualNode.type === \"imft:Reservoir\") return \"Reservoir\";\r\n  }\r\n\r\n  getRootEdges(nodeId: string): Edge[] {\r\n    var aspects = this.workspace.aspects.filter(\r\n      (x) => x.aspect === \"1\" && x.category === \"1\"\r\n    );\r\n    if (!aspects && aspects.length <= 0) return [];\r\n\r\n    const edges = aspects[0].graph.edges.filter(\r\n      (x) => x.to === nodeId && x.type === \"imfo:partOf\"\r\n    );\r\n    let filteredEdges: Edge[] = [];\r\n\r\n    // TODO: Use Typeregister\r\n    edges.forEach((edge) => {\r\n      const node = this.functionalNodeMap.get(edge.from);\r\n      if (\r\n        node &&\r\n        !node.type.toLowerCase().includes(\"input\") &&\r\n        !node.type.toLowerCase().includes(\"output\")\r\n      ) {\r\n        filteredEdges.push(edge);\r\n      }\r\n    });\r\n    return filteredEdges;\r\n  }\r\n\r\n  getConnectorEdges(nodeId: string): Edge[] {\r\n    var aspects = this.workspace.aspects.filter(\r\n      (x) => x.aspect === \"1\" && x.category === \"1\"\r\n    );\r\n    if (!aspects && aspects.length <= 0) return [];\r\n\r\n    const edges = aspects[0].graph.edges.filter(\r\n      (x) => x.to === nodeId && x.type === \"imfo:partOf\"\r\n    );\r\n    let filteredEdges: Edge[] = [];\r\n\r\n    // TODO: Use Typeregister\r\n    edges.forEach((edge) => {\r\n      const node = this.functionalNodeMap.get(edge.from);\r\n      if (\r\n        node &&\r\n        (node.type.toLowerCase().includes(\"input\") ||\r\n          node.type.toLowerCase().includes(\"output\"))\r\n      ) {\r\n        filteredEdges.push(edge);\r\n      }\r\n    });\r\n    return filteredEdges;\r\n  }\r\n\r\n  getFunctionalAspect(): Aspects[] {\r\n    return this.workspace.aspects.filter((x) => x.aspect === \"1\");\r\n  }\r\n\r\n  getProductAspect(): Aspects[] {\r\n    return this.workspace.aspects.filter((x) => x.aspect === \"2\");\r\n  }\r\n\r\n  getAreaAspect(): Aspects[] {\r\n    return this.workspace.aspects.filter((x) => x.aspect === \"3\");\r\n  }\r\n\r\n  getFunctionalAspectCategories(): CategoryDescriptor[] {\r\n    let functionalCategories: CategoryDescriptor[] = [];\r\n    const fAspect = this.getFunctionalAspect();\r\n    fAspect.forEach((aspect) => {\r\n      functionalCategories.push({\r\n        id: aspect.category,\r\n        name: aspect.descriptor.name,\r\n        description: aspect.descriptor.description,\r\n      });\r\n    });\r\n    return functionalCategories;\r\n  }\r\n\r\n  getProductAspectCategories(): CategoryDescriptor[] {\r\n    let productCategories: CategoryDescriptor[] = [];\r\n    const pAspect = this.getProductAspect();\r\n    pAspect.forEach((aspect) => {\r\n      productCategories.push({\r\n        id: aspect.category,\r\n        name: aspect.descriptor.name,\r\n        description: aspect.descriptor.description,\r\n      });\r\n    });\r\n    return productCategories;\r\n  }\r\n\r\n  getAreaAspectCategories(): CategoryDescriptor[] {\r\n    let areaCategories: CategoryDescriptor[] = [];\r\n    const aAspect = this.getAreaAspect();\r\n    aAspect.forEach((aspect) => {\r\n      areaCategories.push({\r\n        id: aspect.category,\r\n        name: aspect.descriptor.name,\r\n        description: aspect.descriptor.description,\r\n      });\r\n    });\r\n    if (!areaCategories || areaCategories.length <= 0) {\r\n      areaCategories.push({\r\n        id: null,\r\n        name: \"default\",\r\n        description: \"\",\r\n      });\r\n    }\r\n    return areaCategories;\r\n  }\r\n\r\n  // getNodesConnectedToRoot(aspectId: string): Node[] {\r\n  //     const aspectEdges: Edge[] = [];\r\n  //     const aspectNodes: Node[] = [];\r\n  //     const chosenAspect = this.workspace.aspects\r\n  // \t.filter(x => x.aspect === aspectId);\r\n\r\n  // \tchosenAspect.forEach(aspect => {\r\n  // \t\tif(aspect.graph.edges.filter(e => e.to === 'root' && e.type === 'imfo:partOf')){\r\n  // \t\t\taspectEdges.push({\r\n  // \t\t\t\tid: e.id;\r\n  // \t\t\t});\r\n  // \t\t}\r\n  // \t})\r\n\r\n  getConnectionEdges(nodeId: string): Connection[] {\r\n    var aspects = this.workspace.aspects.filter(\r\n      (x) => x.aspect === \"1\" && x.category === \"1\"\r\n    );\r\n\r\n    if (!aspects && aspects.length <= 0) return [];\r\n\r\n    const edges = aspects[0].graph.edges.filter(\r\n      (x) => x.to === nodeId && x.type !== \"imfo:partOf\"\r\n    );\r\n    let filteredConnections: Connection[] = [];\r\n\r\n    // TODO: Use Typeregister\r\n    edges.forEach((edge) => {\r\n      if (edge) {\r\n        var parent = aspects[0].graph.edges.filter(\r\n          (x) => x.from === edge.from && x.type === \"imfo:partOf\"\r\n        );\r\n\r\n        if (parent && parent.length > 0) {\r\n          filteredConnections.push({\r\n            id: edge.id,\r\n            type: edge.type,\r\n            from: parent[0].to,\r\n            to: edge.to,\r\n            connector: parent[0].id,\r\n          });\r\n        }\r\n      }\r\n    });\r\n\r\n    return filteredConnections;\r\n  }\r\n\r\n  getDiagram(nodeId: string): Diagram {\r\n    var aspects = this.workspace.aspects.filter(\r\n      (x) => x.aspect === \"1\" && x.category === \"1\"\r\n    );\r\n\r\n    if (!aspects && aspects.length <= 0) return null;\r\n\r\n    var diagram = new Diagram(\r\n      nodeId,\r\n      this.productNodeMap.get(nodeId)?.label ??\r\n        this.functionalNodeMap.get(nodeId)?.label ??\r\n        this.workspace.root.title\r\n    );\r\n    const nodeEdges = aspects[0].graph.edges.filter(\r\n      (x) =>\r\n        x.to === nodeId &&\r\n        x.type === \"imfo:partOf\" &&\r\n        !this.functionalNodeMap\r\n          .get(x.from)\r\n          .type.toLowerCase()\r\n          .includes(\"input\") &&\r\n        !this.functionalNodeMap\r\n          .get(x.from)\r\n          .type.toLowerCase()\r\n          .includes(\"output\")\r\n    );\r\n\r\n    diagram.nodes = nodeEdges.map((x) => {\r\n      const node = this.functionalNodeMap.get(x.from);\r\n      const label = this.productNodeMap.get(node.id)?.label ?? node.type;\r\n      const diagramNode = new DiagramNode(node.id, label);\r\n      diagramNode.connectors = this.getConnectors(node.id, aspects[0]);\r\n\r\n      diagram.connections = diagram.connections.concat(\r\n        this.getConnections(node.id, aspects[0], diagramNode.connectors)\r\n      );\r\n\r\n      return diagramNode;\r\n    });\r\n    return diagram;\r\n  }\r\n\r\n  getConnectors(nodeId: string, aspects: Aspects): DiagramConnector[] {\r\n    if (\r\n      !aspects &&\r\n      !aspects.graph &&\r\n      !aspects.graph.edges &&\r\n      aspects.graph.edges.length <= 0\r\n    )\r\n      return [];\r\n\r\n    const connectors = aspects.graph.edges\r\n      .filter(\r\n        (x) =>\r\n          x.to === nodeId &&\r\n          x.type === \"imfo:partOf\" &&\r\n          (this.functionalNodeMap\r\n            .get(x.from)\r\n            .type.toLowerCase()\r\n            .includes(\"input\") ||\r\n            this.functionalNodeMap\r\n              .get(x.from)\r\n              .type.toLowerCase()\r\n              .includes(\"output\") ||\r\n            this.functionalNodeMap\r\n              .get(x.from)\r\n              .type.toLowerCase()\r\n              .includes(\"supply\"))\r\n      )\r\n      .map((x) => {\r\n        const diagramType = this.functionalNodeMap\r\n          .get(x.from)\r\n          .type.toLowerCase()\r\n          .includes(\"input\")\r\n          ? (DIAGRAM_CONNECTOR_TYPE.TARGET as DiagramConnectorType)\r\n          : (DIAGRAM_CONNECTOR_TYPE.SOURCE as DiagramConnectorType);\r\n        const label = this.functionalNodeMap.get(x.from)?.type ?? x.type;\r\n        return new DiagramConnector(x.id, label, diagramType);\r\n      });\r\n    return connectors;\r\n  }\r\n\r\n  getConnections(\r\n    nodeId: string,\r\n    aspects: Aspects,\r\n    connectors: DiagramConnector[]\r\n  ): DiagramConnection[] {\r\n    if (\r\n      !aspects &&\r\n      !aspects.graph &&\r\n      !aspects.graph.edges &&\r\n      aspects.graph.edges.length <= 0\r\n    )\r\n      return [];\r\n\r\n    return aspects.graph.edges\r\n      .filter(\r\n        (x) =>\r\n          x.to === nodeId &&\r\n          Object.values(DIAGRAM_CONNECTION_TYPE).includes(x.type)\r\n      )\r\n      .map((x) => {\r\n        const sourceParentEdge = aspects.graph.edges.filter(\r\n          (e) => e.from === \"n2\" && e.type === \"imfo:partOf\"\r\n        )[0];\r\n        const targetConnector = connectors.filter(\r\n          (x) => x.type === DIAGRAM_CONNECTOR_TYPE.TARGET\r\n        )[0];\r\n        // TODO: This values must be dynamic\r\n        return new DiagramConnection(\r\n          x.id,\r\n          x.type,\r\n          sourceParentEdge.to,\r\n          \"e2\",\r\n          \"n4\",\r\n          targetConnector.id,\r\n          x.type as DiagramConnectionType\r\n        );\r\n      });\r\n  }\r\n\r\n  guid(): string {\r\n    function _p8(s: boolean) {\r\n      var p = (Math.random().toString(16) + \"000000000\").substr(2, 8);\r\n      return s ? \"-\" + p.substr(0, 4) + \"-\" + p.substr(4, 4) : p;\r\n    }\r\n    return _p8(false) + _p8(true) + _p8(true) + _p8(false);\r\n  }\r\n\r\n  getProxyNodes(aspect: Aspects) {\r\n    if (\r\n      !aspect &&\r\n      !aspect.graph &&\r\n      !aspect.graph.edges &&\r\n      aspect.graph.edges.length <= 0\r\n    )\r\n      return;\r\n\r\n    aspect.graph.nodes\r\n      .filter(\r\n        (x) =>\r\n          !x.type.toLowerCase().includes(\"input\") &&\r\n          !x.type.toLowerCase().includes(\"output\") &&\r\n          !x.type.toLowerCase().includes(\"pipeline\")\r\n      )\r\n      .forEach((n) => {\r\n        const sourceNodeId = this.guid();\r\n        const targetNodeId = this.guid();\r\n\r\n        aspect.graph.nodes.push({\r\n          id: sourceNodeId,\r\n          type: \"imfo:SupplyOutput\",\r\n          label: \"Supply output\",\r\n        });\r\n        aspect.graph.nodes.push({\r\n          id: targetNodeId,\r\n          type: \"imfo:SupplyInput\",\r\n          label: \"Supply input\",\r\n        });\r\n\r\n        aspect.graph.edges.push({\r\n          id: this.guid(),\r\n          type: \"imfo:partOf\",\r\n          from: sourceNodeId,\r\n          to: n.id,\r\n        });\r\n        aspect.graph.edges.push({\r\n          id: this.guid(),\r\n          type: \"imfo:partOf\",\r\n          from: targetNodeId,\r\n          to: n.id,\r\n        });\r\n      });\r\n  }\r\n}\r\n","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\home\\Home.tsx",["335"],"import { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useParams } from \"react-router\";\r\nimport { DiagramComponent, TreeviewComponent } from \"..\";\r\nimport { getWorkspace } from \"../../redux/store/workspace/actions\";\r\nimport { WorkspaceState } from \"../../redux/store/workspace/types\";\r\nimport { RootState } from \"./../../redux/store/index\";\r\nimport textResources from \"../../textResources\";\r\nimport { InspectorComponent } from \"../modules/inspectorModule\";\r\n// import { UserState } from \"../../store/user/types\";\r\n// import { SETTING_KEY, SETTING_VALUE } from \"./../../models/user\";\r\n// import { getUser } from \"../../store/user/actions\";\r\n\r\ninterface RouteParams {\r\n  type: string;\r\n}\r\n\r\nconst Home = () => {\r\n  const workspaceState = useSelector<RootState>(\r\n    (state) => state.workspace\r\n  ) as WorkspaceState;\r\n  // const userState = useSelector<RootState>((state) => state.user) as UserState;\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(getWorkspace());\r\n    // dispatch(getUser(\"rl\", \"rl\"));\r\n  }, [dispatch]);\r\n\r\n  const params = useParams<RouteParams>();\r\n  const isOnline =\r\n    workspaceState && workspaceState.workspace && !workspaceState.fetching;\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"explorer_view\">{textResources.Explorer_view}</div>\r\n      <div className=\"middle_content\">\r\n        <div className=\"workspace\">\r\n          {isOnline && (\r\n            <>\r\n              {params.type === \"treeview\" && (\r\n                <TreeviewComponent\r\n                  root={workspaceState.workspace.root}\r\n                  aspects={workspaceState.workspace.aspects}\r\n                  aspectDescriptors={workspaceState.workspace.aspectDescriptors}\r\n                />\r\n              )}\r\n              {params.type === \"diagram\" && (\r\n                <DiagramComponent\r\n                  root={workspaceState.workspace.root}\r\n                  aspects={workspaceState.workspace.aspects}\r\n                  aspectDescriptors={workspaceState.workspace.aspectDescriptors}\r\n                />\r\n              )}\r\n            </>\r\n          )}\r\n        </div>\r\n        {/* <div className=\"inspector\">\r\n          {textResources.Inspector}\r\n          <InspectorComponent />\r\n        </div> */}\r\n      </div>\r\n      <div className=\"library\">{textResources.Library}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\header\\Header.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\app\\App.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\DiagramComponent.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\nodetypes\\NodeTypeComponent.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\nodetypes\\NodeTypeOverview.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\toolbox\\ToolboxComponent.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\TreeviewComponent.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\models\\user\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\services\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\models\\diagram\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\models\\user\\types.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\models\\diagram\\Diagram.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\assets\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\TreeviewBody.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\TreeviewHeader.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\textResources.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\DiagramAddNodes.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\DiagramAddConnections.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\selectorNodes\\defaultSelectors\\DefaultSelectorNode.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\selectorNodes\\connectSelectors\\ConnectSelectorNode.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\selectorNodes\\defaultSelectors\\InputConnect.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\selectorNodes\\defaultSelectors\\OutputConnect.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\selectorNodes\\connectSelectors\\DataConnect.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\DrawMiniMap.tsx",["336"],"import { MiniMap, Node } from \"react-flow-renderer\";\r\n\r\nconst DrawMiniMap = () => {\r\n  let color: string;\r\n\r\n  return (\r\n    <MiniMap\r\n      nodeStrokeColor={(node: Node): string => {\r\n        return node.type === \"input\"\r\n          ? (color = \"#00041d0\")\r\n          : node.type === \"selectorNode\"\r\n          ? (color = \"#ccc\")\r\n          : node.type === \"output\"\r\n          ? (color = \"#ff0072\")\r\n          : (color = \"#eee\");\r\n      }}\r\n      nodeColor={(node: Node): string => {\r\n        return node.type === \"selectorNode\"\r\n          ? (color = \"#ccc\")\r\n          : (color = \"#fff\");\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default DrawMiniMap;\r\n","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\hooks\\useTreeviewChangeHandler.tsx",["337","338","339"],"import { useCallback } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../../store/index\";\r\n\r\nconst useTreeviewChangeHandler = () => {\r\n  // const aspectList = useSelector<RootState>((state) => state.workspace);\r\n\r\n  const test = \"one\";\r\n  console.log(test);\r\n  return test;\r\n};\r\n\r\nexport default useTreeviewChangeHandler;\r\n",["340","341"],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\workspace\\actions.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\workspace\\types.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\nodetypes\\actions.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\nodetypes\\types.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\nodetypes\\reducers.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\workspace\\reducers.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\user\\reducers.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\sagas\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\user\\types.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\sagas\\workspace\\saga.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\sagas\\user\\saga.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\sagas\\nodetype\\saga.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\testing\\getAspect.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\testing\\aspectReducer.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\InspectorComponent.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\InspectorContent.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\styled\\StyledInspectorComponent.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\styled\\StyledToggleButton.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\styled\\StyledHeader.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\inspector\\changeInspector.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\inspector\\inspectorReducer.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\hooks\\useInspectorChangeHandler.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\styled\\animated\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\styled\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\styled\\animated\\AnimatedToggleButton.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\styled\\animated\\AnimatedMenu.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\FragmentData.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\FragmentContent.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\styled\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\helpers\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\styled\\StyledInspectorContent.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\helpers\\GetTextResource.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\helpers\\GetColor.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\helpers\\GetContentData.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\aspect\\AspectDropdown.tsx",["342"],"import { CategoryDescriptor } from \"../../../models/workspace\";\r\nimport \"react-dropdown/style.css\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { getAspect } from \"../../../redux/testing/getAspect\";\r\n\r\ninterface Props {\r\n  id: string;\r\n  functional: CategoryDescriptor[];\r\n  product: CategoryDescriptor[];\r\n  location: CategoryDescriptor[];\r\n}\r\n\r\nconst AspectDropdown = ({ id, functional, product, location }: Props) => {\r\n  const dispatch = useDispatch();\r\n  const handleChange = (e) => {\r\n    const value = e.target.value;\r\n    dispatch(getAspect());\r\n  };\r\n\r\n  return (\r\n    <div className=\"aspect_category\">\r\n      <select onChange={handleChange} className=\"select_category\">\r\n        {id === \"1\"\r\n          ? functional.map((category) => (\r\n              <option key={category.id} value={category.name}>\r\n                {category.name}\r\n              </option>\r\n            ))\r\n          : id === \"2\"\r\n          ? product.map((category) => (\r\n              <option key={category.id} value={category.name}>\r\n                {category.name}\r\n              </option>\r\n            ))\r\n          : id === \"3\"\r\n          ? location.map((category) => (\r\n              <option key={category.id} value={category.name}>\r\n                {category.name}\r\n              </option>\r\n            ))\r\n          : null}\r\n      </select>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AspectDropdown;\r\n","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\aspect\\AspectInfo.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\aspect\\index.ts",[],{"ruleId":"343","replacedBy":"344"},{"ruleId":"345","replacedBy":"346"},{"ruleId":"343","replacedBy":"344"},{"ruleId":"345","replacedBy":"346"},{"ruleId":"347","severity":1,"message":"348","line":6,"column":3,"nodeType":"349","messageId":"350","endLine":6,"endColumn":8},{"ruleId":"347","severity":1,"message":"351","line":8,"column":3,"nodeType":"349","messageId":"350","endLine":8,"endColumn":19},{"ruleId":"347","severity":1,"message":"352","line":21,"column":10,"nodeType":"349","messageId":"350","endLine":21,"endColumn":26},{"ruleId":"347","severity":1,"message":"353","line":22,"column":10,"nodeType":"349","messageId":"350","endLine":22,"endColumn":26},{"ruleId":"347","severity":1,"message":"354","line":23,"column":10,"nodeType":"349","messageId":"350","endLine":23,"endColumn":25},{"ruleId":"347","severity":1,"message":"355","line":9,"column":10,"nodeType":"349","messageId":"350","endLine":9,"endColumn":28},{"ruleId":"347","severity":1,"message":"356","line":20,"column":14,"nodeType":"349","messageId":"350","endLine":20,"endColumn":19},{"ruleId":"347","severity":1,"message":"357","line":1,"column":10,"nodeType":"349","messageId":"350","endLine":1,"endColumn":21},{"ruleId":"347","severity":1,"message":"358","line":2,"column":10,"nodeType":"349","messageId":"350","endLine":2,"endColumn":21},{"ruleId":"347","severity":1,"message":"359","line":3,"column":10,"nodeType":"349","messageId":"350","endLine":3,"endColumn":19},{"ruleId":"343","replacedBy":"360"},{"ruleId":"345","replacedBy":"361"},{"ruleId":"347","severity":1,"message":"362","line":16,"column":11,"nodeType":"349","messageId":"350","endLine":16,"endColumn":16},"no-native-reassign",["363"],"no-negated-in-lhs",["364"],"@typescript-eslint/no-unused-vars","'Graph' is defined but never used.","Identifier","unusedVar","'AspectDescriptor' is defined but never used.","'AspectRatioSharp' is defined but never used.","'brotliDecompress' is defined but never used.","'nodetypeReducer' is defined but never used.","'InspectorComponent' is defined but never used.","'color' is assigned a value but never used.","'useCallback' is defined but never used.","'useSelector' is defined but never used.","'RootState' is defined but never used.",["363"],["364"],"'value' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]
>>>>>>> e3b504c (Delete footer folder)
=======
[{"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\index.tsx":"1","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\index.ts":"2","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\home\\index.ts":"3","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\header\\index.ts":"4","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\app\\index.ts":"5","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\nodetypes\\index.ts":"6","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\index.ts":"7","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\toolbox\\index.ts":"8","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\index.ts":"9","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\data\\WorkspaceDataset.js":"10","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\data\\NodeTypeDataset.js":"11","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\data\\UserDataset.js":"12","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\services\\workspaceService.ts":"13","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\home\\Home.tsx":"14","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\header\\Header.tsx":"15","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\app\\App.tsx":"16","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\DiagramComponent.tsx":"17","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\nodetypes\\NodeTypeComponent.tsx":"18","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\nodetypes\\NodeTypeOverview.tsx":"19","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\toolbox\\ToolboxComponent.tsx":"20","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\TreeviewComponent.tsx":"21","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\models\\user\\index.ts":"22","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\services\\index.ts":"23","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\models\\diagram\\index.ts":"24","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\models\\user\\types.ts":"25","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\models\\diagram\\Diagram.ts":"26","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\assets\\index.ts":"27","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\TreeviewBody.tsx":"28","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\TreeviewHeader.tsx":"29","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\textResources.tsx":"30","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\DiagramAddNodes.tsx":"31","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\DiagramAddConnections.tsx":"32","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\selectorNodes\\defaultSelectors\\DefaultSelectorNode.tsx":"33","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\selectorNodes\\connectSelectors\\ConnectSelectorNode.tsx":"34","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\selectorNodes\\defaultSelectors\\InputConnect.tsx":"35","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\selectorNodes\\defaultSelectors\\OutputConnect.tsx":"36","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\selectorNodes\\connectSelectors\\DataConnect.tsx":"37","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\DrawMiniMap.tsx":"38","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\hooks\\useTreeviewChangeHandler.tsx":"39","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\workspace\\actions.ts":"40","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\workspace\\types.ts":"41","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\nodetypes\\actions.ts":"42","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\nodetypes\\types.ts":"43","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\index.ts":"44","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\nodetypes\\reducers.ts":"45","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\workspace\\reducers.ts":"46","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\user\\reducers.ts":"47","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\sagas\\index.ts":"48","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\user\\types.ts":"49","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\sagas\\workspace\\saga.ts":"50","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\sagas\\user\\saga.ts":"51","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\sagas\\nodetype\\saga.ts":"52","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\testing\\getAspect.tsx":"53","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\testing\\aspectReducer.tsx":"54","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\index.ts":"55","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\InspectorComponent.tsx":"56","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\InspectorContent.tsx":"57","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\styled\\StyledInspectorComponent.tsx":"58","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\styled\\StyledToggleButton.tsx":"59","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\styled\\StyledHeader.ts":"60","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\inspector\\changeInspector.tsx":"61","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\inspector\\inspectorReducer.tsx":"62","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\hooks\\useInspectorChangeHandler.tsx":"63","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\styled\\animated\\index.ts":"64","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\styled\\index.ts":"65","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\styled\\animated\\AnimatedToggleButton.tsx":"66","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\styled\\animated\\AnimatedMenu.tsx":"67","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\index.ts":"68","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\FragmentData.tsx":"69","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\FragmentContent.tsx":"70","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\styled\\index.ts":"71","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\helpers\\index.ts":"72","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\styled\\StyledInspectorContent.tsx":"73","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\helpers\\GetTextResource.tsx":"74","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\helpers\\GetColor.tsx":"75","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\helpers\\GetContentData.tsx":"76","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\aspect\\AspectDropdown.tsx":"77","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\aspect\\AspectInfo.tsx":"78","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\aspect\\index.ts":"79","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\flow\\index.js":"80","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\flow\\Sidebar.js":"81"},{"size":511,"mtime":1615884814509,"results":"82","hashOfConfig":"83"},{"size":367,"mtime":1616076248053,"results":"84","hashOfConfig":"83"},{"size":58,"mtime":1615384119007,"results":"85","hashOfConfig":"83"},{"size":63,"mtime":1615384119006,"results":"86","hashOfConfig":"83"},{"size":56,"mtime":1615884814467,"results":"87","hashOfConfig":"83"},{"size":131,"mtime":1615384119010,"results":"88","hashOfConfig":"83"},{"size":215,"mtime":1615884814472,"results":"89","hashOfConfig":"83"},{"size":73,"mtime":1615384119013,"results":"90","hashOfConfig":"83"},{"size":329,"mtime":1616076038956,"results":"91","hashOfConfig":"83"},{"size":7917,"mtime":1615884814509,"results":"92","hashOfConfig":"83"},{"size":330,"mtime":1615884814507,"results":"93","hashOfConfig":"83"},{"size":723,"mtime":1615884814508,"results":"94","hashOfConfig":"83"},{"size":11954,"mtime":1615884814523,"results":"95","hashOfConfig":"83"},{"size":2421,"mtime":1615943687003,"results":"96","hashOfConfig":"83"},{"size":1392,"mtime":1615884814493,"results":"97","hashOfConfig":"83"},{"size":333,"mtime":1615943687002,"results":"98","hashOfConfig":"83"},{"size":3247,"mtime":1615884814469,"results":"99","hashOfConfig":"83"},{"size":476,"mtime":1615884814495,"results":"100","hashOfConfig":"83"},{"size":983,"mtime":1615884814496,"results":"101","hashOfConfig":"83"},{"size":354,"mtime":1615884814497,"results":"102","hashOfConfig":"83"},{"size":682,"mtime":1616076835139,"results":"103","hashOfConfig":"83"},{"size":24,"mtime":1615384119031,"results":"104","hashOfConfig":"83"},{"size":56,"mtime":1615884814522,"results":"105","hashOfConfig":"83"},{"size":26,"mtime":1615384119030,"results":"106","hashOfConfig":"83"},{"size":284,"mtime":1615884814511,"results":"107","hashOfConfig":"83"},{"size":2558,"mtime":1615884814510,"results":"108","hashOfConfig":"83"},{"size":210,"mtime":1615943687001,"results":"109","hashOfConfig":"83"},{"size":1302,"mtime":1616077645134,"results":"110","hashOfConfig":"83"},{"size":187,"mtime":1616075917914,"results":"111","hashOfConfig":"83"},{"size":775,"mtime":1616074562591,"results":"112","hashOfConfig":"83"},{"size":572,"mtime":1615884814468,"results":"113","hashOfConfig":"83"},{"size":516,"mtime":1615884814468,"results":"114","hashOfConfig":"83"},{"size":888,"mtime":1615884814479,"results":"115","hashOfConfig":"83"},{"size":528,"mtime":1615884814474,"results":"116","hashOfConfig":"83"},{"size":646,"mtime":1615884814480,"results":"117","hashOfConfig":"83"},{"size":614,"mtime":1615884814491,"results":"118","hashOfConfig":"83"},{"size":673,"mtime":1615884814478,"results":"119","hashOfConfig":"83"},{"size":648,"mtime":1615884814471,"results":"120","hashOfConfig":"83"},{"size":365,"mtime":1615812248733,"results":"121","hashOfConfig":"83"},{"size":342,"mtime":1615884814519,"results":"122","hashOfConfig":"83"},{"size":716,"mtime":1615884814520,"results":"123","hashOfConfig":"83"},{"size":342,"mtime":1615884814516,"results":"124","hashOfConfig":"83"},{"size":752,"mtime":1615884814517,"results":"125","hashOfConfig":"83"},{"size":1059,"mtime":1615943687019,"results":"126","hashOfConfig":"83"},{"size":746,"mtime":1615884814516,"results":"127","hashOfConfig":"83"},{"size":747,"mtime":1615884814520,"results":"128","hashOfConfig":"83"},{"size":824,"mtime":1615884814518,"results":"129","hashOfConfig":"83"},{"size":578,"mtime":1615884814512,"results":"130","hashOfConfig":"83"},{"size":692,"mtime":1615884814518,"results":"131","hashOfConfig":"83"},{"size":1409,"mtime":1615884814514,"results":"132","hashOfConfig":"83"},{"size":1136,"mtime":1615884814514,"results":"133","hashOfConfig":"83"},{"size":1009,"mtime":1615884814513,"results":"134","hashOfConfig":"83"},{"size":278,"mtime":1615887694260,"results":"135","hashOfConfig":"83"},{"size":494,"mtime":1615930158637,"results":"136","hashOfConfig":"83"},{"size":138,"mtime":1615888115943,"results":"137","hashOfConfig":"83"},{"size":980,"mtime":1615990840614,"results":"138","hashOfConfig":"83"},{"size":345,"mtime":1616074562576,"results":"139","hashOfConfig":"83"},{"size":332,"mtime":1615990840615,"results":"140","hashOfConfig":"83"},{"size":628,"mtime":1616074562588,"results":"141","hashOfConfig":"83"},{"size":641,"mtime":1616074562583,"results":"142","hashOfConfig":"83"},{"size":397,"mtime":1616074562589,"results":"143","hashOfConfig":"83"},{"size":900,"mtime":1616074562590,"results":"144","hashOfConfig":"83"},{"size":613,"mtime":1616074562583,"results":"145","hashOfConfig":"83"},{"size":134,"mtime":1615990840618,"results":"146","hashOfConfig":"83"},{"size":154,"mtime":1615980390335,"results":"147","hashOfConfig":"83"},{"size":417,"mtime":1615990840617,"results":"148","hashOfConfig":"83"},{"size":413,"mtime":1615990840616,"results":"149","hashOfConfig":"83"},{"size":124,"mtime":1616074562583,"results":"150","hashOfConfig":"83"},{"size":193,"mtime":1616074562576,"results":"151","hashOfConfig":"83"},{"size":1495,"mtime":1616074562576,"results":"152","hashOfConfig":"83"},{"size":138,"mtime":1616074562583,"results":"153","hashOfConfig":"83"},{"size":179,"mtime":1616074562583,"results":"154","hashOfConfig":"83"},{"size":434,"mtime":1616074562583,"results":"155","hashOfConfig":"83"},{"size":477,"mtime":1616074562583,"results":"156","hashOfConfig":"83"},{"size":297,"mtime":1616074562582,"results":"157","hashOfConfig":"83"},{"size":2988,"mtime":1616074562583,"results":"158","hashOfConfig":"83"},{"size":1391,"mtime":1616075774212,"results":"159","hashOfConfig":"83"},{"size":516,"mtime":1616075790435,"results":"160","hashOfConfig":"83"},{"size":118,"mtime":1616075880021,"results":"161","hashOfConfig":"83"},{"size":2113,"mtime":1616079251078,"results":"162","hashOfConfig":"83"},{"size":1357,"mtime":1616090078392,"results":"163","hashOfConfig":"83"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},"127lrwc",{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"185"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"185"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"185"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"166"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"166"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224","usedDeprecatedRules":"166"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245","usedDeprecatedRules":"166"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248","usedDeprecatedRules":"249"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"326","usedDeprecatedRules":"166"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"331"},{"filePath":"332","messages":"333","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"185"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"185"},"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\index.tsx",[],["336","337"],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\home\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\header\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\app\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\nodetypes\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\toolbox\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\data\\WorkspaceDataset.js",[],["338","339"],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\data\\NodeTypeDataset.js",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\data\\UserDataset.js",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\services\\workspaceService.ts",["340","341","342","343","344"],"import {\r\n  Workspace,\r\n  Node,\r\n  Edge,\r\n  Aspects,\r\n  Graph,\r\n  CategoryDescriptor,\r\n  AspectDescriptor,\r\n  Connection,\r\n} from \"../models/workspace\";\r\nimport {\r\n  Diagram,\r\n  DiagramNode,\r\n  DiagramConnector,\r\n  DiagramConnectorType,\r\n  DiagramConnectionType,\r\n  DiagramConnection,\r\n  DIAGRAM_CONNECTOR_TYPE,\r\n  DIAGRAM_CONNECTION_TYPE,\r\n} from \"./../models/diagram\";\r\nimport { AspectRatioSharp } from \"@material-ui/icons\";\r\nimport { brotliDecompress } from \"zlib\";\r\nimport { nodetypeReducer } from \"../redux/store/nodetypes/reducers\";\r\n\r\nexport class WorkspaceService {\r\n  private workspace: Workspace;\r\n  functionalNodeMap: Map<string, Node>;\r\n  productNodeMap: Map<string, Node>;\r\n  functionalEdgeMap: Map<string, Edge>;\r\n  productEdgeMap: Map<string, Edge>;\r\n\r\n  proxyNodeMap: Map<string, Node>;\r\n  proxyEdgeMap: Map<string, Edge>;\r\n\r\n  constructor(workspace: Workspace) {\r\n    this.workspace = workspace;\r\n    this.functionalNodeMap = this.createNodeMap(\"1\", \"1\");\r\n    this.productNodeMap = this.createNodeMap(\"2\", \"1\");\r\n    this.functionalEdgeMap = this.createEdgeMap(\"1\", \"1\");\r\n    this.productEdgeMap = this.createEdgeMap(\"2\", \"1\");\r\n    this.proxyNodeMap = new Map<string, Node>();\r\n    this.proxyEdgeMap = new Map<string, Edge>();\r\n  }\r\n\r\n  createNodeMap(aspect: string, category: string): Map<string, Node> {\r\n    var aspects = this.workspace.aspects.filter(\r\n      (x) => x.aspect === aspect && x.category === category\r\n    );\r\n    if (!aspects && aspects.length <= 0) return new Map<string, Node>();\r\n\r\n    return new Map(\r\n      aspects[0].graph.nodes.map((obj) => [obj.id, obj] as [string, Node])\r\n    );\r\n  }\r\n\r\n  createEdgeMap(aspect: string, category: string): Map<string, Edge> {\r\n    var aspects = this.workspace.aspects.filter(\r\n      (x) => x.aspect === aspect && x.category === category\r\n    );\r\n    if (!aspects && aspects.length <= 0) return new Map<string, Edge>();\r\n\r\n    return new Map(\r\n      aspects[0].graph.edges.map((obj) => [obj.id, obj] as [string, Edge])\r\n    );\r\n  }\r\n\r\n  getProductLabel(nodeId: string): string {\r\n    var actualProductnode = this.productNodeMap.get(nodeId);\r\n    if (actualProductnode) {\r\n      return actualProductnode.label;\r\n    }\r\n\r\n    const actualNode = this.functionalNodeMap.get(nodeId);\r\n\r\n    if (!actualNode) return \"\";\r\n\r\n    // TODO: Use Typeregister\r\n    if (actualNode.type === \"imft:Reservoir\") return \"Reservoir\";\r\n  }\r\n\r\n  getRootEdges(nodeId: string): Edge[] {\r\n    var aspects = this.workspace.aspects.filter(\r\n      (x) => x.aspect === \"1\" && x.category === \"1\"\r\n    );\r\n    if (!aspects && aspects.length <= 0) return [];\r\n\r\n    const edges = aspects[0].graph.edges.filter(\r\n      (x) => x.to === nodeId && x.type === \"imfo:partOf\"\r\n    );\r\n    let filteredEdges: Edge[] = [];\r\n\r\n    // TODO: Use Typeregister\r\n    edges.forEach((edge) => {\r\n      const node = this.functionalNodeMap.get(edge.from);\r\n      if (\r\n        node &&\r\n        !node.type.toLowerCase().includes(\"input\") &&\r\n        !node.type.toLowerCase().includes(\"output\")\r\n      ) {\r\n        filteredEdges.push(edge);\r\n      }\r\n    });\r\n    return filteredEdges;\r\n  }\r\n\r\n  getConnectorEdges(nodeId: string): Edge[] {\r\n    var aspects = this.workspace.aspects.filter(\r\n      (x) => x.aspect === \"1\" && x.category === \"1\"\r\n    );\r\n    if (!aspects && aspects.length <= 0) return [];\r\n\r\n    const edges = aspects[0].graph.edges.filter(\r\n      (x) => x.to === nodeId && x.type === \"imfo:partOf\"\r\n    );\r\n    let filteredEdges: Edge[] = [];\r\n\r\n    // TODO: Use Typeregister\r\n    edges.forEach((edge) => {\r\n      const node = this.functionalNodeMap.get(edge.from);\r\n      if (\r\n        node &&\r\n        (node.type.toLowerCase().includes(\"input\") ||\r\n          node.type.toLowerCase().includes(\"output\"))\r\n      ) {\r\n        filteredEdges.push(edge);\r\n      }\r\n    });\r\n    return filteredEdges;\r\n  }\r\n\r\n  getFunctionalAspect(): Aspects[] {\r\n    return this.workspace.aspects.filter((x) => x.aspect === \"1\");\r\n  }\r\n\r\n  getProductAspect(): Aspects[] {\r\n    return this.workspace.aspects.filter((x) => x.aspect === \"2\");\r\n  }\r\n\r\n  getAreaAspect(): Aspects[] {\r\n    return this.workspace.aspects.filter((x) => x.aspect === \"3\");\r\n  }\r\n\r\n  getFunctionalAspectCategories(): CategoryDescriptor[] {\r\n    let functionalCategories: CategoryDescriptor[] = [];\r\n    const fAspect = this.getFunctionalAspect();\r\n    fAspect.forEach((aspect) => {\r\n      functionalCategories.push({\r\n        id: aspect.category,\r\n        name: aspect.descriptor.name,\r\n        description: aspect.descriptor.description,\r\n      });\r\n    });\r\n    return functionalCategories;\r\n  }\r\n\r\n  getProductAspectCategories(): CategoryDescriptor[] {\r\n    let productCategories: CategoryDescriptor[] = [];\r\n    const pAspect = this.getProductAspect();\r\n    pAspect.forEach((aspect) => {\r\n      productCategories.push({\r\n        id: aspect.category,\r\n        name: aspect.descriptor.name,\r\n        description: aspect.descriptor.description,\r\n      });\r\n    });\r\n    return productCategories;\r\n  }\r\n\r\n  getAreaAspectCategories(): CategoryDescriptor[] {\r\n    let areaCategories: CategoryDescriptor[] = [];\r\n    const aAspect = this.getAreaAspect();\r\n    aAspect.forEach((aspect) => {\r\n      areaCategories.push({\r\n        id: aspect.category,\r\n        name: aspect.descriptor.name,\r\n        description: aspect.descriptor.description,\r\n      });\r\n    });\r\n    if (!areaCategories || areaCategories.length <= 0) {\r\n      areaCategories.push({\r\n        id: null,\r\n        name: \"default\",\r\n        description: \"\",\r\n      });\r\n    }\r\n    return areaCategories;\r\n  }\r\n\r\n  // getNodesConnectedToRoot(aspectId: string): Node[] {\r\n  //     const aspectEdges: Edge[] = [];\r\n  //     const aspectNodes: Node[] = [];\r\n  //     const chosenAspect = this.workspace.aspects\r\n  // \t.filter(x => x.aspect === aspectId);\r\n\r\n  // \tchosenAspect.forEach(aspect => {\r\n  // \t\tif(aspect.graph.edges.filter(e => e.to === 'root' && e.type === 'imfo:partOf')){\r\n  // \t\t\taspectEdges.push({\r\n  // \t\t\t\tid: e.id;\r\n  // \t\t\t});\r\n  // \t\t}\r\n  // \t})\r\n\r\n  getConnectionEdges(nodeId: string): Connection[] {\r\n    var aspects = this.workspace.aspects.filter(\r\n      (x) => x.aspect === \"1\" && x.category === \"1\"\r\n    );\r\n\r\n    if (!aspects && aspects.length <= 0) return [];\r\n\r\n    const edges = aspects[0].graph.edges.filter(\r\n      (x) => x.to === nodeId && x.type !== \"imfo:partOf\"\r\n    );\r\n    let filteredConnections: Connection[] = [];\r\n\r\n    // TODO: Use Typeregister\r\n    edges.forEach((edge) => {\r\n      if (edge) {\r\n        var parent = aspects[0].graph.edges.filter(\r\n          (x) => x.from === edge.from && x.type === \"imfo:partOf\"\r\n        );\r\n\r\n        if (parent && parent.length > 0) {\r\n          filteredConnections.push({\r\n            id: edge.id,\r\n            type: edge.type,\r\n            from: parent[0].to,\r\n            to: edge.to,\r\n            connector: parent[0].id,\r\n          });\r\n        }\r\n      }\r\n    });\r\n\r\n    return filteredConnections;\r\n  }\r\n\r\n  getDiagram(nodeId: string): Diagram {\r\n    var aspects = this.workspace.aspects.filter(\r\n      (x) => x.aspect === \"1\" && x.category === \"1\"\r\n    );\r\n\r\n    if (!aspects && aspects.length <= 0) return null;\r\n\r\n    var diagram = new Diagram(\r\n      nodeId,\r\n      this.productNodeMap.get(nodeId)?.label ??\r\n        this.functionalNodeMap.get(nodeId)?.label ??\r\n        this.workspace.root.title\r\n    );\r\n    const nodeEdges = aspects[0].graph.edges.filter(\r\n      (x) =>\r\n        x.to === nodeId &&\r\n        x.type === \"imfo:partOf\" &&\r\n        !this.functionalNodeMap\r\n          .get(x.from)\r\n          .type.toLowerCase()\r\n          .includes(\"input\") &&\r\n        !this.functionalNodeMap\r\n          .get(x.from)\r\n          .type.toLowerCase()\r\n          .includes(\"output\")\r\n    );\r\n\r\n    diagram.nodes = nodeEdges.map((x) => {\r\n      const node = this.functionalNodeMap.get(x.from);\r\n      const label = this.productNodeMap.get(node.id)?.label ?? node.type;\r\n      const diagramNode = new DiagramNode(node.id, label);\r\n      diagramNode.connectors = this.getConnectors(node.id, aspects[0]);\r\n\r\n      diagram.connections = diagram.connections.concat(\r\n        this.getConnections(node.id, aspects[0], diagramNode.connectors)\r\n      );\r\n\r\n      return diagramNode;\r\n    });\r\n    return diagram;\r\n  }\r\n\r\n  getConnectors(nodeId: string, aspects: Aspects): DiagramConnector[] {\r\n    if (\r\n      !aspects &&\r\n      !aspects.graph &&\r\n      !aspects.graph.edges &&\r\n      aspects.graph.edges.length <= 0\r\n    )\r\n      return [];\r\n\r\n    const connectors = aspects.graph.edges\r\n      .filter(\r\n        (x) =>\r\n          x.to === nodeId &&\r\n          x.type === \"imfo:partOf\" &&\r\n          (this.functionalNodeMap\r\n            .get(x.from)\r\n            .type.toLowerCase()\r\n            .includes(\"input\") ||\r\n            this.functionalNodeMap\r\n              .get(x.from)\r\n              .type.toLowerCase()\r\n              .includes(\"output\") ||\r\n            this.functionalNodeMap\r\n              .get(x.from)\r\n              .type.toLowerCase()\r\n              .includes(\"supply\"))\r\n      )\r\n      .map((x) => {\r\n        const diagramType = this.functionalNodeMap\r\n          .get(x.from)\r\n          .type.toLowerCase()\r\n          .includes(\"input\")\r\n          ? (DIAGRAM_CONNECTOR_TYPE.TARGET as DiagramConnectorType)\r\n          : (DIAGRAM_CONNECTOR_TYPE.SOURCE as DiagramConnectorType);\r\n        const label = this.functionalNodeMap.get(x.from)?.type ?? x.type;\r\n        return new DiagramConnector(x.id, label, diagramType);\r\n      });\r\n    return connectors;\r\n  }\r\n\r\n  getConnections(\r\n    nodeId: string,\r\n    aspects: Aspects,\r\n    connectors: DiagramConnector[]\r\n  ): DiagramConnection[] {\r\n    if (\r\n      !aspects &&\r\n      !aspects.graph &&\r\n      !aspects.graph.edges &&\r\n      aspects.graph.edges.length <= 0\r\n    )\r\n      return [];\r\n\r\n    return aspects.graph.edges\r\n      .filter(\r\n        (x) =>\r\n          x.to === nodeId &&\r\n          Object.values(DIAGRAM_CONNECTION_TYPE).includes(x.type)\r\n      )\r\n      .map((x) => {\r\n        const sourceParentEdge = aspects.graph.edges.filter(\r\n          (e) => e.from === \"n2\" && e.type === \"imfo:partOf\"\r\n        )[0];\r\n        const targetConnector = connectors.filter(\r\n          (x) => x.type === DIAGRAM_CONNECTOR_TYPE.TARGET\r\n        )[0];\r\n        // TODO: This values must be dynamic\r\n        return new DiagramConnection(\r\n          x.id,\r\n          x.type,\r\n          sourceParentEdge.to,\r\n          \"e2\",\r\n          \"n4\",\r\n          targetConnector.id,\r\n          x.type as DiagramConnectionType\r\n        );\r\n      });\r\n  }\r\n\r\n  guid(): string {\r\n    function _p8(s: boolean) {\r\n      var p = (Math.random().toString(16) + \"000000000\").substr(2, 8);\r\n      return s ? \"-\" + p.substr(0, 4) + \"-\" + p.substr(4, 4) : p;\r\n    }\r\n    return _p8(false) + _p8(true) + _p8(true) + _p8(false);\r\n  }\r\n\r\n  getProxyNodes(aspect: Aspects) {\r\n    if (\r\n      !aspect &&\r\n      !aspect.graph &&\r\n      !aspect.graph.edges &&\r\n      aspect.graph.edges.length <= 0\r\n    )\r\n      return;\r\n\r\n    aspect.graph.nodes\r\n      .filter(\r\n        (x) =>\r\n          !x.type.toLowerCase().includes(\"input\") &&\r\n          !x.type.toLowerCase().includes(\"output\") &&\r\n          !x.type.toLowerCase().includes(\"pipeline\")\r\n      )\r\n      .forEach((n) => {\r\n        const sourceNodeId = this.guid();\r\n        const targetNodeId = this.guid();\r\n\r\n        aspect.graph.nodes.push({\r\n          id: sourceNodeId,\r\n          type: \"imfo:SupplyOutput\",\r\n          label: \"Supply output\",\r\n        });\r\n        aspect.graph.nodes.push({\r\n          id: targetNodeId,\r\n          type: \"imfo:SupplyInput\",\r\n          label: \"Supply input\",\r\n        });\r\n\r\n        aspect.graph.edges.push({\r\n          id: this.guid(),\r\n          type: \"imfo:partOf\",\r\n          from: sourceNodeId,\r\n          to: n.id,\r\n        });\r\n        aspect.graph.edges.push({\r\n          id: this.guid(),\r\n          type: \"imfo:partOf\",\r\n          from: targetNodeId,\r\n          to: n.id,\r\n        });\r\n      });\r\n  }\r\n}\r\n","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\home\\Home.tsx",["345"],"import { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useParams } from \"react-router\";\r\nimport { DiagramComponent, TreeviewComponent } from \"..\";\r\nimport { getWorkspace } from \"../../redux/store/workspace/actions\";\r\nimport { WorkspaceState } from \"../../redux/store/workspace/types\";\r\nimport { RootState } from \"./../../redux/store/index\";\r\nimport textResources from \"../../textResources\";\r\nimport { InspectorComponent } from \"../modules/inspectorModule\";\r\n// import { UserState } from \"../../store/user/types\";\r\n// import { SETTING_KEY, SETTING_VALUE } from \"./../../models/user\";\r\n// import { getUser } from \"../../store/user/actions\";\r\n\r\ninterface RouteParams {\r\n  type: string;\r\n}\r\n\r\nconst Home = () => {\r\n  const workspaceState = useSelector<RootState>(\r\n    (state) => state.workspace\r\n  ) as WorkspaceState;\r\n  // const userState = useSelector<RootState>((state) => state.user) as UserState;\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(getWorkspace());\r\n    // dispatch(getUser(\"rl\", \"rl\"));\r\n  }, [dispatch]);\r\n\r\n  const params = useParams<RouteParams>();\r\n  const isOnline =\r\n    workspaceState && workspaceState.workspace && !workspaceState.fetching;\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"explorer_view\">{textResources.Explorer_view}</div>\r\n      <div className=\"middle_content\">\r\n        <div className=\"workspace\">\r\n          {isOnline && (\r\n            <>\r\n              {params.type === \"treeview\" && (\r\n                <TreeviewComponent\r\n                  root={workspaceState.workspace.root}\r\n                  aspects={workspaceState.workspace.aspects}\r\n                  aspectDescriptors={workspaceState.workspace.aspectDescriptors}\r\n                />\r\n              )}\r\n              {params.type === \"diagram\" && (\r\n                <DiagramComponent\r\n                  root={workspaceState.workspace.root}\r\n                  aspects={workspaceState.workspace.aspects}\r\n                  aspectDescriptors={workspaceState.workspace.aspectDescriptors}\r\n                />\r\n              )}\r\n            </>\r\n          )}\r\n        </div>\r\n        {/* <div className=\"inspector\">\r\n          {textResources.Inspector}\r\n          <InspectorComponent />\r\n        </div> */}\r\n      </div>\r\n      <div className=\"library\">{textResources.Library}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\header\\Header.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\app\\App.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\DiagramComponent.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\nodetypes\\NodeTypeComponent.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\nodetypes\\NodeTypeOverview.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\toolbox\\ToolboxComponent.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\TreeviewComponent.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\models\\user\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\services\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\models\\diagram\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\models\\user\\types.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\models\\diagram\\Diagram.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\assets\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\TreeviewBody.tsx",["346","347","348","349","350"],"import { AspectInfo, AspectDropdown } from \"./aspect\";\r\nimport { WorkspaceService } from \"../../services\";\r\nimport DnDFlow from \"./flow/\";\r\nimport {\r\n  AspectDescriptor,\r\n  Aspects,\r\n  Root,\r\n  Workspace,\r\n} from \"../../models/workspace\";\r\n\r\ninterface Props extends Workspace {\r\n  aspectDescriptors: AspectDescriptor[];\r\n  root: Root;\r\n  aspects: Aspects[];\r\n}\r\n\r\nconst TreeviewBody = ({ aspectDescriptors, root, aspects }: Props) => {\r\n  const service = new WorkspaceService({ root, aspects, aspectDescriptors });\r\n  const fcat = service.getFunctionalAspectCategories();\r\n  const pcat = service.getProductAspectCategories();\r\n  const acat = service.getAreaAspectCategories();\r\n  // const fgraph = service.getNodesConnectedToRoot('1');\r\n\r\n  return (\r\n    <DnDFlow />\r\n    // <div className=\"aspects_container\">\r\n\r\n    //   {aspectDescriptors.map((aspect) => (\r\n    //     <div key={aspect.id} className=\"aspect_container\">\r\n    //       <AspectInfo id={aspect.id} name={aspect.name} />\r\n    //       <AspectDropdown\r\n    //         id={aspect.id}\r\n    //         functional={fcat}\r\n    //         product={pcat}\r\n    //         location={acat}\r\n    //       />\r\n    //       <div className=\"aspect_view\"></div>\r\n    //     </div>\r\n    //   ))}\r\n    // </div>\r\n  );\r\n};\r\n\r\nexport default TreeviewBody;\r\n","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\TreeviewHeader.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\textResources.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\DiagramAddNodes.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\DiagramAddConnections.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\selectorNodes\\defaultSelectors\\DefaultSelectorNode.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\selectorNodes\\connectSelectors\\ConnectSelectorNode.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\selectorNodes\\defaultSelectors\\InputConnect.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\selectorNodes\\defaultSelectors\\OutputConnect.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\selectorNodes\\connectSelectors\\DataConnect.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\DrawMiniMap.tsx",["351"],"import { MiniMap, Node } from \"react-flow-renderer\";\r\n\r\nconst DrawMiniMap = () => {\r\n  let color: string;\r\n\r\n  return (\r\n    <MiniMap\r\n      nodeStrokeColor={(node: Node): string => {\r\n        return node.type === \"input\"\r\n          ? (color = \"#00041d0\")\r\n          : node.type === \"selectorNode\"\r\n          ? (color = \"#ccc\")\r\n          : node.type === \"output\"\r\n          ? (color = \"#ff0072\")\r\n          : (color = \"#eee\");\r\n      }}\r\n      nodeColor={(node: Node): string => {\r\n        return node.type === \"selectorNode\"\r\n          ? (color = \"#ccc\")\r\n          : (color = \"#fff\");\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default DrawMiniMap;\r\n","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\hooks\\useTreeviewChangeHandler.tsx",["352","353","354"],"import { useCallback } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../../store/index\";\r\n\r\nconst useTreeviewChangeHandler = () => {\r\n  // const aspectList = useSelector<RootState>((state) => state.workspace);\r\n\r\n  const test = \"one\";\r\n  console.log(test);\r\n  return test;\r\n};\r\n\r\nexport default useTreeviewChangeHandler;\r\n",["355","356"],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\workspace\\actions.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\workspace\\types.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\nodetypes\\actions.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\nodetypes\\types.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\nodetypes\\reducers.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\workspace\\reducers.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\user\\reducers.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\sagas\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\user\\types.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\sagas\\workspace\\saga.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\sagas\\user\\saga.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\sagas\\nodetype\\saga.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\testing\\getAspect.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\testing\\aspectReducer.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\InspectorComponent.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\InspectorContent.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\styled\\StyledInspectorComponent.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\styled\\StyledToggleButton.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\styled\\StyledHeader.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\inspector\\changeInspector.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\inspector\\inspectorReducer.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\hooks\\useInspectorChangeHandler.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\styled\\animated\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\styled\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\styled\\animated\\AnimatedToggleButton.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\styled\\animated\\AnimatedMenu.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\FragmentData.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\FragmentContent.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\styled\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\helpers\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\styled\\StyledInspectorContent.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\helpers\\GetTextResource.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\helpers\\GetColor.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\helpers\\GetContentData.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\aspect\\AspectDropdown.tsx",["357"],"import { CategoryDescriptor } from \"../../../models/workspace\";\r\nimport \"react-dropdown/style.css\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { getAspect } from \"../../../redux/testing/getAspect\";\r\n\r\ninterface Props {\r\n  id: string;\r\n  functional: CategoryDescriptor[];\r\n  product: CategoryDescriptor[];\r\n  location: CategoryDescriptor[];\r\n}\r\n\r\nconst AspectDropdown = ({ id, functional, product, location }: Props) => {\r\n  const dispatch = useDispatch();\r\n  const handleChange = (e) => {\r\n    const value = e.target.value;\r\n    dispatch(getAspect());\r\n  };\r\n\r\n  return (\r\n    <div className=\"aspect_category\">\r\n      <select onChange={handleChange} className=\"select_category\">\r\n        {id === \"1\"\r\n          ? functional.map((category) => (\r\n              <option key={category.id} value={category.name}>\r\n                {category.name}\r\n              </option>\r\n            ))\r\n          : id === \"2\"\r\n          ? product.map((category) => (\r\n              <option key={category.id} value={category.name}>\r\n                {category.name}\r\n              </option>\r\n            ))\r\n          : id === \"3\"\r\n          ? location.map((category) => (\r\n              <option key={category.id} value={category.name}>\r\n                {category.name}\r\n              </option>\r\n            ))\r\n          : null}\r\n      </select>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AspectDropdown;\r\n","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\aspect\\AspectInfo.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\aspect\\index.ts",[],["358","359"],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\flow\\index.js",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\flow\\Sidebar.js",[],{"ruleId":"360","replacedBy":"361"},{"ruleId":"362","replacedBy":"363"},{"ruleId":"360","replacedBy":"361"},{"ruleId":"362","replacedBy":"363"},{"ruleId":"364","severity":1,"message":"365","line":6,"column":3,"nodeType":"366","messageId":"367","endLine":6,"endColumn":8},{"ruleId":"364","severity":1,"message":"368","line":8,"column":3,"nodeType":"366","messageId":"367","endLine":8,"endColumn":19},{"ruleId":"364","severity":1,"message":"369","line":21,"column":10,"nodeType":"366","messageId":"367","endLine":21,"endColumn":26},{"ruleId":"364","severity":1,"message":"370","line":22,"column":10,"nodeType":"366","messageId":"367","endLine":22,"endColumn":26},{"ruleId":"364","severity":1,"message":"371","line":23,"column":10,"nodeType":"366","messageId":"367","endLine":23,"endColumn":25},{"ruleId":"364","severity":1,"message":"372","line":9,"column":10,"nodeType":"366","messageId":"367","endLine":9,"endColumn":28},{"ruleId":"364","severity":1,"message":"373","line":1,"column":10,"nodeType":"366","messageId":"367","endLine":1,"endColumn":20},{"ruleId":"364","severity":1,"message":"374","line":1,"column":22,"nodeType":"366","messageId":"367","endLine":1,"endColumn":36},{"ruleId":"364","severity":1,"message":"375","line":19,"column":9,"nodeType":"366","messageId":"367","endLine":19,"endColumn":13},{"ruleId":"364","severity":1,"message":"376","line":20,"column":9,"nodeType":"366","messageId":"367","endLine":20,"endColumn":13},{"ruleId":"364","severity":1,"message":"377","line":21,"column":9,"nodeType":"366","messageId":"367","endLine":21,"endColumn":13},{"ruleId":"364","severity":1,"message":"378","line":20,"column":14,"nodeType":"366","messageId":"367","endLine":20,"endColumn":19},{"ruleId":"364","severity":1,"message":"379","line":1,"column":10,"nodeType":"366","messageId":"367","endLine":1,"endColumn":21},{"ruleId":"364","severity":1,"message":"380","line":2,"column":10,"nodeType":"366","messageId":"367","endLine":2,"endColumn":21},{"ruleId":"364","severity":1,"message":"381","line":3,"column":10,"nodeType":"366","messageId":"367","endLine":3,"endColumn":19},{"ruleId":"360","replacedBy":"382"},{"ruleId":"362","replacedBy":"383"},{"ruleId":"364","severity":1,"message":"384","line":16,"column":11,"nodeType":"366","messageId":"367","endLine":16,"endColumn":16},{"ruleId":"360","replacedBy":"385"},{"ruleId":"362","replacedBy":"386"},"no-native-reassign",["387"],"no-negated-in-lhs",["388"],"@typescript-eslint/no-unused-vars","'Graph' is defined but never used.","Identifier","unusedVar","'AspectDescriptor' is defined but never used.","'AspectRatioSharp' is defined but never used.","'brotliDecompress' is defined but never used.","'nodetypeReducer' is defined but never used.","'InspectorComponent' is defined but never used.","'AspectInfo' is defined but never used.","'AspectDropdown' is defined but never used.","'fcat' is assigned a value but never used.","'pcat' is assigned a value but never used.","'acat' is assigned a value but never used.","'color' is assigned a value but never used.","'useCallback' is defined but never used.","'useSelector' is defined but never used.","'RootState' is defined but never used.",["387"],["388"],"'value' is assigned a value but never used.",["387"],["388"],"no-global-assign","no-unsafe-negation"]
>>>>>>> d6073ee (Add flow to treeview)
=======
[{"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\index.tsx":"1","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\index.ts":"2","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\home\\index.ts":"3","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\header\\index.ts":"4","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\app\\index.ts":"5","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\nodetypes\\index.ts":"6","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\index.ts":"7","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\toolbox\\index.ts":"8","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\index.ts":"9","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\data\\WorkspaceDataset.js":"10","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\data\\NodeTypeDataset.js":"11","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\data\\UserDataset.js":"12","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\services\\workspaceService.ts":"13","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\home\\Home.tsx":"14","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\header\\Header.tsx":"15","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\app\\App.tsx":"16","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\DiagramComponent.tsx":"17","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\nodetypes\\NodeTypeComponent.tsx":"18","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\nodetypes\\NodeTypeOverview.tsx":"19","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\toolbox\\ToolboxComponent.tsx":"20","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\TreeviewComponent.tsx":"21","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\models\\user\\index.ts":"22","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\services\\index.ts":"23","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\models\\diagram\\index.ts":"24","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\models\\user\\types.ts":"25","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\models\\diagram\\Diagram.ts":"26","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\assets\\index.ts":"27","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\TreeviewBody.tsx":"28","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\TreeviewHeader.tsx":"29","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\textResources.tsx":"30","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\DiagramAddNodes.tsx":"31","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\DiagramAddConnections.tsx":"32","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\selectorNodes\\defaultSelectors\\DefaultSelectorNode.tsx":"33","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\selectorNodes\\connectSelectors\\ConnectSelectorNode.tsx":"34","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\selectorNodes\\defaultSelectors\\InputConnect.tsx":"35","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\selectorNodes\\defaultSelectors\\OutputConnect.tsx":"36","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\selectorNodes\\connectSelectors\\DataConnect.tsx":"37","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\DrawMiniMap.tsx":"38","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\hooks\\useTreeviewChangeHandler.tsx":"39","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\workspace\\actions.ts":"40","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\workspace\\types.ts":"41","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\nodetypes\\actions.ts":"42","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\nodetypes\\types.ts":"43","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\index.ts":"44","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\nodetypes\\reducers.ts":"45","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\workspace\\reducers.ts":"46","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\user\\reducers.ts":"47","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\sagas\\index.ts":"48","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\user\\types.ts":"49","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\sagas\\workspace\\saga.ts":"50","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\sagas\\user\\saga.ts":"51","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\sagas\\nodetype\\saga.ts":"52","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\testing\\getAspect.tsx":"53","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\testing\\aspectReducer.tsx":"54","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\index.ts":"55","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\InspectorComponent.tsx":"56","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\InspectorContent.tsx":"57","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\styled\\StyledInspectorComponent.tsx":"58","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\styled\\StyledToggleButton.tsx":"59","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\styled\\StyledHeader.ts":"60","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\hooks\\useInspectorChangeHandler.tsx":"61","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\styled\\animated\\index.ts":"62","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\styled\\index.ts":"63","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\styled\\animated\\AnimatedToggleButton.tsx":"64","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\styled\\animated\\AnimatedMenu.tsx":"65","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\index.ts":"66","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\FragmentData.tsx":"67","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\FragmentContent.tsx":"68","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\styled\\index.ts":"69","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\helpers\\index.ts":"70","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\styled\\StyledInspectorContent.tsx":"71","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\helpers\\GetTextResource.tsx":"72","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\helpers\\GetColor.tsx":"73","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\helpers\\GetContentData.tsx":"74","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\aspect\\AspectDropdown.tsx":"75","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\aspect\\AspectInfo.tsx":"76","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\aspect\\index.ts":"77","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\flow\\dragAndDrop\\index.js":"78","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\flow\\dragAndDrop\\Sidebar.js":"79","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\flow\\layouting\\index.js":"80","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\flow\\layouting\\initial-elements.js":"81","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\inspector\\actions\\changeInspector.tsx":"82","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\inspector\\reducer\\inspectorReducer.tsx":"83","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\inspector\\reducer\\initialState.ts":"84","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\flow\\dragAndDrop\\helpers\\GetLabel.js":"85","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\flow\\index.js":"86","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\inspector\\inspectorReducer.tsx":"87","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\inspector\\changeInspector.tsx":"88","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\flow\\Sidebar.js":"89"},{"size":511,"mtime":1615884814509,"results":"90","hashOfConfig":"91"},{"size":367,"mtime":1616076248053,"results":"92","hashOfConfig":"91"},{"size":58,"mtime":1615384119007,"results":"93","hashOfConfig":"91"},{"size":63,"mtime":1615384119006,"results":"94","hashOfConfig":"91"},{"size":56,"mtime":1615884814467,"results":"95","hashOfConfig":"91"},{"size":131,"mtime":1615384119010,"results":"96","hashOfConfig":"91"},{"size":215,"mtime":1615884814472,"results":"97","hashOfConfig":"91"},{"size":73,"mtime":1615384119013,"results":"98","hashOfConfig":"91"},{"size":329,"mtime":1616076038956,"results":"99","hashOfConfig":"91"},{"size":7917,"mtime":1615884814509,"results":"100","hashOfConfig":"91"},{"size":330,"mtime":1615884814507,"results":"101","hashOfConfig":"91"},{"size":723,"mtime":1615884814508,"results":"102","hashOfConfig":"91"},{"size":11954,"mtime":1615884814523,"results":"103","hashOfConfig":"91"},{"size":2421,"mtime":1615943687003,"results":"104","hashOfConfig":"91"},{"size":1392,"mtime":1615884814493,"results":"105","hashOfConfig":"91"},{"size":333,"mtime":1615943687002,"results":"106","hashOfConfig":"91"},{"size":3247,"mtime":1616503464850,"results":"107","hashOfConfig":"91"},{"size":476,"mtime":1615884814495,"results":"108","hashOfConfig":"91"},{"size":983,"mtime":1615884814496,"results":"109","hashOfConfig":"91"},{"size":354,"mtime":1615884814497,"results":"110","hashOfConfig":"91"},{"size":682,"mtime":1616076835139,"results":"111","hashOfConfig":"91"},{"size":24,"mtime":1615384119031,"results":"112","hashOfConfig":"91"},{"size":56,"mtime":1615884814522,"results":"113","hashOfConfig":"91"},{"size":26,"mtime":1615384119030,"results":"114","hashOfConfig":"91"},{"size":284,"mtime":1615884814511,"results":"115","hashOfConfig":"91"},{"size":2558,"mtime":1615884814510,"results":"116","hashOfConfig":"91"},{"size":210,"mtime":1615943687001,"results":"117","hashOfConfig":"91"},{"size":1302,"mtime":1616503464857,"results":"118","hashOfConfig":"91"},{"size":187,"mtime":1616075917914,"results":"119","hashOfConfig":"91"},{"size":775,"mtime":1616074562591,"results":"120","hashOfConfig":"91"},{"size":572,"mtime":1616445233098,"results":"121","hashOfConfig":"91"},{"size":516,"mtime":1616445333196,"results":"122","hashOfConfig":"91"},{"size":888,"mtime":1616493014694,"results":"123","hashOfConfig":"91"},{"size":528,"mtime":1615884814474,"results":"124","hashOfConfig":"91"},{"size":646,"mtime":1616503464852,"results":"125","hashOfConfig":"91"},{"size":614,"mtime":1615884814491,"results":"126","hashOfConfig":"91"},{"size":673,"mtime":1615884814478,"results":"127","hashOfConfig":"91"},{"size":648,"mtime":1615884814471,"results":"128","hashOfConfig":"91"},{"size":365,"mtime":1615812248733,"results":"129","hashOfConfig":"91"},{"size":342,"mtime":1615884814519,"results":"130","hashOfConfig":"91"},{"size":716,"mtime":1615884814520,"results":"131","hashOfConfig":"91"},{"size":342,"mtime":1615884814516,"results":"132","hashOfConfig":"91"},{"size":752,"mtime":1615884814517,"results":"133","hashOfConfig":"91"},{"size":1059,"mtime":1616503464863,"results":"134","hashOfConfig":"91"},{"size":746,"mtime":1616503464864,"results":"135","hashOfConfig":"91"},{"size":747,"mtime":1615884814520,"results":"136","hashOfConfig":"91"},{"size":824,"mtime":1615884814518,"results":"137","hashOfConfig":"91"},{"size":578,"mtime":1615884814512,"results":"138","hashOfConfig":"91"},{"size":692,"mtime":1615884814518,"results":"139","hashOfConfig":"91"},{"size":1409,"mtime":1615884814514,"results":"140","hashOfConfig":"91"},{"size":1136,"mtime":1615884814514,"results":"141","hashOfConfig":"91"},{"size":1009,"mtime":1615884814513,"results":"142","hashOfConfig":"91"},{"size":278,"mtime":1615887694260,"results":"143","hashOfConfig":"91"},{"size":494,"mtime":1615930158637,"results":"144","hashOfConfig":"91"},{"size":138,"mtime":1615888115943,"results":"145","hashOfConfig":"91"},{"size":980,"mtime":1615990840614,"results":"146","hashOfConfig":"91"},{"size":345,"mtime":1616074562576,"results":"147","hashOfConfig":"91"},{"size":332,"mtime":1615990840615,"results":"148","hashOfConfig":"91"},{"size":628,"mtime":1616074562588,"results":"149","hashOfConfig":"91"},{"size":641,"mtime":1616074562583,"results":"150","hashOfConfig":"91"},{"size":613,"mtime":1616503464855,"results":"151","hashOfConfig":"91"},{"size":134,"mtime":1615990840618,"results":"152","hashOfConfig":"91"},{"size":154,"mtime":1615980390335,"results":"153","hashOfConfig":"91"},{"size":417,"mtime":1615990840617,"results":"154","hashOfConfig":"91"},{"size":413,"mtime":1615990840616,"results":"155","hashOfConfig":"91"},{"size":124,"mtime":1616074562583,"results":"156","hashOfConfig":"91"},{"size":193,"mtime":1616074562576,"results":"157","hashOfConfig":"91"},{"size":1495,"mtime":1616503464853,"results":"158","hashOfConfig":"91"},{"size":138,"mtime":1616074562583,"results":"159","hashOfConfig":"91"},{"size":179,"mtime":1616074562583,"results":"160","hashOfConfig":"91"},{"size":434,"mtime":1616074562583,"results":"161","hashOfConfig":"91"},{"size":477,"mtime":1616074562583,"results":"162","hashOfConfig":"91"},{"size":297,"mtime":1616503464854,"results":"163","hashOfConfig":"91"},{"size":2988,"mtime":1616074562583,"results":"164","hashOfConfig":"91"},{"size":1391,"mtime":1616075774212,"results":"165","hashOfConfig":"91"},{"size":516,"mtime":1616075790435,"results":"166","hashOfConfig":"91"},{"size":118,"mtime":1616075880021,"results":"167","hashOfConfig":"91"},{"size":2341,"mtime":1616420155217,"results":"168","hashOfConfig":"91"},{"size":1430,"mtime":1616419894256,"results":"169","hashOfConfig":"91"},{"size":3007,"mtime":1616152717238,"results":"170","hashOfConfig":"91"},{"size":1665,"mtime":1616153668554,"results":"171","hashOfConfig":"91"},{"size":395,"mtime":1616255975713,"results":"172","hashOfConfig":"91"},{"size":590,"mtime":1616255972997,"results":"173","hashOfConfig":"91"},{"size":384,"mtime":1616255913761,"results":"174","hashOfConfig":"91"},{"size":141,"mtime":1616412281790,"results":"175","hashOfConfig":"91"},{"size":2113,"mtime":1616503464860,"results":"176","hashOfConfig":"91"},{"size":900,"mtime":1616503464862,"results":"177","hashOfConfig":"91"},{"size":397,"mtime":1616503464861,"results":"178","hashOfConfig":"91"},{"size":1357,"mtime":1616503464858,"results":"179","hashOfConfig":"91"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},"127lrwc",{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"182"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"182"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"260","usedDeprecatedRules":"182"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"263","usedDeprecatedRules":"264"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"309","messages":"310","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"311","messages":"312","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"323","messages":"324","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"325","messages":"326","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"333","messages":"334","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"337","usedDeprecatedRules":"182"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"343","messages":"344","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"347","messages":"348","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"349"},{"filePath":"350","messages":"351","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"349"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"354","messages":"355","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"356","messages":"357","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"362","messages":"363","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"364","messages":"365","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"366","messages":"367","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\index.tsx",[],["368","369"],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\home\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\header\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\app\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\nodetypes\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\toolbox\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\data\\WorkspaceDataset.js",[],["370","371"],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\data\\NodeTypeDataset.js",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\data\\UserDataset.js",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\services\\workspaceService.ts",["372","373","374","375","376"],"import {\r\n  Workspace,\r\n  Node,\r\n  Edge,\r\n  Aspects,\r\n  Graph,\r\n  CategoryDescriptor,\r\n  AspectDescriptor,\r\n  Connection,\r\n} from \"../models/workspace\";\r\nimport {\r\n  Diagram,\r\n  DiagramNode,\r\n  DiagramConnector,\r\n  DiagramConnectorType,\r\n  DiagramConnectionType,\r\n  DiagramConnection,\r\n  DIAGRAM_CONNECTOR_TYPE,\r\n  DIAGRAM_CONNECTION_TYPE,\r\n} from \"./../models/diagram\";\r\nimport { AspectRatioSharp } from \"@material-ui/icons\";\r\nimport { brotliDecompress } from \"zlib\";\r\nimport { nodetypeReducer } from \"../redux/store/nodetypes/reducers\";\r\n\r\nexport class WorkspaceService {\r\n  private workspace: Workspace;\r\n  functionalNodeMap: Map<string, Node>;\r\n  productNodeMap: Map<string, Node>;\r\n  functionalEdgeMap: Map<string, Edge>;\r\n  productEdgeMap: Map<string, Edge>;\r\n\r\n  proxyNodeMap: Map<string, Node>;\r\n  proxyEdgeMap: Map<string, Edge>;\r\n\r\n  constructor(workspace: Workspace) {\r\n    this.workspace = workspace;\r\n    this.functionalNodeMap = this.createNodeMap(\"1\", \"1\");\r\n    this.productNodeMap = this.createNodeMap(\"2\", \"1\");\r\n    this.functionalEdgeMap = this.createEdgeMap(\"1\", \"1\");\r\n    this.productEdgeMap = this.createEdgeMap(\"2\", \"1\");\r\n    this.proxyNodeMap = new Map<string, Node>();\r\n    this.proxyEdgeMap = new Map<string, Edge>();\r\n  }\r\n\r\n  createNodeMap(aspect: string, category: string): Map<string, Node> {\r\n    var aspects = this.workspace.aspects.filter(\r\n      (x) => x.aspect === aspect && x.category === category\r\n    );\r\n    if (!aspects && aspects.length <= 0) return new Map<string, Node>();\r\n\r\n    return new Map(\r\n      aspects[0].graph.nodes.map((obj) => [obj.id, obj] as [string, Node])\r\n    );\r\n  }\r\n\r\n  createEdgeMap(aspect: string, category: string): Map<string, Edge> {\r\n    var aspects = this.workspace.aspects.filter(\r\n      (x) => x.aspect === aspect && x.category === category\r\n    );\r\n    if (!aspects && aspects.length <= 0) return new Map<string, Edge>();\r\n\r\n    return new Map(\r\n      aspects[0].graph.edges.map((obj) => [obj.id, obj] as [string, Edge])\r\n    );\r\n  }\r\n\r\n  getProductLabel(nodeId: string): string {\r\n    var actualProductnode = this.productNodeMap.get(nodeId);\r\n    if (actualProductnode) {\r\n      return actualProductnode.label;\r\n    }\r\n\r\n    const actualNode = this.functionalNodeMap.get(nodeId);\r\n\r\n    if (!actualNode) return \"\";\r\n\r\n    // TODO: Use Typeregister\r\n    if (actualNode.type === \"imft:Reservoir\") return \"Reservoir\";\r\n  }\r\n\r\n  getRootEdges(nodeId: string): Edge[] {\r\n    var aspects = this.workspace.aspects.filter(\r\n      (x) => x.aspect === \"1\" && x.category === \"1\"\r\n    );\r\n    if (!aspects && aspects.length <= 0) return [];\r\n\r\n    const edges = aspects[0].graph.edges.filter(\r\n      (x) => x.to === nodeId && x.type === \"imfo:partOf\"\r\n    );\r\n    let filteredEdges: Edge[] = [];\r\n\r\n    // TODO: Use Typeregister\r\n    edges.forEach((edge) => {\r\n      const node = this.functionalNodeMap.get(edge.from);\r\n      if (\r\n        node &&\r\n        !node.type.toLowerCase().includes(\"input\") &&\r\n        !node.type.toLowerCase().includes(\"output\")\r\n      ) {\r\n        filteredEdges.push(edge);\r\n      }\r\n    });\r\n    return filteredEdges;\r\n  }\r\n\r\n  getConnectorEdges(nodeId: string): Edge[] {\r\n    var aspects = this.workspace.aspects.filter(\r\n      (x) => x.aspect === \"1\" && x.category === \"1\"\r\n    );\r\n    if (!aspects && aspects.length <= 0) return [];\r\n\r\n    const edges = aspects[0].graph.edges.filter(\r\n      (x) => x.to === nodeId && x.type === \"imfo:partOf\"\r\n    );\r\n    let filteredEdges: Edge[] = [];\r\n\r\n    // TODO: Use Typeregister\r\n    edges.forEach((edge) => {\r\n      const node = this.functionalNodeMap.get(edge.from);\r\n      if (\r\n        node &&\r\n        (node.type.toLowerCase().includes(\"input\") ||\r\n          node.type.toLowerCase().includes(\"output\"))\r\n      ) {\r\n        filteredEdges.push(edge);\r\n      }\r\n    });\r\n    return filteredEdges;\r\n  }\r\n\r\n  getFunctionalAspect(): Aspects[] {\r\n    return this.workspace.aspects.filter((x) => x.aspect === \"1\");\r\n  }\r\n\r\n  getProductAspect(): Aspects[] {\r\n    return this.workspace.aspects.filter((x) => x.aspect === \"2\");\r\n  }\r\n\r\n  getAreaAspect(): Aspects[] {\r\n    return this.workspace.aspects.filter((x) => x.aspect === \"3\");\r\n  }\r\n\r\n  getFunctionalAspectCategories(): CategoryDescriptor[] {\r\n    let functionalCategories: CategoryDescriptor[] = [];\r\n    const fAspect = this.getFunctionalAspect();\r\n    fAspect.forEach((aspect) => {\r\n      functionalCategories.push({\r\n        id: aspect.category,\r\n        name: aspect.descriptor.name,\r\n        description: aspect.descriptor.description,\r\n      });\r\n    });\r\n    return functionalCategories;\r\n  }\r\n\r\n  getProductAspectCategories(): CategoryDescriptor[] {\r\n    let productCategories: CategoryDescriptor[] = [];\r\n    const pAspect = this.getProductAspect();\r\n    pAspect.forEach((aspect) => {\r\n      productCategories.push({\r\n        id: aspect.category,\r\n        name: aspect.descriptor.name,\r\n        description: aspect.descriptor.description,\r\n      });\r\n    });\r\n    return productCategories;\r\n  }\r\n\r\n  getAreaAspectCategories(): CategoryDescriptor[] {\r\n    let areaCategories: CategoryDescriptor[] = [];\r\n    const aAspect = this.getAreaAspect();\r\n    aAspect.forEach((aspect) => {\r\n      areaCategories.push({\r\n        id: aspect.category,\r\n        name: aspect.descriptor.name,\r\n        description: aspect.descriptor.description,\r\n      });\r\n    });\r\n    if (!areaCategories || areaCategories.length <= 0) {\r\n      areaCategories.push({\r\n        id: null,\r\n        name: \"default\",\r\n        description: \"\",\r\n      });\r\n    }\r\n    return areaCategories;\r\n  }\r\n\r\n  // getNodesConnectedToRoot(aspectId: string): Node[] {\r\n  //     const aspectEdges: Edge[] = [];\r\n  //     const aspectNodes: Node[] = [];\r\n  //     const chosenAspect = this.workspace.aspects\r\n  // \t.filter(x => x.aspect === aspectId);\r\n\r\n  // \tchosenAspect.forEach(aspect => {\r\n  // \t\tif(aspect.graph.edges.filter(e => e.to === 'root' && e.type === 'imfo:partOf')){\r\n  // \t\t\taspectEdges.push({\r\n  // \t\t\t\tid: e.id;\r\n  // \t\t\t});\r\n  // \t\t}\r\n  // \t})\r\n\r\n  getConnectionEdges(nodeId: string): Connection[] {\r\n    var aspects = this.workspace.aspects.filter(\r\n      (x) => x.aspect === \"1\" && x.category === \"1\"\r\n    );\r\n\r\n    if (!aspects && aspects.length <= 0) return [];\r\n\r\n    const edges = aspects[0].graph.edges.filter(\r\n      (x) => x.to === nodeId && x.type !== \"imfo:partOf\"\r\n    );\r\n    let filteredConnections: Connection[] = [];\r\n\r\n    // TODO: Use Typeregister\r\n    edges.forEach((edge) => {\r\n      if (edge) {\r\n        var parent = aspects[0].graph.edges.filter(\r\n          (x) => x.from === edge.from && x.type === \"imfo:partOf\"\r\n        );\r\n\r\n        if (parent && parent.length > 0) {\r\n          filteredConnections.push({\r\n            id: edge.id,\r\n            type: edge.type,\r\n            from: parent[0].to,\r\n            to: edge.to,\r\n            connector: parent[0].id,\r\n          });\r\n        }\r\n      }\r\n    });\r\n\r\n    return filteredConnections;\r\n  }\r\n\r\n  getDiagram(nodeId: string): Diagram {\r\n    var aspects = this.workspace.aspects.filter(\r\n      (x) => x.aspect === \"1\" && x.category === \"1\"\r\n    );\r\n\r\n    if (!aspects && aspects.length <= 0) return null;\r\n\r\n    var diagram = new Diagram(\r\n      nodeId,\r\n      this.productNodeMap.get(nodeId)?.label ??\r\n        this.functionalNodeMap.get(nodeId)?.label ??\r\n        this.workspace.root.title\r\n    );\r\n    const nodeEdges = aspects[0].graph.edges.filter(\r\n      (x) =>\r\n        x.to === nodeId &&\r\n        x.type === \"imfo:partOf\" &&\r\n        !this.functionalNodeMap\r\n          .get(x.from)\r\n          .type.toLowerCase()\r\n          .includes(\"input\") &&\r\n        !this.functionalNodeMap\r\n          .get(x.from)\r\n          .type.toLowerCase()\r\n          .includes(\"output\")\r\n    );\r\n\r\n    diagram.nodes = nodeEdges.map((x) => {\r\n      const node = this.functionalNodeMap.get(x.from);\r\n      const label = this.productNodeMap.get(node.id)?.label ?? node.type;\r\n      const diagramNode = new DiagramNode(node.id, label);\r\n      diagramNode.connectors = this.getConnectors(node.id, aspects[0]);\r\n\r\n      diagram.connections = diagram.connections.concat(\r\n        this.getConnections(node.id, aspects[0], diagramNode.connectors)\r\n      );\r\n\r\n      return diagramNode;\r\n    });\r\n    return diagram;\r\n  }\r\n\r\n  getConnectors(nodeId: string, aspects: Aspects): DiagramConnector[] {\r\n    if (\r\n      !aspects &&\r\n      !aspects.graph &&\r\n      !aspects.graph.edges &&\r\n      aspects.graph.edges.length <= 0\r\n    )\r\n      return [];\r\n\r\n    const connectors = aspects.graph.edges\r\n      .filter(\r\n        (x) =>\r\n          x.to === nodeId &&\r\n          x.type === \"imfo:partOf\" &&\r\n          (this.functionalNodeMap\r\n            .get(x.from)\r\n            .type.toLowerCase()\r\n            .includes(\"input\") ||\r\n            this.functionalNodeMap\r\n              .get(x.from)\r\n              .type.toLowerCase()\r\n              .includes(\"output\") ||\r\n            this.functionalNodeMap\r\n              .get(x.from)\r\n              .type.toLowerCase()\r\n              .includes(\"supply\"))\r\n      )\r\n      .map((x) => {\r\n        const diagramType = this.functionalNodeMap\r\n          .get(x.from)\r\n          .type.toLowerCase()\r\n          .includes(\"input\")\r\n          ? (DIAGRAM_CONNECTOR_TYPE.TARGET as DiagramConnectorType)\r\n          : (DIAGRAM_CONNECTOR_TYPE.SOURCE as DiagramConnectorType);\r\n        const label = this.functionalNodeMap.get(x.from)?.type ?? x.type;\r\n        return new DiagramConnector(x.id, label, diagramType);\r\n      });\r\n    return connectors;\r\n  }\r\n\r\n  getConnections(\r\n    nodeId: string,\r\n    aspects: Aspects,\r\n    connectors: DiagramConnector[]\r\n  ): DiagramConnection[] {\r\n    if (\r\n      !aspects &&\r\n      !aspects.graph &&\r\n      !aspects.graph.edges &&\r\n      aspects.graph.edges.length <= 0\r\n    )\r\n      return [];\r\n\r\n    return aspects.graph.edges\r\n      .filter(\r\n        (x) =>\r\n          x.to === nodeId &&\r\n          Object.values(DIAGRAM_CONNECTION_TYPE).includes(x.type)\r\n      )\r\n      .map((x) => {\r\n        const sourceParentEdge = aspects.graph.edges.filter(\r\n          (e) => e.from === \"n2\" && e.type === \"imfo:partOf\"\r\n        )[0];\r\n        const targetConnector = connectors.filter(\r\n          (x) => x.type === DIAGRAM_CONNECTOR_TYPE.TARGET\r\n        )[0];\r\n        // TODO: This values must be dynamic\r\n        return new DiagramConnection(\r\n          x.id,\r\n          x.type,\r\n          sourceParentEdge.to,\r\n          \"e2\",\r\n          \"n4\",\r\n          targetConnector.id,\r\n          x.type as DiagramConnectionType\r\n        );\r\n      });\r\n  }\r\n\r\n  guid(): string {\r\n    function _p8(s: boolean) {\r\n      var p = (Math.random().toString(16) + \"000000000\").substr(2, 8);\r\n      return s ? \"-\" + p.substr(0, 4) + \"-\" + p.substr(4, 4) : p;\r\n    }\r\n    return _p8(false) + _p8(true) + _p8(true) + _p8(false);\r\n  }\r\n\r\n  getProxyNodes(aspect: Aspects) {\r\n    if (\r\n      !aspect &&\r\n      !aspect.graph &&\r\n      !aspect.graph.edges &&\r\n      aspect.graph.edges.length <= 0\r\n    )\r\n      return;\r\n\r\n    aspect.graph.nodes\r\n      .filter(\r\n        (x) =>\r\n          !x.type.toLowerCase().includes(\"input\") &&\r\n          !x.type.toLowerCase().includes(\"output\") &&\r\n          !x.type.toLowerCase().includes(\"pipeline\")\r\n      )\r\n      .forEach((n) => {\r\n        const sourceNodeId = this.guid();\r\n        const targetNodeId = this.guid();\r\n\r\n        aspect.graph.nodes.push({\r\n          id: sourceNodeId,\r\n          type: \"imfo:SupplyOutput\",\r\n          label: \"Supply output\",\r\n        });\r\n        aspect.graph.nodes.push({\r\n          id: targetNodeId,\r\n          type: \"imfo:SupplyInput\",\r\n          label: \"Supply input\",\r\n        });\r\n\r\n        aspect.graph.edges.push({\r\n          id: this.guid(),\r\n          type: \"imfo:partOf\",\r\n          from: sourceNodeId,\r\n          to: n.id,\r\n        });\r\n        aspect.graph.edges.push({\r\n          id: this.guid(),\r\n          type: \"imfo:partOf\",\r\n          from: targetNodeId,\r\n          to: n.id,\r\n        });\r\n      });\r\n  }\r\n}\r\n","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\home\\Home.tsx",["377"],"import { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useParams } from \"react-router\";\r\nimport { DiagramComponent, TreeviewComponent } from \"..\";\r\nimport { getWorkspace } from \"../../redux/store/workspace/actions\";\r\nimport { WorkspaceState } from \"../../redux/store/workspace/types\";\r\nimport { RootState } from \"./../../redux/store/index\";\r\nimport textResources from \"../../textResources\";\r\nimport { InspectorComponent } from \"../modules/inspectorModule\";\r\n// import { UserState } from \"../../store/user/types\";\r\n// import { SETTING_KEY, SETTING_VALUE } from \"./../../models/user\";\r\n// import { getUser } from \"../../store/user/actions\";\r\n\r\ninterface RouteParams {\r\n  type: string;\r\n}\r\n\r\nconst Home = () => {\r\n  const workspaceState = useSelector<RootState>(\r\n    (state) => state.workspace\r\n  ) as WorkspaceState;\r\n  // const userState = useSelector<RootState>((state) => state.user) as UserState;\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(getWorkspace());\r\n    // dispatch(getUser(\"rl\", \"rl\"));\r\n  }, [dispatch]);\r\n\r\n  const params = useParams<RouteParams>();\r\n  const isOnline =\r\n    workspaceState && workspaceState.workspace && !workspaceState.fetching;\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"explorer_view\">{textResources.Explorer_view}</div>\r\n      <div className=\"middle_content\">\r\n        <div className=\"workspace\">\r\n          {isOnline && (\r\n            <>\r\n              {params.type === \"treeview\" && (\r\n                <TreeviewComponent\r\n                  root={workspaceState.workspace.root}\r\n                  aspects={workspaceState.workspace.aspects}\r\n                  aspectDescriptors={workspaceState.workspace.aspectDescriptors}\r\n                />\r\n              )}\r\n              {params.type === \"diagram\" && (\r\n                <DiagramComponent\r\n                  root={workspaceState.workspace.root}\r\n                  aspects={workspaceState.workspace.aspects}\r\n                  aspectDescriptors={workspaceState.workspace.aspectDescriptors}\r\n                />\r\n              )}\r\n            </>\r\n          )}\r\n        </div>\r\n        {/* <div className=\"inspector\">\r\n          {textResources.Inspector}\r\n          <InspectorComponent />\r\n        </div> */}\r\n      </div>\r\n      <div className=\"library\">{textResources.Library}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\header\\Header.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\app\\App.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\DiagramComponent.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\nodetypes\\NodeTypeComponent.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\nodetypes\\NodeTypeOverview.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\toolbox\\ToolboxComponent.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\TreeviewComponent.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\models\\user\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\services\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\models\\diagram\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\models\\user\\types.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\models\\diagram\\Diagram.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\assets\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\TreeviewBody.tsx",["378","379","380","381","382"],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\TreeviewHeader.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\textResources.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\DiagramAddNodes.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\DiagramAddConnections.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\selectorNodes\\defaultSelectors\\DefaultSelectorNode.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\selectorNodes\\connectSelectors\\ConnectSelectorNode.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\selectorNodes\\defaultSelectors\\InputConnect.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\selectorNodes\\defaultSelectors\\OutputConnect.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\selectorNodes\\connectSelectors\\DataConnect.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\DrawMiniMap.tsx",["383"],"import { MiniMap, Node } from \"react-flow-renderer\";\r\n\r\nconst DrawMiniMap = () => {\r\n  let color: string;\r\n\r\n  return (\r\n    <MiniMap\r\n      nodeStrokeColor={(node: Node): string => {\r\n        return node.type === \"input\"\r\n          ? (color = \"#00041d0\")\r\n          : node.type === \"selectorNode\"\r\n          ? (color = \"#ccc\")\r\n          : node.type === \"output\"\r\n          ? (color = \"#ff0072\")\r\n          : (color = \"#eee\");\r\n      }}\r\n      nodeColor={(node: Node): string => {\r\n        return node.type === \"selectorNode\"\r\n          ? (color = \"#ccc\")\r\n          : (color = \"#fff\");\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default DrawMiniMap;\r\n","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\hooks\\useTreeviewChangeHandler.tsx",["384","385","386"],"import { useCallback } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../../store/index\";\r\n\r\nconst useTreeviewChangeHandler = () => {\r\n  // const aspectList = useSelector<RootState>((state) => state.workspace);\r\n\r\n  const test = \"one\";\r\n  console.log(test);\r\n  return test;\r\n};\r\n\r\nexport default useTreeviewChangeHandler;\r\n",["387","388"],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\workspace\\actions.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\workspace\\types.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\nodetypes\\actions.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\nodetypes\\types.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\nodetypes\\reducers.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\workspace\\reducers.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\user\\reducers.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\sagas\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\user\\types.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\sagas\\workspace\\saga.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\sagas\\user\\saga.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\sagas\\nodetype\\saga.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\testing\\getAspect.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\testing\\aspectReducer.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\InspectorComponent.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\InspectorContent.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\styled\\StyledInspectorComponent.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\styled\\StyledToggleButton.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\styled\\StyledHeader.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\hooks\\useInspectorChangeHandler.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\styled\\animated\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\styled\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\styled\\animated\\AnimatedToggleButton.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\styled\\animated\\AnimatedMenu.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\FragmentData.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\FragmentContent.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\styled\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\helpers\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\styled\\StyledInspectorContent.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\helpers\\GetTextResource.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\helpers\\GetColor.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\helpers\\GetContentData.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\aspect\\AspectDropdown.tsx",["389"],"import { CategoryDescriptor } from \"../../../models/workspace\";\r\nimport \"react-dropdown/style.css\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { getAspect } from \"../../../redux/testing/getAspect\";\r\n\r\ninterface Props {\r\n  id: string;\r\n  functional: CategoryDescriptor[];\r\n  product: CategoryDescriptor[];\r\n  location: CategoryDescriptor[];\r\n}\r\n\r\nconst AspectDropdown = ({ id, functional, product, location }: Props) => {\r\n  const dispatch = useDispatch();\r\n  const handleChange = (e) => {\r\n    const value = e.target.value;\r\n    dispatch(getAspect());\r\n  };\r\n\r\n  return (\r\n    <div className=\"aspect_category\">\r\n      <select onChange={handleChange} className=\"select_category\">\r\n        {id === \"1\"\r\n          ? functional.map((category) => (\r\n              <option key={category.id} value={category.name}>\r\n                {category.name}\r\n              </option>\r\n            ))\r\n          : id === \"2\"\r\n          ? product.map((category) => (\r\n              <option key={category.id} value={category.name}>\r\n                {category.name}\r\n              </option>\r\n            ))\r\n          : id === \"3\"\r\n          ? location.map((category) => (\r\n              <option key={category.id} value={category.name}>\r\n                {category.name}\r\n              </option>\r\n            ))\r\n          : null}\r\n      </select>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AspectDropdown;\r\n","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\aspect\\AspectInfo.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\aspect\\index.ts",[],["390","391"],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\flow\\dragAndDrop\\index.js",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\flow\\dragAndDrop\\Sidebar.js",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\flow\\layouting\\index.js",[],["392","393"],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\flow\\layouting\\initial-elements.js",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\inspector\\actions\\changeInspector.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\inspector\\reducer\\inspectorReducer.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\inspector\\reducer\\initialState.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\flow\\dragAndDrop\\helpers\\GetLabel.js",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\flow\\index.js",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\inspector\\inspectorReducer.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\inspector\\changeInspector.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\flow\\Sidebar.js",[],{"ruleId":"394","replacedBy":"395"},{"ruleId":"396","replacedBy":"397"},{"ruleId":"394","replacedBy":"395"},{"ruleId":"396","replacedBy":"397"},{"ruleId":"398","severity":1,"message":"399","line":6,"column":3,"nodeType":"400","messageId":"401","endLine":6,"endColumn":8},{"ruleId":"398","severity":1,"message":"402","line":8,"column":3,"nodeType":"400","messageId":"401","endLine":8,"endColumn":19},{"ruleId":"398","severity":1,"message":"403","line":21,"column":10,"nodeType":"400","messageId":"401","endLine":21,"endColumn":26},{"ruleId":"398","severity":1,"message":"404","line":22,"column":10,"nodeType":"400","messageId":"401","endLine":22,"endColumn":26},{"ruleId":"398","severity":1,"message":"405","line":23,"column":10,"nodeType":"400","messageId":"401","endLine":23,"endColumn":25},{"ruleId":"398","severity":1,"message":"406","line":9,"column":10,"nodeType":"400","messageId":"401","endLine":9,"endColumn":28},{"ruleId":"398","severity":1,"message":"407","line":1,"column":10,"nodeType":"400","messageId":"401","endLine":1,"endColumn":20},{"ruleId":"398","severity":1,"message":"408","line":1,"column":22,"nodeType":"400","messageId":"401","endLine":1,"endColumn":36},{"ruleId":"398","severity":1,"message":"409","line":19,"column":9,"nodeType":"400","messageId":"401","endLine":19,"endColumn":13},{"ruleId":"398","severity":1,"message":"410","line":20,"column":9,"nodeType":"400","messageId":"401","endLine":20,"endColumn":13},{"ruleId":"398","severity":1,"message":"411","line":21,"column":9,"nodeType":"400","messageId":"401","endLine":21,"endColumn":13},{"ruleId":"398","severity":1,"message":"412","line":20,"column":14,"nodeType":"400","messageId":"401","endLine":20,"endColumn":19},{"ruleId":"398","severity":1,"message":"413","line":1,"column":10,"nodeType":"400","messageId":"401","endLine":1,"endColumn":21},{"ruleId":"398","severity":1,"message":"414","line":2,"column":10,"nodeType":"400","messageId":"401","endLine":2,"endColumn":21},{"ruleId":"398","severity":1,"message":"415","line":3,"column":10,"nodeType":"400","messageId":"401","endLine":3,"endColumn":19},{"ruleId":"394","replacedBy":"416"},{"ruleId":"396","replacedBy":"417"},{"ruleId":"398","severity":1,"message":"418","line":16,"column":11,"nodeType":"400","messageId":"401","endLine":16,"endColumn":16},{"ruleId":"394","replacedBy":"419"},{"ruleId":"396","replacedBy":"420"},{"ruleId":"394","replacedBy":"421"},{"ruleId":"396","replacedBy":"422"},"no-native-reassign",["423"],"no-negated-in-lhs",["424"],"@typescript-eslint/no-unused-vars","'Graph' is defined but never used.","Identifier","unusedVar","'AspectDescriptor' is defined but never used.","'AspectRatioSharp' is defined but never used.","'brotliDecompress' is defined but never used.","'nodetypeReducer' is defined but never used.","'InspectorComponent' is defined but never used.","'AspectInfo' is defined but never used.","'AspectDropdown' is defined but never used.","'fcat' is assigned a value but never used.","'pcat' is assigned a value but never used.","'acat' is assigned a value but never used.","'color' is assigned a value but never used.","'useCallback' is defined but never used.","'useSelector' is defined but never used.","'RootState' is defined but never used.",["423"],["424"],"'value' is assigned a value but never used.",["423"],["424"],["423"],["424"],"no-global-assign","no-unsafe-negation"]
>>>>>>> 0c73d83 (Add flow elements)
