[{"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\index.tsx":"1","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\index.ts":"2","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\index.ts":"3","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\app\\index.ts":"4","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\home\\index.ts":"5","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\toolbox\\index.ts":"6","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\nodetypes\\index.ts":"7","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\index.ts":"8","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\header\\index.ts":"9","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\index.ts":"10","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\app\\App.tsx":"11","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\TreeviewBody.tsx":"12","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\TreeviewComponent.tsx":"13","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\TreeviewHeader.tsx":"14","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\home\\Home.tsx":"15","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\toolbox\\ToolboxComponent.tsx":"16","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\nodetypes\\NodeTypeComponent.tsx":"17","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\header\\Header.tsx":"18","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\nodetypes\\NodeTypeOverview.tsx":"19","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\DiagramComponent.tsx":"20","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\DiagramAddConnections.tsx":"21","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\DiagramAddNodes.tsx":"22","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\aspect\\AspectInfo.tsx":"23","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\aspect\\AspectDropdown.tsx":"24","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\services\\workspaceService.ts":"25","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\workspace\\actions.ts":"26","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\nodetypes\\actions.ts":"27","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\textResources.tsx":"28","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\testing\\getAspect.tsx":"29","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\selectorNodes\\defaultSelectors\\DefaultSelectorNode.tsx":"30","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\selectorNodes\\connectSelectors\\ConnectSelectorNode.tsx":"31","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\flow\\dragAndDrop\\index.js":"32","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\workspace\\types.ts":"33","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\services\\index.ts":"34","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\nodetypes\\types.ts":"35","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\assets\\index.ts":"36","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\index.ts":"37","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\selectorNodes\\defaultSelectors\\InputConnect.tsx":"38","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\selectorNodes\\defaultSelectors\\OutputConnect.tsx":"39","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\selectorNodes\\connectSelectors\\DataConnect.tsx":"40","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\testing\\aspectReducer.tsx":"41","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\flow\\dragAndDrop\\Sidebar.js":"42","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\models\\diagram\\index.ts":"43","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\InspectorHeader.tsx":"44","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\InspectorComponent.tsx":"45","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\models\\diagram\\Diagram.ts":"46","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\ToggleBox.tsx":"47","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\styled\\animated\\index.ts":"48","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\styled\\index.ts":"49","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\hooks\\useInspectorToggleChangeHandler.tsx":"50","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\styled\\animated\\AnimatedMenu.tsx":"51","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\styled\\animated\\AnimatedToggleButton.tsx":"52","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\styled\\FragmentHeader.ts":"53","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\styled\\StyledInput.tsx":"54","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\styled\\StyledParagraph.tsx":"55","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\styled\\StyledContainer.tsx":"56","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\styled\\StyledColumn.tsx":"57","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\styled\\StyledInspectorTitle.tsx":"58","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\styled\\ToggleInspectorIcon.tsx":"59","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\styled\\StyledToggleBox.tsx":"60","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\styled\\FragmentDataWrapper.tsx":"61","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\styled\\FragmentHeaderWrapper.tsx":"62","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\inspector\\actions\\changeToggleInspector.tsx":"63","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\styled\\index.ts":"64","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\index.ts":"65","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\inspector\\reducers\\showInspectorReducer.tsx":"66","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\styled\\StyledInspectorComponent.tsx":"67","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\styled\\StyledToggleButton.tsx":"68","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\FragmentData.tsx":"69","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\FragmentContent.tsx":"70","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\hooks\\useInspectorChangeHandler.tsx":"71","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\helpers\\index.ts":"72","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\inspector\\actions\\changeInspector.tsx":"73","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\helpers\\GetContentData.tsx":"74","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\helpers\\GetTextResource.tsx":"75","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\helpers\\GetColor.tsx":"76","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\inspector\\reducers\\inspectorReducer.tsx":"77","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\workspace\\reducers.ts":"78","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\nodetypes\\reducers.ts":"79","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\user\\reducers.ts":"80","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\user\\types.ts":"81","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\sagas\\index.ts":"82","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\sagas\\workspace\\saga.ts":"83","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\sagas\\user\\saga.ts":"84","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\sagas\\nodetype\\saga.ts":"85","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\data\\WorkspaceDataset.js":"86","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\data\\UserDataset.js":"87","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\data\\NodeTypeDataset.js":"88","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\models\\user\\index.ts":"89","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\models\\user\\types.ts":"90","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\aspect\\index.ts":"91"},{"size":511,"mtime":1615884814509,"results":"92","hashOfConfig":"93"},{"size":1195,"mtime":1616631181614,"results":"94","hashOfConfig":"93"},{"size":367,"mtime":1616630361348,"results":"95","hashOfConfig":"93"},{"size":56,"mtime":1615884814467,"results":"96","hashOfConfig":"93"},{"size":58,"mtime":1615384119007,"results":"97","hashOfConfig":"93"},{"size":73,"mtime":1615384119013,"results":"98","hashOfConfig":"93"},{"size":131,"mtime":1615384119010,"results":"99","hashOfConfig":"93"},{"size":329,"mtime":1616630247686,"results":"100","hashOfConfig":"93"},{"size":63,"mtime":1615384119006,"results":"101","hashOfConfig":"93"},{"size":215,"mtime":1615884814472,"results":"102","hashOfConfig":"93"},{"size":333,"mtime":1616607032091,"results":"103","hashOfConfig":"93"},{"size":1367,"mtime":1616631405042,"results":"104","hashOfConfig":"93"},{"size":589,"mtime":1616630554004,"results":"105","hashOfConfig":"93"},{"size":187,"mtime":1616075917914,"results":"106","hashOfConfig":"93"},{"size":2321,"mtime":1616630247584,"results":"107","hashOfConfig":"93"},{"size":354,"mtime":1615884814497,"results":"108","hashOfConfig":"93"},{"size":476,"mtime":1615884814495,"results":"109","hashOfConfig":"93"},{"size":1392,"mtime":1615884814493,"results":"110","hashOfConfig":"93"},{"size":983,"mtime":1615884814496,"results":"111","hashOfConfig":"93"},{"size":3263,"mtime":1616630415269,"results":"112","hashOfConfig":"93"},{"size":516,"mtime":1616445333196,"results":"113","hashOfConfig":"93"},{"size":572,"mtime":1616445233098,"results":"114","hashOfConfig":"93"},{"size":516,"mtime":1616630247718,"results":"115","hashOfConfig":"93"},{"size":1391,"mtime":1616630247719,"results":"116","hashOfConfig":"93"},{"size":11954,"mtime":1615884814523,"results":"117","hashOfConfig":"93"},{"size":342,"mtime":1615884814519,"results":"118","hashOfConfig":"93"},{"size":342,"mtime":1615884814516,"results":"119","hashOfConfig":"93"},{"size":783,"mtime":1616630247621,"results":"120","hashOfConfig":"93"},{"size":278,"mtime":1615887694260,"results":"121","hashOfConfig":"93"},{"size":888,"mtime":1616493014694,"results":"122","hashOfConfig":"93"},{"size":528,"mtime":1615884814474,"results":"123","hashOfConfig":"93"},{"size":2127,"mtime":1616631388891,"results":"124","hashOfConfig":"93"},{"size":716,"mtime":1615884814520,"results":"125","hashOfConfig":"93"},{"size":56,"mtime":1615884814522,"results":"126","hashOfConfig":"93"},{"size":752,"mtime":1615884814517,"results":"127","hashOfConfig":"93"},{"size":210,"mtime":1615943687001,"results":"128","hashOfConfig":"93"},{"size":136,"mtime":1616630247601,"results":"129","hashOfConfig":"93"},{"size":676,"mtime":1616630415270,"results":"130","hashOfConfig":"93"},{"size":614,"mtime":1615884814491,"results":"131","hashOfConfig":"93"},{"size":673,"mtime":1615884814478,"results":"132","hashOfConfig":"93"},{"size":494,"mtime":1615930158637,"results":"133","hashOfConfig":"93"},{"size":1362,"mtime":1616631438441,"results":"134","hashOfConfig":"93"},{"size":26,"mtime":1615384119030,"results":"135","hashOfConfig":"93"},{"size":504,"mtime":1616630247587,"results":"136","hashOfConfig":"93"},{"size":820,"mtime":1616630247586,"results":"137","hashOfConfig":"93"},{"size":2558,"mtime":1615884814510,"results":"138","hashOfConfig":"93"},{"size":1012,"mtime":1616630247588,"results":"139","hashOfConfig":"93"},{"size":134,"mtime":1615990840618,"results":"140","hashOfConfig":"93"},{"size":672,"mtime":1616630247599,"results":"141","hashOfConfig":"93"},{"size":432,"mtime":1616630247600,"results":"142","hashOfConfig":"93"},{"size":413,"mtime":1615990840616,"results":"143","hashOfConfig":"93"},{"size":459,"mtime":1616630247604,"results":"144","hashOfConfig":"93"},{"size":1055,"mtime":1616630247593,"results":"145","hashOfConfig":"93"},{"size":234,"mtime":1616630247596,"results":"146","hashOfConfig":"93"},{"size":152,"mtime":1616630247597,"results":"147","hashOfConfig":"93"},{"size":208,"mtime":1616630247595,"results":"148","hashOfConfig":"93"},{"size":152,"mtime":1616630247594,"results":"149","hashOfConfig":"93"},{"size":206,"mtime":1616630247596,"results":"150","hashOfConfig":"93"},{"size":606,"mtime":1616630247598,"results":"151","hashOfConfig":"93"},{"size":254,"mtime":1616630247598,"results":"152","hashOfConfig":"93"},{"size":349,"mtime":1616630247592,"results":"153","hashOfConfig":"93"},{"size":329,"mtime":1616630247594,"results":"154","hashOfConfig":"93"},{"size":241,"mtime":1616630247615,"results":"155","hashOfConfig":"93"},{"size":154,"mtime":1616532538448,"results":"156","hashOfConfig":"93"},{"size":124,"mtime":1616625469917,"results":"157","hashOfConfig":"93"},{"size":596,"mtime":1616630247618,"results":"158","hashOfConfig":"93"},{"size":373,"mtime":1616630247602,"results":"159","hashOfConfig":"93"},{"size":630,"mtime":1616630247603,"results":"160","hashOfConfig":"93"},{"size":855,"mtime":1616632264381,"results":"161","hashOfConfig":"93"},{"size":1138,"mtime":1616632195991,"results":"162","hashOfConfig":"93"},{"size":621,"mtime":1616629915746,"results":"163","hashOfConfig":"93"},{"size":179,"mtime":1616074562583,"results":"164","hashOfConfig":"93"},{"size":396,"mtime":1616630589282,"results":"165","hashOfConfig":"93"},{"size":2905,"mtime":1616630247591,"results":"166","hashOfConfig":"93"},{"size":477,"mtime":1616074562583,"results":"167","hashOfConfig":"93"},{"size":191,"mtime":1616630415303,"results":"168","hashOfConfig":"93"},{"size":900,"mtime":1616630247617,"results":"169","hashOfConfig":"93"},{"size":747,"mtime":1615884814520,"results":"170","hashOfConfig":"93"},{"size":773,"mtime":1616630415272,"results":"171","hashOfConfig":"93"},{"size":824,"mtime":1615884814518,"results":"172","hashOfConfig":"93"},{"size":692,"mtime":1615884814518,"results":"173","hashOfConfig":"93"},{"size":578,"mtime":1615884814512,"results":"174","hashOfConfig":"93"},{"size":1409,"mtime":1615884814514,"results":"175","hashOfConfig":"93"},{"size":1136,"mtime":1615884814514,"results":"176","hashOfConfig":"93"},{"size":1009,"mtime":1615884814513,"results":"177","hashOfConfig":"93"},{"size":7908,"mtime":1616630247612,"results":"178","hashOfConfig":"93"},{"size":723,"mtime":1615884814508,"results":"179","hashOfConfig":"93"},{"size":330,"mtime":1615884814507,"results":"180","hashOfConfig":"93"},{"size":24,"mtime":1615384119031,"results":"181","hashOfConfig":"93"},{"size":284,"mtime":1615884814511,"results":"182","hashOfConfig":"93"},{"size":118,"mtime":1616630247686,"results":"183","hashOfConfig":"93"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},"127lrwc",{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"186"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"186"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"186"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"186"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"253"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"253"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"328","messages":"329","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"330","messages":"331","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"332","messages":"333","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"336","messages":"337","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"344","messages":"345","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"346","messages":"347","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"348","messages":"349","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"350","messages":"351","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"354","messages":"355","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"356","messages":"357","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"253"},{"filePath":"362","messages":"363","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"253"},{"filePath":"364","messages":"365","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"253"},{"filePath":"366","messages":"367","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"368","messages":"369","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"370","messages":"371","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\index.tsx",[],["372","373"],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\app\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\home\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\toolbox\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\nodetypes\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\header\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\app\\App.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\TreeviewBody.tsx",["374","375","376","377","378"],"import { AspectInfo, AspectDropdown } from \"./aspect\";\r\nimport { WorkspaceService } from \"../../services\";\r\nimport DnDFlow from \"./flow/dragAndDrop\";\r\nimport {\r\n  AspectDescriptor,\r\n  Aspects,\r\n  Root,\r\n  Workspace,\r\n} from \"../../models/workspace\";\r\n\r\ninterface Props extends Workspace {\r\n  aspectDescriptors: AspectDescriptor[];\r\n  root: Root;\r\n  aspects: Aspects[];\r\n}\r\n\r\nconst TreeviewBody = ({ aspectDescriptors, root, aspects }: Props) => {\r\n  const service = new WorkspaceService({ root, aspects, aspectDescriptors });\r\n  const fcat = service.getFunctionalAspectCategories();\r\n  const pcat = service.getProductAspectCategories();\r\n  const acat = service.getAreaAspectCategories();\r\n  // const fgraph = service.getNodesConnectedToRoot('1');\r\n\r\n  return (\r\n    <>\r\n      <DnDFlow />\r\n    </>\r\n\r\n    /***  ORIGINAL DROPDOWNS ***/\r\n    // <div className=\"aspects_container\">\r\n    //   {aspectDescriptors.map((aspect) => (\r\n    //     <div key={aspect.id} className=\"aspect_container\">\r\n    //       <AspectInfo id={aspect.id} name={aspect.name} />\r\n    //       <AspectDropdown\r\n    //         id={aspect.id}\r\n    //         functional={fcat}\r\n    //         product={pcat}\r\n    //         location={acat}\r\n    //       />\r\n    //       <div className=\"aspect_view\"></div>\r\n    //     </div>\r\n    //   ))}\r\n    // </div>\r\n  );\r\n};\r\n\r\nexport default TreeviewBody;\r\n","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\TreeviewComponent.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\TreeviewHeader.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\home\\Home.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\toolbox\\ToolboxComponent.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\nodetypes\\NodeTypeComponent.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\header\\Header.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\nodetypes\\NodeTypeOverview.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\DiagramComponent.tsx",["379","380"],"/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { FC, useEffect, useState, MouseEvent } from \"react\";\r\nimport ReactFlow, {\r\n  removeElements,\r\n  addEdge,\r\n  Controls,\r\n  FlowElement,\r\n  Elements,\r\n  SnapGrid,\r\n  Connection,\r\n  Edge,\r\n  ArrowHeadType,\r\n} from \"react-flow-renderer\";\r\n\r\nimport DefaultSelectorNode from \"./selectorNodes/defaultSelectors/DefaultSelectorNode\";\r\nimport ConnectSelectorNode from \"./selectorNodes/connectSelectors/ConnectSelectorNode\";\r\nimport { Workspace } from \"../../models/workspace\";\r\nimport { WorkspaceService } from \"./../../services/workspaceService\";\r\nimport { DiagramAddNodes, DiagramAddConnections } from \"./\";\r\nimport DrawMiniMap from \"./DrawMiniMap\";\r\n\r\nlet clickTimeout = null;\r\n\r\n// const onLoad = (reactFlowInstance: OnLoadParams) => console.log('flow loaded:', reactFlowInstance);\r\n// const onNodeDragStop = (_: MouseEvent, node: Node) => console.log('drag stop', node);\r\n\r\nconst onElementClick = (e: MouseEvent, element: FlowElement) => {\r\n  if (clickTimeout !== null) {\r\n    clearTimeout(clickTimeout);\r\n    clickTimeout = null;\r\n  } else {\r\n    clickTimeout = setTimeout(() => {\r\n      clearTimeout(clickTimeout);\r\n      clickTimeout = null;\r\n    }, 2000);\r\n  }\r\n};\r\n\r\nconst connectionLineStyle = { stroke: \"#888\" };\r\nconst snapGrid: SnapGrid = [16, 16];\r\nconst nodeTypes = {\r\n  selectorNode: DefaultSelectorNode,\r\n  connectorNode: ConnectSelectorNode,\r\n};\r\n\r\nconst DiagramComponent: FC<Workspace> = ({\r\n  root,\r\n  aspects,\r\n  aspectDescriptors,\r\n}: Workspace) => {\r\n  const defaultZoomFactor = 1.5;\r\n  const [elements, setElements] = useState<Elements>([]);\r\n  const service = new WorkspaceService({ root, aspects, aspectDescriptors });\r\n\r\n  useEffect(() => {\r\n    setElements((els) =>\r\n      els.map((e) => {\r\n        return e;\r\n      })\r\n    );\r\n\r\n    const initialElements: Elements = [];\r\n    const diagram = service.getDiagram(\"root\");\r\n\r\n    DiagramAddNodes(diagram, initialElements);\r\n    DiagramAddConnections(diagram, initialElements, ArrowHeadType);\r\n\r\n    setElements(initialElements);\r\n  }, []);\r\n\r\n  const onElementsRemove = (elementsToRemove: Elements) =>\r\n    setElements((els) => removeElements(elementsToRemove, els));\r\n\r\n  const onConnect = (params: Connection | Edge) =>\r\n    setElements((els) => {\r\n      const node = service.functionalNodeMap.get(\r\n        service.functionalEdgeMap.get(params.sourceHandle)?.from\r\n      );\r\n      return addEdge(\r\n        {\r\n          ...params,\r\n          animated: true,\r\n          arrowHeadType: ArrowHeadType.ArrowClosed,\r\n          label: node.label,\r\n          style: { stroke: \"#888\" },\r\n        },\r\n        els\r\n      );\r\n    });\r\n\r\n  return (\r\n    <>\r\n      <ReactFlow\r\n        elements={elements}\r\n        onElementClick={onElementClick}\r\n        onElementsRemove={onElementsRemove}\r\n        onConnect={onConnect}\r\n        nodeTypes={nodeTypes}\r\n        connectionLineStyle={connectionLineStyle}\r\n        snapToGrid={true}\r\n        snapGrid={snapGrid}\r\n        defaultZoom={defaultZoomFactor}\r\n      >\r\n        {/* {DrawMiniMap()} */}\r\n        <hr className=\"divider divider--left\" />\r\n        <hr className=\"divider divider--right\" />\r\n        {/* <Controls /> */}\r\n      </ReactFlow>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DiagramComponent;\r\n","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\DiagramAddConnections.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\DiagramAddNodes.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\aspect\\AspectInfo.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\aspect\\AspectDropdown.tsx",["381"],"import { CategoryDescriptor } from \"../../../models/workspace\";\r\nimport \"react-dropdown/style.css\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { getAspect } from \"../../../redux/testing/getAspect\";\r\n\r\ninterface Props {\r\n  id: string;\r\n  functional: CategoryDescriptor[];\r\n  product: CategoryDescriptor[];\r\n  location: CategoryDescriptor[];\r\n}\r\n\r\nconst AspectDropdown = ({ id, functional, product, location }: Props) => {\r\n  const dispatch = useDispatch();\r\n  const handleChange = (e) => {\r\n    const value = e.target.value;\r\n    dispatch(getAspect());\r\n  };\r\n\r\n  return (\r\n    <div className=\"aspect_category\">\r\n      <select onChange={handleChange} className=\"select_category\">\r\n        {id === \"1\"\r\n          ? functional.map((category) => (\r\n              <option key={category.id} value={category.name}>\r\n                {category.name}\r\n              </option>\r\n            ))\r\n          : id === \"2\"\r\n          ? product.map((category) => (\r\n              <option key={category.id} value={category.name}>\r\n                {category.name}\r\n              </option>\r\n            ))\r\n          : id === \"3\"\r\n          ? location.map((category) => (\r\n              <option key={category.id} value={category.name}>\r\n                {category.name}\r\n              </option>\r\n            ))\r\n          : null}\r\n      </select>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AspectDropdown;\r\n","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\services\\workspaceService.ts",["382","383","384","385","386"],"import {\r\n  Workspace,\r\n  Node,\r\n  Edge,\r\n  Aspects,\r\n  Graph,\r\n  CategoryDescriptor,\r\n  AspectDescriptor,\r\n  Connection,\r\n} from \"../models/workspace\";\r\nimport {\r\n  Diagram,\r\n  DiagramNode,\r\n  DiagramConnector,\r\n  DiagramConnectorType,\r\n  DiagramConnectionType,\r\n  DiagramConnection,\r\n  DIAGRAM_CONNECTOR_TYPE,\r\n  DIAGRAM_CONNECTION_TYPE,\r\n} from \"./../models/diagram\";\r\nimport { AspectRatioSharp } from \"@material-ui/icons\";\r\nimport { brotliDecompress } from \"zlib\";\r\nimport { nodetypeReducer } from \"../redux/store/nodetypes/reducers\";\r\n\r\nexport class WorkspaceService {\r\n  private workspace: Workspace;\r\n  functionalNodeMap: Map<string, Node>;\r\n  productNodeMap: Map<string, Node>;\r\n  functionalEdgeMap: Map<string, Edge>;\r\n  productEdgeMap: Map<string, Edge>;\r\n\r\n  proxyNodeMap: Map<string, Node>;\r\n  proxyEdgeMap: Map<string, Edge>;\r\n\r\n  constructor(workspace: Workspace) {\r\n    this.workspace = workspace;\r\n    this.functionalNodeMap = this.createNodeMap(\"1\", \"1\");\r\n    this.productNodeMap = this.createNodeMap(\"2\", \"1\");\r\n    this.functionalEdgeMap = this.createEdgeMap(\"1\", \"1\");\r\n    this.productEdgeMap = this.createEdgeMap(\"2\", \"1\");\r\n    this.proxyNodeMap = new Map<string, Node>();\r\n    this.proxyEdgeMap = new Map<string, Edge>();\r\n  }\r\n\r\n  createNodeMap(aspect: string, category: string): Map<string, Node> {\r\n    var aspects = this.workspace.aspects.filter(\r\n      (x) => x.aspect === aspect && x.category === category\r\n    );\r\n    if (!aspects && aspects.length <= 0) return new Map<string, Node>();\r\n\r\n    return new Map(\r\n      aspects[0].graph.nodes.map((obj) => [obj.id, obj] as [string, Node])\r\n    );\r\n  }\r\n\r\n  createEdgeMap(aspect: string, category: string): Map<string, Edge> {\r\n    var aspects = this.workspace.aspects.filter(\r\n      (x) => x.aspect === aspect && x.category === category\r\n    );\r\n    if (!aspects && aspects.length <= 0) return new Map<string, Edge>();\r\n\r\n    return new Map(\r\n      aspects[0].graph.edges.map((obj) => [obj.id, obj] as [string, Edge])\r\n    );\r\n  }\r\n\r\n  getProductLabel(nodeId: string): string {\r\n    var actualProductnode = this.productNodeMap.get(nodeId);\r\n    if (actualProductnode) {\r\n      return actualProductnode.label;\r\n    }\r\n\r\n    const actualNode = this.functionalNodeMap.get(nodeId);\r\n\r\n    if (!actualNode) return \"\";\r\n\r\n    // TODO: Use Typeregister\r\n    if (actualNode.type === \"imft:Reservoir\") return \"Reservoir\";\r\n  }\r\n\r\n  getRootEdges(nodeId: string): Edge[] {\r\n    var aspects = this.workspace.aspects.filter(\r\n      (x) => x.aspect === \"1\" && x.category === \"1\"\r\n    );\r\n    if (!aspects && aspects.length <= 0) return [];\r\n\r\n    const edges = aspects[0].graph.edges.filter(\r\n      (x) => x.to === nodeId && x.type === \"imfo:partOf\"\r\n    );\r\n    let filteredEdges: Edge[] = [];\r\n\r\n    // TODO: Use Typeregister\r\n    edges.forEach((edge) => {\r\n      const node = this.functionalNodeMap.get(edge.from);\r\n      if (\r\n        node &&\r\n        !node.type.toLowerCase().includes(\"input\") &&\r\n        !node.type.toLowerCase().includes(\"output\")\r\n      ) {\r\n        filteredEdges.push(edge);\r\n      }\r\n    });\r\n    return filteredEdges;\r\n  }\r\n\r\n  getConnectorEdges(nodeId: string): Edge[] {\r\n    var aspects = this.workspace.aspects.filter(\r\n      (x) => x.aspect === \"1\" && x.category === \"1\"\r\n    );\r\n    if (!aspects && aspects.length <= 0) return [];\r\n\r\n    const edges = aspects[0].graph.edges.filter(\r\n      (x) => x.to === nodeId && x.type === \"imfo:partOf\"\r\n    );\r\n    let filteredEdges: Edge[] = [];\r\n\r\n    // TODO: Use Typeregister\r\n    edges.forEach((edge) => {\r\n      const node = this.functionalNodeMap.get(edge.from);\r\n      if (\r\n        node &&\r\n        (node.type.toLowerCase().includes(\"input\") ||\r\n          node.type.toLowerCase().includes(\"output\"))\r\n      ) {\r\n        filteredEdges.push(edge);\r\n      }\r\n    });\r\n    return filteredEdges;\r\n  }\r\n\r\n  getFunctionalAspect(): Aspects[] {\r\n    return this.workspace.aspects.filter((x) => x.aspect === \"1\");\r\n  }\r\n\r\n  getProductAspect(): Aspects[] {\r\n    return this.workspace.aspects.filter((x) => x.aspect === \"2\");\r\n  }\r\n\r\n  getAreaAspect(): Aspects[] {\r\n    return this.workspace.aspects.filter((x) => x.aspect === \"3\");\r\n  }\r\n\r\n  getFunctionalAspectCategories(): CategoryDescriptor[] {\r\n    let functionalCategories: CategoryDescriptor[] = [];\r\n    const fAspect = this.getFunctionalAspect();\r\n    fAspect.forEach((aspect) => {\r\n      functionalCategories.push({\r\n        id: aspect.category,\r\n        name: aspect.descriptor.name,\r\n        description: aspect.descriptor.description,\r\n      });\r\n    });\r\n    return functionalCategories;\r\n  }\r\n\r\n  getProductAspectCategories(): CategoryDescriptor[] {\r\n    let productCategories: CategoryDescriptor[] = [];\r\n    const pAspect = this.getProductAspect();\r\n    pAspect.forEach((aspect) => {\r\n      productCategories.push({\r\n        id: aspect.category,\r\n        name: aspect.descriptor.name,\r\n        description: aspect.descriptor.description,\r\n      });\r\n    });\r\n    return productCategories;\r\n  }\r\n\r\n  getAreaAspectCategories(): CategoryDescriptor[] {\r\n    let areaCategories: CategoryDescriptor[] = [];\r\n    const aAspect = this.getAreaAspect();\r\n    aAspect.forEach((aspect) => {\r\n      areaCategories.push({\r\n        id: aspect.category,\r\n        name: aspect.descriptor.name,\r\n        description: aspect.descriptor.description,\r\n      });\r\n    });\r\n    if (!areaCategories || areaCategories.length <= 0) {\r\n      areaCategories.push({\r\n        id: null,\r\n        name: \"default\",\r\n        description: \"\",\r\n      });\r\n    }\r\n    return areaCategories;\r\n  }\r\n\r\n  // getNodesConnectedToRoot(aspectId: string): Node[] {\r\n  //     const aspectEdges: Edge[] = [];\r\n  //     const aspectNodes: Node[] = [];\r\n  //     const chosenAspect = this.workspace.aspects\r\n  // \t.filter(x => x.aspect === aspectId);\r\n\r\n  // \tchosenAspect.forEach(aspect => {\r\n  // \t\tif(aspect.graph.edges.filter(e => e.to === 'root' && e.type === 'imfo:partOf')){\r\n  // \t\t\taspectEdges.push({\r\n  // \t\t\t\tid: e.id;\r\n  // \t\t\t});\r\n  // \t\t}\r\n  // \t})\r\n\r\n  getConnectionEdges(nodeId: string): Connection[] {\r\n    var aspects = this.workspace.aspects.filter(\r\n      (x) => x.aspect === \"1\" && x.category === \"1\"\r\n    );\r\n\r\n    if (!aspects && aspects.length <= 0) return [];\r\n\r\n    const edges = aspects[0].graph.edges.filter(\r\n      (x) => x.to === nodeId && x.type !== \"imfo:partOf\"\r\n    );\r\n    let filteredConnections: Connection[] = [];\r\n\r\n    // TODO: Use Typeregister\r\n    edges.forEach((edge) => {\r\n      if (edge) {\r\n        var parent = aspects[0].graph.edges.filter(\r\n          (x) => x.from === edge.from && x.type === \"imfo:partOf\"\r\n        );\r\n\r\n        if (parent && parent.length > 0) {\r\n          filteredConnections.push({\r\n            id: edge.id,\r\n            type: edge.type,\r\n            from: parent[0].to,\r\n            to: edge.to,\r\n            connector: parent[0].id,\r\n          });\r\n        }\r\n      }\r\n    });\r\n\r\n    return filteredConnections;\r\n  }\r\n\r\n  getDiagram(nodeId: string): Diagram {\r\n    var aspects = this.workspace.aspects.filter(\r\n      (x) => x.aspect === \"1\" && x.category === \"1\"\r\n    );\r\n\r\n    if (!aspects && aspects.length <= 0) return null;\r\n\r\n    var diagram = new Diagram(\r\n      nodeId,\r\n      this.productNodeMap.get(nodeId)?.label ??\r\n        this.functionalNodeMap.get(nodeId)?.label ??\r\n        this.workspace.root.title\r\n    );\r\n    const nodeEdges = aspects[0].graph.edges.filter(\r\n      (x) =>\r\n        x.to === nodeId &&\r\n        x.type === \"imfo:partOf\" &&\r\n        !this.functionalNodeMap\r\n          .get(x.from)\r\n          .type.toLowerCase()\r\n          .includes(\"input\") &&\r\n        !this.functionalNodeMap\r\n          .get(x.from)\r\n          .type.toLowerCase()\r\n          .includes(\"output\")\r\n    );\r\n\r\n    diagram.nodes = nodeEdges.map((x) => {\r\n      const node = this.functionalNodeMap.get(x.from);\r\n      const label = this.productNodeMap.get(node.id)?.label ?? node.type;\r\n      const diagramNode = new DiagramNode(node.id, label);\r\n      diagramNode.connectors = this.getConnectors(node.id, aspects[0]);\r\n\r\n      diagram.connections = diagram.connections.concat(\r\n        this.getConnections(node.id, aspects[0], diagramNode.connectors)\r\n      );\r\n\r\n      return diagramNode;\r\n    });\r\n    return diagram;\r\n  }\r\n\r\n  getConnectors(nodeId: string, aspects: Aspects): DiagramConnector[] {\r\n    if (\r\n      !aspects &&\r\n      !aspects.graph &&\r\n      !aspects.graph.edges &&\r\n      aspects.graph.edges.length <= 0\r\n    )\r\n      return [];\r\n\r\n    const connectors = aspects.graph.edges\r\n      .filter(\r\n        (x) =>\r\n          x.to === nodeId &&\r\n          x.type === \"imfo:partOf\" &&\r\n          (this.functionalNodeMap\r\n            .get(x.from)\r\n            .type.toLowerCase()\r\n            .includes(\"input\") ||\r\n            this.functionalNodeMap\r\n              .get(x.from)\r\n              .type.toLowerCase()\r\n              .includes(\"output\") ||\r\n            this.functionalNodeMap\r\n              .get(x.from)\r\n              .type.toLowerCase()\r\n              .includes(\"supply\"))\r\n      )\r\n      .map((x) => {\r\n        const diagramType = this.functionalNodeMap\r\n          .get(x.from)\r\n          .type.toLowerCase()\r\n          .includes(\"input\")\r\n          ? (DIAGRAM_CONNECTOR_TYPE.TARGET as DiagramConnectorType)\r\n          : (DIAGRAM_CONNECTOR_TYPE.SOURCE as DiagramConnectorType);\r\n        const label = this.functionalNodeMap.get(x.from)?.type ?? x.type;\r\n        return new DiagramConnector(x.id, label, diagramType);\r\n      });\r\n    return connectors;\r\n  }\r\n\r\n  getConnections(\r\n    nodeId: string,\r\n    aspects: Aspects,\r\n    connectors: DiagramConnector[]\r\n  ): DiagramConnection[] {\r\n    if (\r\n      !aspects &&\r\n      !aspects.graph &&\r\n      !aspects.graph.edges &&\r\n      aspects.graph.edges.length <= 0\r\n    )\r\n      return [];\r\n\r\n    return aspects.graph.edges\r\n      .filter(\r\n        (x) =>\r\n          x.to === nodeId &&\r\n          Object.values(DIAGRAM_CONNECTION_TYPE).includes(x.type)\r\n      )\r\n      .map((x) => {\r\n        const sourceParentEdge = aspects.graph.edges.filter(\r\n          (e) => e.from === \"n2\" && e.type === \"imfo:partOf\"\r\n        )[0];\r\n        const targetConnector = connectors.filter(\r\n          (x) => x.type === DIAGRAM_CONNECTOR_TYPE.TARGET\r\n        )[0];\r\n        // TODO: This values must be dynamic\r\n        return new DiagramConnection(\r\n          x.id,\r\n          x.type,\r\n          sourceParentEdge.to,\r\n          \"e2\",\r\n          \"n4\",\r\n          targetConnector.id,\r\n          x.type as DiagramConnectionType\r\n        );\r\n      });\r\n  }\r\n\r\n  guid(): string {\r\n    function _p8(s: boolean) {\r\n      var p = (Math.random().toString(16) + \"000000000\").substr(2, 8);\r\n      return s ? \"-\" + p.substr(0, 4) + \"-\" + p.substr(4, 4) : p;\r\n    }\r\n    return _p8(false) + _p8(true) + _p8(true) + _p8(false);\r\n  }\r\n\r\n  getProxyNodes(aspect: Aspects) {\r\n    if (\r\n      !aspect &&\r\n      !aspect.graph &&\r\n      !aspect.graph.edges &&\r\n      aspect.graph.edges.length <= 0\r\n    )\r\n      return;\r\n\r\n    aspect.graph.nodes\r\n      .filter(\r\n        (x) =>\r\n          !x.type.toLowerCase().includes(\"input\") &&\r\n          !x.type.toLowerCase().includes(\"output\") &&\r\n          !x.type.toLowerCase().includes(\"pipeline\")\r\n      )\r\n      .forEach((n) => {\r\n        const sourceNodeId = this.guid();\r\n        const targetNodeId = this.guid();\r\n\r\n        aspect.graph.nodes.push({\r\n          id: sourceNodeId,\r\n          type: \"imfo:SupplyOutput\",\r\n          label: \"Supply output\",\r\n        });\r\n        aspect.graph.nodes.push({\r\n          id: targetNodeId,\r\n          type: \"imfo:SupplyInput\",\r\n          label: \"Supply input\",\r\n        });\r\n\r\n        aspect.graph.edges.push({\r\n          id: this.guid(),\r\n          type: \"imfo:partOf\",\r\n          from: sourceNodeId,\r\n          to: n.id,\r\n        });\r\n        aspect.graph.edges.push({\r\n          id: this.guid(),\r\n          type: \"imfo:partOf\",\r\n          from: targetNodeId,\r\n          to: n.id,\r\n        });\r\n      });\r\n  }\r\n}\r\n","C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\workspace\\actions.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\nodetypes\\actions.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\textResources.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\testing\\getAspect.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\selectorNodes\\defaultSelectors\\DefaultSelectorNode.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\selectorNodes\\connectSelectors\\ConnectSelectorNode.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\flow\\dragAndDrop\\index.js",[],["387","388"],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\workspace\\types.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\services\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\nodetypes\\types.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\assets\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\selectorNodes\\defaultSelectors\\InputConnect.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\selectorNodes\\defaultSelectors\\OutputConnect.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\selectorNodes\\connectSelectors\\DataConnect.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\testing\\aspectReducer.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\flow\\dragAndDrop\\Sidebar.js",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\models\\diagram\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\InspectorHeader.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\InspectorComponent.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\models\\diagram\\Diagram.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\ToggleBox.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\styled\\animated\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\styled\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\hooks\\useInspectorToggleChangeHandler.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\styled\\animated\\AnimatedMenu.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\styled\\animated\\AnimatedToggleButton.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\styled\\FragmentHeader.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\styled\\StyledInput.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\styled\\StyledParagraph.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\styled\\StyledContainer.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\styled\\StyledColumn.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\styled\\StyledInspectorTitle.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\styled\\ToggleInspectorIcon.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\styled\\StyledToggleBox.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\styled\\FragmentDataWrapper.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\styled\\FragmentHeaderWrapper.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\inspector\\actions\\changeToggleInspector.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\styled\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\inspector\\reducers\\showInspectorReducer.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\styled\\StyledInspectorComponent.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\styled\\StyledToggleButton.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\FragmentData.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\FragmentContent.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\hooks\\useInspectorChangeHandler.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\helpers\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\inspector\\actions\\changeInspector.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\helpers\\GetContentData.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\helpers\\GetTextResource.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\modules\\inspectorModule\\fragments\\helpers\\GetColor.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\inspector\\reducers\\inspectorReducer.tsx",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\workspace\\reducers.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\nodetypes\\reducers.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\user\\reducers.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\store\\user\\types.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\sagas\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\sagas\\workspace\\saga.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\sagas\\user\\saga.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\redux\\sagas\\nodetype\\saga.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\data\\WorkspaceDataset.js",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\data\\UserDataset.js",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\data\\NodeTypeDataset.js",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\models\\user\\index.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\models\\user\\types.ts",[],"C:\\Users\\helge.landro\\Equinor\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\aspect\\index.ts",[],{"ruleId":"389","replacedBy":"390"},{"ruleId":"391","replacedBy":"392"},{"ruleId":"393","severity":1,"message":"394","line":1,"column":10,"nodeType":"395","messageId":"396","endLine":1,"endColumn":20},{"ruleId":"393","severity":1,"message":"397","line":1,"column":22,"nodeType":"395","messageId":"396","endLine":1,"endColumn":36},{"ruleId":"393","severity":1,"message":"398","line":19,"column":9,"nodeType":"395","messageId":"396","endLine":19,"endColumn":13},{"ruleId":"393","severity":1,"message":"399","line":20,"column":9,"nodeType":"395","messageId":"396","endLine":20,"endColumn":13},{"ruleId":"393","severity":1,"message":"400","line":21,"column":9,"nodeType":"395","messageId":"396","endLine":21,"endColumn":13},{"ruleId":"393","severity":1,"message":"401","line":6,"column":3,"nodeType":"395","messageId":"396","endLine":6,"endColumn":11},{"ruleId":"393","severity":1,"message":"402","line":20,"column":8,"nodeType":"395","messageId":"396","endLine":20,"endColumn":19},{"ruleId":"393","severity":1,"message":"403","line":16,"column":11,"nodeType":"395","messageId":"396","endLine":16,"endColumn":16},{"ruleId":"393","severity":1,"message":"404","line":6,"column":3,"nodeType":"395","messageId":"396","endLine":6,"endColumn":8},{"ruleId":"393","severity":1,"message":"405","line":8,"column":3,"nodeType":"395","messageId":"396","endLine":8,"endColumn":19},{"ruleId":"393","severity":1,"message":"406","line":21,"column":10,"nodeType":"395","messageId":"396","endLine":21,"endColumn":26},{"ruleId":"393","severity":1,"message":"407","line":22,"column":10,"nodeType":"395","messageId":"396","endLine":22,"endColumn":26},{"ruleId":"393","severity":1,"message":"408","line":23,"column":10,"nodeType":"395","messageId":"396","endLine":23,"endColumn":25},{"ruleId":"389","replacedBy":"390"},{"ruleId":"391","replacedBy":"392"},"no-native-reassign",["409"],"no-negated-in-lhs",["410"],"@typescript-eslint/no-unused-vars","'AspectInfo' is defined but never used.","Identifier","unusedVar","'AspectDropdown' is defined but never used.","'fcat' is assigned a value but never used.","'pcat' is assigned a value but never used.","'acat' is assigned a value but never used.","'Controls' is defined but never used.","'DrawMiniMap' is defined but never used.","'value' is assigned a value but never used.","'Graph' is defined but never used.","'AspectDescriptor' is defined but never used.","'AspectRatioSharp' is defined but never used.","'brotliDecompress' is defined but never used.","'nodetypeReducer' is defined but never used.","no-global-assign","no-unsafe-negation"]