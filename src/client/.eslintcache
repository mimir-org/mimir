[{"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\reportWebVitals.js":"1","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\components\\nodetypes\\NodeTypeOverview.tsx":"2","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\components\\nodetypes\\NodeTypeComponent.tsx":"3","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\index.tsx":"4","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\store\\workspace\\reducers.ts":"5","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\store\\workspace\\types.ts":"6","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\sagas\\index.ts":"7","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\sagas\\workspace\\saga.ts":"8","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\store\\workspace\\actions.ts":"9","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\store\\index.ts":"10","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\data\\WorkspaceDataset.js":"11","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\components\\home\\Home.tsx":"12","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\components\\home\\index.ts":"13","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\components\\nodetypes\\index.ts":"14","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\components\\app\\index.ts":"15","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\components\\app\\App.tsx":"16","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\components\\index.ts":"17","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\components\\header\\index.ts":"18","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\components\\footer\\index.ts":"19","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\components\\header\\Header.tsx":"20","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\components\\footer\\Footer.tsx":"21","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\store\\nodetypes\\reducers.ts":"22","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\store\\nodetypes\\types.ts":"23","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\store\\nodetypes\\actions.ts":"24","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\sagas\\nodetype\\saga.ts":"25","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\data\\NodeTypeDataset.js":"26","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\components\\toolbox\\index.ts":"27","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\components\\toolbox\\ToolboxComponent.tsx":"28","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\index.ts":"29","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\DiagramComponent.tsx":"30","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\models\\webclient\\index.ts":"31","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\models\\webclient\\types.ts":"32","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\services\\index.ts":"33","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\services\\workspaceService.ts":"34","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\TreeviewComponent.tsx":"35","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\index.ts":"36","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\models\\diagram\\index.ts":"37","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\models\\diagram\\node\\MbNodeModel.ts":"38","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\models\\diagram\\port\\MbPortFactory.ts":"39","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\models\\diagram\\port\\MbPortModel.ts":"40","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\models\\diagram\\link\\MbLinkModel.ts":"41","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\models\\diagram\\node\\MbNodeFactory.tsx":"42","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\models\\diagram\\node\\MbNodeWidget.tsx":"43","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\models\\diagram\\port\\MbPortLabelWidget.tsx":"44","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\models\\diagram\\link\\MbLinkFactory.tsx":"45","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\models\\diagram\\link\\MbLinkSegmentWidget.tsx":"46","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\models\\diagram\\link\\MbLinkPointWidget.tsx":"47","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\models\\diagram\\link\\MbLinkWidget.tsx":"48","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\models\\diagram\\label\\MbLabelFactory.tsx":"49","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\models\\diagram\\label\\MbLabelModel.tsx":"50","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\models\\diagram\\label\\MbLabelWidget.tsx":"51","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\store\\user\\reducers.ts":"52","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\store\\user\\types.ts":"53","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\sagas\\user\\saga.ts":"54","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\models\\user\\index.ts":"55","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\models\\user\\types.ts":"56","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\store\\user\\actions.ts":"57","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\data\\UserDataset.js":"58","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\DefaultSelectorNode.tsx":"59","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\ConnectSelectorNode.tsx":"60"},{"size":362,"mtime":499162500000,"results":"61","hashOfConfig":"62"},{"size":972,"mtime":1613565108637,"results":"63","hashOfConfig":"62"},{"size":397,"mtime":1612956930086,"results":"64","hashOfConfig":"62"},{"size":803,"mtime":1614328123373,"results":"65","hashOfConfig":"62"},{"size":720,"mtime":1614009398647,"results":"66","hashOfConfig":"62"},{"size":719,"mtime":1614009376062,"results":"67","hashOfConfig":"62"},{"size":592,"mtime":1614091448986,"results":"68","hashOfConfig":"62"},{"size":1399,"mtime":1614070993708,"results":"69","hashOfConfig":"62"},{"size":374,"mtime":1614009444854,"results":"70","hashOfConfig":"62"},{"size":875,"mtime":1614089736798,"results":"71","hashOfConfig":"62"},{"size":10995,"mtime":1614672113715,"results":"72","hashOfConfig":"62"},{"size":1659,"mtime":1614672809087,"results":"73","hashOfConfig":"62"},{"size":58,"mtime":1612941786577,"results":"74","hashOfConfig":"62"},{"size":131,"mtime":1612941776778,"results":"75","hashOfConfig":"62"},{"size":54,"mtime":1612955648121,"results":"76","hashOfConfig":"62"},{"size":457,"mtime":1614170307128,"results":"77","hashOfConfig":"62"},{"size":414,"mtime":1614154808007,"results":"78","hashOfConfig":"62"},{"size":63,"mtime":1612955890890,"results":"79","hashOfConfig":"62"},{"size":60,"mtime":1612955828571,"results":"80","hashOfConfig":"62"},{"size":985,"mtime":1614170059967,"results":"81","hashOfConfig":"62"},{"size":607,"mtime":1612955806599,"results":"82","hashOfConfig":"62"},{"size":717,"mtime":1612957590954,"results":"83","hashOfConfig":"62"},{"size":758,"mtime":1612957324096,"results":"84","hashOfConfig":"62"},{"size":374,"mtime":1612957422953,"results":"85","hashOfConfig":"62"},{"size":1119,"mtime":1613463900642,"results":"86","hashOfConfig":"62"},{"size":414,"mtime":1613631362166,"results":"87","hashOfConfig":"62"},{"size":73,"mtime":1613480139007,"results":"88","hashOfConfig":"62"},{"size":348,"mtime":1614171596266,"results":"89","hashOfConfig":"62"},{"size":71,"mtime":1613557750177,"results":"90","hashOfConfig":"62"},{"size":5722,"mtime":1614672702532,"results":"91","hashOfConfig":"62"},{"size":26,"mtime":1613736669216,"results":"92","hashOfConfig":"62"},{"size":1618,"mtime":1614003211432,"results":"93","hashOfConfig":"62"},{"size":60,"mtime":1614075060979,"results":"94","hashOfConfig":"62"},{"size":4862,"mtime":1614672563599,"results":"95","hashOfConfig":"62"},{"size":4349,"mtime":1614672113681,"results":"96","hashOfConfig":"62"},{"size":74,"mtime":1614087076422,"results":"97","hashOfConfig":"62"},{"size":646,"mtime":1614088261815,"results":"98","hashOfConfig":"62"},{"size":2790,"mtime":1613552214518,"results":"99","hashOfConfig":"62"},{"size":409,"mtime":1613134616760,"results":"100","hashOfConfig":"62"},{"size":1955,"mtime":1613662802249,"results":"101","hashOfConfig":"62"},{"size":3296,"mtime":1614088261815,"results":"102","hashOfConfig":"62"},{"size":509,"mtime":1613485849188,"results":"103","hashOfConfig":"62"},{"size":1976,"mtime":1613631217486,"results":"104","hashOfConfig":"62"},{"size":1091,"mtime":1613471279659,"results":"105","hashOfConfig":"62"},{"size":1383,"mtime":1613468225388,"results":"106","hashOfConfig":"62"},{"size":1417,"mtime":1613472429597,"results":"107","hashOfConfig":"62"},{"size":1263,"mtime":1613469350020,"results":"108","hashOfConfig":"62"},{"size":3942,"mtime":1613133720652,"results":"109","hashOfConfig":"62"},{"size":543,"mtime":1613485670643,"results":"110","hashOfConfig":"62"},{"size":891,"mtime":1613485639081,"results":"111","hashOfConfig":"62"},{"size":572,"mtime":1613469795449,"results":"112","hashOfConfig":"62"},{"size":750,"mtime":1614091766165,"results":"113","hashOfConfig":"62"},{"size":707,"mtime":1614091595906,"results":"114","hashOfConfig":"62"},{"size":1302,"mtime":1614093626492,"results":"115","hashOfConfig":"62"},{"size":24,"mtime":1614089373297,"results":"116","hashOfConfig":"62"},{"size":293,"mtime":1614090848053,"results":"117","hashOfConfig":"62"},{"size":331,"mtime":1614091674340,"results":"118","hashOfConfig":"62"},{"size":934,"mtime":1614093228841,"results":"119","hashOfConfig":"62"},{"size":1790,"mtime":1614603018344,"results":"120","hashOfConfig":"62"},{"size":999,"mtime":1614671463610,"results":"121","hashOfConfig":"62"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},"1ud2c32",{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"127"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"127"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"189"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"189"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"127"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"127"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\reportWebVitals.js",[],["251","252"],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\components\\nodetypes\\NodeTypeOverview.tsx",[],["253","254"],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\components\\nodetypes\\NodeTypeComponent.tsx",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\index.tsx",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\store\\workspace\\reducers.ts",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\store\\workspace\\types.ts",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\sagas\\index.ts",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\sagas\\workspace\\saga.ts",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\store\\workspace\\actions.ts",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\store\\index.ts",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\data\\WorkspaceDataset.js",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\components\\home\\Home.tsx",["255","256","257","258"],"import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useParams } from 'react-router';\r\nimport { DiagramComponent, TreeviewComponent } from \"..\";\r\nimport { getWorkspace } from \"../../store/workspace/actions\";\r\nimport { getUser } from \"../../store/user/actions\";\r\nimport { WorkspaceState } from \"../../store/workspace/types\";\r\nimport { RootState } from \"./../../store/index\";\r\nimport { UserState } from \"../../store/user/types\";\r\nimport { SETTING_KEY, SETTING_VALUE } from \"./../../models/user\";\r\n\r\ninterface RouteParams {\r\n  type: string\r\n}\r\n\r\nconst Home = () => {\r\n  const workspaceState = useSelector<RootState>((state) => state.workspace) as WorkspaceState;\r\n  // const userState = useSelector<RootState>((state) => state.user) as UserState;\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(getWorkspace());\r\n    // dispatch(getUser(\"rl\", \"rl\"));\r\n  }, [dispatch]);\r\n\r\n  const params = useParams<RouteParams>();\r\n\r\n  return (\r\n    <>\r\n\r\n      {workspaceState && workspaceState.workspace && !workspaceState.fetching &&\r\n      <>\r\n         \r\n        {params.type === 'treeview' &&\r\n            <TreeviewComponent root={workspaceState.workspace.root} aspects={workspaceState.workspace.aspects} aspectDescriptors={workspaceState.workspace.aspectDescriptors} />\r\n        }\r\n\r\n        {params.type === 'diagram' &&\r\n            <DiagramComponent root={workspaceState.workspace.root} aspects={workspaceState.workspace.aspects} aspectDescriptors={workspaceState.workspace.aspectDescriptors} />           \r\n        }\r\n\r\n\r\n        </>\r\n      }\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\components\\home\\index.ts",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\components\\nodetypes\\index.ts",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\components\\app\\index.ts",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\components\\app\\App.tsx",["259","260"],"import React from 'react';\nimport { Route } from 'react-router';\n\nimport { Header, Home, Footer, DiagramComponent, TreeviewComponent } from '..';\n\nconst App = () => {  \n    return (\n      <React.Fragment>\n        <Header />\n        <Route exact path='/' component={Home} />\n        <Route exact path='/home' component={Home} />\n        <Route path='/home/:type' component={Home} />\n        <Footer />\n      </React.Fragment>\n    ); \n};\n\nexport default App;\n","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\components\\index.ts",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\components\\header\\index.ts",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\components\\footer\\index.ts",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\components\\header\\Header.tsx",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\components\\footer\\Footer.tsx",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\store\\nodetypes\\reducers.ts",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\store\\nodetypes\\types.ts",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\store\\nodetypes\\actions.ts",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\sagas\\nodetype\\saga.ts",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\data\\NodeTypeDataset.js",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\components\\toolbox\\index.ts",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\components\\toolbox\\ToolboxComponent.tsx",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\index.ts",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\DiagramComponent.tsx",["261","262","263","264","265","266","267"],"/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { FC, useEffect, useState, MouseEvent, ChangeEvent  } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport ReactFlow, {\r\n  isEdge,\r\n  removeElements,\r\n  addEdge,\r\n  MiniMap,\r\n  Controls,\r\n  Node,\r\n  FlowElement,\r\n  OnLoadParams,\r\n  Elements,\r\n  Position,\r\n  SnapGrid,\r\n  Connection,\r\n  Edge,\r\n  ArrowHeadType,\r\n} from 'react-flow-renderer';\r\n\r\nimport DefaultSelectorNode from './DefaultSelectorNode';\r\nimport ConnectSelectorNode from './ConnectSelectorNode';\r\nimport { Workspace, } from '../../models/workspace';\r\nimport { RootState } from \"../../store/index\";\r\nimport { WorkspaceState } from \"../../store/workspace/types\";\r\n\r\nimport { WorkspaceService } from './../../services/workspaceService';\r\n\r\nlet clickTimeout = null;\r\n\r\n// const onLoad = (reactFlowInstance: OnLoadParams) => console.log('flow loaded:', reactFlowInstance);\r\n// const onNodeDragStop = (_: MouseEvent, node: Node) => console.log('drag stop', node);\r\nconst onElementClick = (e: MouseEvent, element: FlowElement) => {\r\n  if (clickTimeout !== null) {\r\n    console.log('DOUBLE: ', element)\r\n    clearTimeout(clickTimeout)\r\n    clickTimeout = null\r\n  } else {\r\n    console.log('SINGLE: ', element)  \r\n    clickTimeout = setTimeout(()=>{    \r\n    clearTimeout(clickTimeout)\r\n      clickTimeout = null\r\n    }, 2000)\r\n  }\r\n};\r\n\r\n// const initBgColor = '#1A192B';\r\nconst connectionLineStyle = { stroke: '#888' };\r\nconst snapGrid: SnapGrid = [16, 16];\r\nconst nodeTypes = {\r\n  selectorNode: DefaultSelectorNode,\r\n  connectorNode: ConnectSelectorNode\r\n};\r\n\r\n\r\n\r\nconst DiagramComponent: FC<Workspace> = ({ root, aspects, aspectDescriptors }: Workspace) => {\r\n\r\n  const currentState = (useSelector<RootState>((state) => state.workspace)) as WorkspaceState;\r\n  const [elements, setElements] = useState<Elements>([]);\r\n  const service = new WorkspaceService({ root, aspects, aspectDescriptors });\r\n\r\n  \r\n\r\n  \r\n  \r\n  \r\n  \r\n  // const [bgColor, setBgColor] = useState<string>(initBgColor);\r\n\r\n  useEffect(() => {\r\n    setElements((els) =>\r\n        els.map((e) => {\r\n          return e;\r\n        })\r\n      ); \r\n      \r\n  const initialElements: Elements = [];\r\n  const inputConnectorsElemement: Elements = [];\r\n\r\n  \r\n  const rootEdges = service.getRootEdges(\"root\");\r\n      rootEdges.forEach(edge => {\r\n\r\n        // Find connectors\r\n        const connectorEdges = service.getConnectorEdges(edge.from);\r\n\r\n        const connectors = connectorEdges.map(connector => {\r\n          var node = service.functionalNodeMap.get(connector.from);\r\n          return {\r\n            id: connector.id,\r\n            type: node.type.toLowerCase().includes('input') ? 'target' : 'source',\r\n            label: node.type\r\n          };          \r\n        });\r\n\r\n        // Create the node with connectors\r\n        initialElements.push({\r\n          id: edge.from,\r\n          type: 'selectorNode',\r\n          data: { label: service.getProductLabel(edge.from), id: edge.from, connectors: connectors },\r\n          position: { x: 300, y: 50 },\r\n        });\r\n\r\n        // Create connections\r\n        const connections = service.getConnectionEdges(edge.from);\r\n        // console.log(connections);\r\n\r\n        connections.forEach(con => {\r\n\r\n          initialElements.push(\r\n            {\r\n              id: con.id,\r\n              source: con.from,\r\n              target: con.to,\r\n              sourceHandle: con.connector,\r\n              animated: true,\r\n              style: { stroke: '#888' },\r\n              label: con.type,\r\n              arrowHeadType: ArrowHeadType.ArrowClosed\r\n            }\r\n          );\r\n        });\r\n\r\n\r\n\r\n        \r\n\r\n        // initialElements.push({\r\n        //   id: 'e1-2', \r\n        //   type: 'step', \r\n        //   source: '1', \r\n        //   target: '2', \r\n        //   animated: true, \r\n        //   label: 'Gas', \r\n        //   arrowHeadType: ArrowHeadType.ArrowClosed\r\n        // });\r\n\r\n        \r\n  });\r\n\r\n    setElements(initialElements);\r\n  }, []);\r\n\r\n  const onElementsRemove = (elementsToRemove: Elements) => setElements((els) => removeElements(elementsToRemove, els));\r\n  const onConnect = (params: Connection | Edge) => setElements((els) => {\r\n    const node = service.functionalNodeMap.get(service.functionalEdgeMap.get(params.sourceHandle).from);\r\n    return addEdge({ ...params, animated: true, arrowHeadType: ArrowHeadType.ArrowClosed, label: node.type, style: { stroke: '#888' } }, els);\r\n  });\r\n\r\n  return (\r\n    <div className='wrapper'>\r\n      <div className='col'>\r\n        Left\r\n      </div>\r\n      <div className='col'>\r\n        <ReactFlow\r\n          elements={elements}\r\n          onElementClick={onElementClick}\r\n          onElementsRemove={onElementsRemove}\r\n          onConnect={onConnect}\r\n          // onNodeDragStop={onNodeDragStop}\r\n          // style={{ background: initBgColor }}\r\n          // onLoad={onLoad}\r\n          nodeTypes={nodeTypes}\r\n          connectionLineStyle={connectionLineStyle}\r\n          snapToGrid={true}\r\n          snapGrid={snapGrid}\r\n          defaultZoom={1.5}      \r\n        >\r\n          <MiniMap\r\n            nodeStrokeColor={(n: Node): string => {\r\n              if (n.type === 'input') return '#0041d0';\r\n              if (n.type === 'selectorNode') return '#ccc';\r\n              if (n.type === 'output') return '#ff0072';\r\n\r\n              return '#eee';\r\n            }}\r\n            nodeColor={(n: Node): string => {\r\n              if (n.type === 'selectorNode') return '#ccc';\r\n\r\n              return '#fff';\r\n            }}\r\n          />\r\n          <Controls />\r\n        </ReactFlow>\r\n      </div>\r\n      <div className='col'>Right</div>\r\n    </div>\r\n  );\r\n};\r\n  \r\n\r\n\r\n  \r\n\r\n\r\nexport default DiagramComponent;\r\n","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\models\\webclient\\index.ts",[],["268","269"],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\models\\webclient\\types.ts",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\services\\index.ts",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\services\\workspaceService.ts",["270"],"import { Workspace, Node, Edge, AspectDescriptor, Connection } from '../models/workspace';\r\nexport class WorkspaceService {\r\n    private workspace: Workspace;\r\n    functionalNodeMap: Map<string, Node>;\r\n    productNodeMap: Map<string, Node>;\r\n    functionalEdgeMap: Map<string, Edge>;\r\n    productEdgeMap: Map<string, Edge>;\r\n\r\n    constructor(workspace: Workspace) {\r\n        this.workspace = workspace;\r\n        this.functionalNodeMap = this.createNodeMap('1', '1');\r\n        this.productNodeMap = this.createNodeMap('2', '1');\r\n        this.functionalEdgeMap = this.createEdgeMap('1', '1');\r\n        this.productEdgeMap = this.createEdgeMap('2', '1');\r\n    }\r\n\r\n    createNodeMap(aspect: string, category: string): Map<string, Node> {\r\n        var aspects = this.workspace.aspects.filter(x => x.aspect === aspect && x.category === category);\r\n        if(!aspects && aspects.length <= 0)\r\n            return new Map<string, Node>();\r\n\r\n        return new Map(aspects[0].graph.nodes.map(obj => [obj.id, obj] as [string, Node]));\r\n    }\r\n\r\n    createEdgeMap(aspect: string, category: string): Map<string, Edge> {\r\n        var aspects = this.workspace.aspects.filter(x => x.aspect === aspect && x.category === category);\r\n        if(!aspects && aspects.length <= 0)\r\n            return new Map<string, Edge>();\r\n\r\n        return new Map(aspects[0].graph.edges.map(obj => [obj.id, obj] as [string, Edge]));\r\n    }\r\n\r\n    getProductLabel(nodeId: string): string {\r\n        var actualProductnode = this.productNodeMap.get(nodeId);\r\n        if(actualProductnode) {\r\n            return actualProductnode.label;\r\n        }\r\n\r\n        const actualNode = this.functionalNodeMap.get(nodeId);\r\n        \r\n        if(!actualNode)\r\n            return '';\r\n\r\n        // TODO: Use Typeregister\r\n        if(actualNode.type === 'imft:Reservoir')\r\n            return 'Reservoir';        \r\n    }\r\n\r\n    getRootEdges(nodeId: string): Edge[] {\r\n        var aspects = this.workspace.aspects.filter(x => x.aspect === '1' && x.category === '1');\r\n        if(!aspects && aspects.length <= 0)\r\n            return [];\r\n        \r\n        const edges = aspects[0].graph.edges.filter(x => x.to === nodeId && x.type === 'imfo:partOf');\r\n        let filteredEdges: Edge[] = [];\r\n\r\n        // TODO: Use Typeregister\r\n        edges.forEach(edge => {\r\n            const node = this.functionalNodeMap.get(edge.from);\r\n            if(node && !node.type.toLowerCase().includes('input') && !node.type.toLowerCase().includes('output') && !node.type.toLowerCase().includes('pipeline')) {\r\n                filteredEdges.push(edge);\r\n            }                \r\n        });\r\n        return filteredEdges;\r\n    }\r\n\r\n    getConnectorEdges(nodeId: string): Edge[] {\r\n        var aspects = this.workspace.aspects.filter(x => x.aspect === '1' && x.category === '1');\r\n        if(!aspects && aspects.length <= 0)\r\n            return [];\r\n        \r\n        const edges = aspects[0].graph.edges.filter(x => x.to === nodeId && x.type === 'imfo:partOf');\r\n        let filteredEdges: Edge[] = [];\r\n\r\n        // TODO: Use Typeregister\r\n        edges.forEach(edge => {\r\n            const node = this.functionalNodeMap.get(edge.from);\r\n            if(node && (node.type.toLowerCase().includes('input') || node.type.toLowerCase().includes('output'))) {\r\n                filteredEdges.push(edge);\r\n            }                \r\n        });\r\n        return filteredEdges;\r\n    }\r\n\r\n    getConnectionEdges(nodeId: string): Connection[] {\r\n        var aspects = this.workspace.aspects.filter(x => x.aspect === '1' && x.category === '1');\r\n        \r\n        if(!aspects && aspects.length <= 0)\r\n            return [];\r\n\r\n            const edges = aspects[0].graph.edges.filter(x => x.to === nodeId && x.type !== 'imfo:partOf');\r\n            let filteredConnections: Connection[] = [];\r\n\r\n        // TODO: Use Typeregister\r\n        edges.forEach(edge => {\r\n            if(edge) {           \r\n                var parent = aspects[0].graph.edges.filter(x => x.from === edge.from && x.type === 'imfo:partOf');\r\n                if(parent && parent.length > 0)\r\n                {\r\n                    filteredConnections.push({\r\n                        id: edge.id,\r\n                        type: edge.type,\r\n                        from: parent[0].to,\r\n                        to: edge.to,\r\n                        connector: parent[0].id\r\n                    });\r\n                }\r\n            }              \r\n        });\r\n\r\n        return filteredConnections;\r\n    }\r\n}\r\n\r\n\r\n\r\n// const model = new DiagramModel();\r\n//   const mainAspect = aspects.filter(x => x.aspect === \"1\" && x.category === \"1\")[0];\r\n//   const productAspect = aspects.filter(x => x.aspect === \"2\" && x.category === \"1\")[0];\r\n  \r\n\r\n//   if(mainAspect) {\r\n//     var nodeMap = new Map(mainAspect.graph.nodes.map(obj => [obj.id, obj] as [string, Node])); ","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\TreeviewComponent.tsx",["271","272","273","274","275","276","277","278","279","280","281","282","283","284"],"import React, { useEffect, FC } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport './treeview.scss';\r\nimport {  getWorkspace } from '../../store/workspace/actions'; \r\nimport { Workspace, Node, Edge } from \"../../models/workspace\";\r\nimport { RootState } from './../../store/index';\r\n\r\nimport NodeComponent from './node/NodeComponent';\r\nimport AspectComponent from './aspect/AspectComponent';\r\nimport { WorkspaceService } from './../../services';\r\n\r\nimport PlattForm from '../../assets/plattform.svg';\r\nimport FunctionalIcon from '../../assets/functionbox.png';\r\nimport ProductionIcon from '../../assets/productionbox.png';\r\nimport LocationIcon from '../../assets/locationbox.png';\r\n\r\nconst TreeviewComponent : FC<Workspace> = ({ root, aspects, aspectDescriptors }: Workspace) => {\r\n\r\n    const service = new WorkspaceService({ root, aspects, aspectDescriptors});\r\n    // const functionNodeMap = service.createNodeMap(\"1\", \"1\");\r\n    // console.log(functionNodeMap);\r\n\r\n    return (\r\n        <div className='treeview_component'>\r\n            <div className='treestructur_container'>\r\n                <div className='heading'><p>{root.title}</p></div>\r\n                <div className='aspects_container'>\r\n                    {\r\n                        aspectDescriptors.map(aspect => \r\n                            <div className='aspect_container'>\r\n                                <div className='aspect_heading'>\r\n                                    <img src={aspect.name === 'function' ? FunctionalIcon : aspect.name === 'product' ? ProductionIcon : aspect.name === 'area' ? LocationIcon : null} alt='aspect-icon'/>\r\n                                    <p>{aspect.name}</p>\r\n                                </div>\r\n                                <div className='aspect_category'>\r\n                                    <select>\r\n                                        {/* {aspects['descriptor'].name.forEach.filter(category => category === 1)} */}\r\n                                        <option value=\"process\">Process</option>\r\n                                        <option value=\"power\">Power</option>\r\n                                    </select>\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    }\r\n                </div>\r\n            </div>\r\n            <div className='inspector_container'>\r\n                <div className='heading'><p>Inspector</p></div>\r\n                <div className='info_container'><p>Info to come</p></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TreeviewComponent;\r\n\r\n    // const n = service.getRootEdges('root');\r\n    // n.forEach(edge => {\r\n    //     const label = service.getProductLabel(edge.from);\r\n    //     console.log('label');\r\n    //     console.log(label);\r\n    //     const node = service.functionalNodeMap.get(edge.from);\r\n    //     console.log('node');\r\n    //     console.log(node);\r\n    // })    \r\n    \r\n    // console.log(service.functionalNodeMap);\r\n    // console.log(service.getRootEdges(\"root\"));\r\n    // console.log(service.getRootEdges)\r\n\r\n{/* {aspects.map(aspect => \r\n                <AspectComponent aspect={aspect}/>\r\n            )} */}\r\n\r\n            {/* <div className='aspect'>\r\n                <div className='aspect_heading'>\r\n                    <img src={ProductionIcon} alt='functional-aspect-icon'/>\r\n                    <p>Production</p>\r\n                </div>\r\n                <div className='treestructure_container'>\r\n                    <NodeComponent type={'children'}/>\r\n                </div>\r\n            </div>\r\n            <div className='aspect'>\r\n                <div className='aspect_heading'>\r\n                    <img src={LocationIcon} alt='functional-aspect-icon'/>\r\n                    <p>Location</p>\r\n                </div>\r\n                <div className='treestructure_container'>\r\n                    <NodeComponent type={'children'}/>\r\n                </div>\r\n            </div> */}\r\n            {/* \r\n                    <NodeComponent type={\"root\"}/>\r\n                    <div className=\"treestructure_container\">\r\n                        { nodes.map((node) => (\r\n                            <NodeComponent name={node.name} type={\"children\"}/>\r\n                        ))}\r\n                    </div>\r\n            */}","C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\components\\treeview\\index.ts",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\models\\diagram\\index.ts",[],["285","286"],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\models\\diagram\\node\\MbNodeModel.ts",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\models\\diagram\\port\\MbPortFactory.ts",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\models\\diagram\\port\\MbPortModel.ts",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\models\\diagram\\link\\MbLinkModel.ts",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\models\\diagram\\node\\MbNodeFactory.tsx",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\models\\diagram\\node\\MbNodeWidget.tsx",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\models\\diagram\\port\\MbPortLabelWidget.tsx",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\models\\diagram\\link\\MbLinkFactory.tsx",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\models\\diagram\\link\\MbLinkSegmentWidget.tsx",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\models\\diagram\\link\\MbLinkPointWidget.tsx",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\models\\diagram\\link\\MbLinkWidget.tsx",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\models\\diagram\\label\\MbLabelFactory.tsx",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\models\\diagram\\label\\MbLabelModel.tsx",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\models\\diagram\\label\\MbLabelWidget.tsx",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\store\\user\\reducers.ts",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\store\\user\\types.ts",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\sagas\\user\\saga.ts",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\models\\user\\index.ts",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\models\\user\\types.ts",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\store\\user\\actions.ts",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\data\\UserDataset.js",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\DefaultSelectorNode.tsx",[],"C:\\git\\ti-spine-modelbuilder\\src\\client\\src\\components\\diagram\\ConnectSelectorNode.tsx",[],{"ruleId":"287","replacedBy":"288"},{"ruleId":"289","replacedBy":"290"},{"ruleId":"287","replacedBy":"288"},{"ruleId":"289","replacedBy":"290"},{"ruleId":"291","severity":1,"message":"292","line":6,"column":10,"nodeType":"293","messageId":"294","endLine":6,"endColumn":17},{"ruleId":"291","severity":1,"message":"295","line":9,"column":10,"nodeType":"293","messageId":"294","endLine":9,"endColumn":19},{"ruleId":"291","severity":1,"message":"296","line":10,"column":10,"nodeType":"293","messageId":"294","endLine":10,"endColumn":21},{"ruleId":"291","severity":1,"message":"297","line":10,"column":23,"nodeType":"293","messageId":"294","endLine":10,"endColumn":36},{"ruleId":"291","severity":1,"message":"298","line":4,"column":32,"nodeType":"293","messageId":"294","endLine":4,"endColumn":48},{"ruleId":"291","severity":1,"message":"299","line":4,"column":50,"nodeType":"293","messageId":"294","endLine":4,"endColumn":67},{"ruleId":"291","severity":1,"message":"300","line":2,"column":54,"nodeType":"293","messageId":"294","endLine":2,"endColumn":65},{"ruleId":"291","severity":1,"message":"301","line":3,"column":23,"nodeType":"293","messageId":"294","endLine":3,"endColumn":34},{"ruleId":"291","severity":1,"message":"302","line":6,"column":3,"nodeType":"293","messageId":"294","endLine":6,"endColumn":9},{"ruleId":"291","severity":1,"message":"303","line":13,"column":3,"nodeType":"293","messageId":"294","endLine":13,"endColumn":15},{"ruleId":"291","severity":1,"message":"304","line":15,"column":3,"nodeType":"293","messageId":"294","endLine":15,"endColumn":11},{"ruleId":"291","severity":1,"message":"305","line":60,"column":9,"nodeType":"293","messageId":"294","endLine":60,"endColumn":21},{"ruleId":"291","severity":1,"message":"306","line":80,"column":9,"nodeType":"293","messageId":"294","endLine":80,"endColumn":43},{"ruleId":"287","replacedBy":"307"},{"ruleId":"289","replacedBy":"308"},{"ruleId":"291","severity":1,"message":"309","line":1,"column":33,"nodeType":"293","messageId":"294","endLine":1,"endColumn":49},{"ruleId":"291","severity":1,"message":"310","line":1,"column":17,"nodeType":"293","messageId":"294","endLine":1,"endColumn":26},{"ruleId":"291","severity":1,"message":"301","line":2,"column":10,"nodeType":"293","messageId":"294","endLine":2,"endColumn":21},{"ruleId":"291","severity":1,"message":"311","line":2,"column":23,"nodeType":"293","messageId":"294","endLine":2,"endColumn":34},{"ruleId":"291","severity":1,"message":"312","line":4,"column":11,"nodeType":"293","messageId":"294","endLine":4,"endColumn":23},{"ruleId":"291","severity":1,"message":"313","line":5,"column":21,"nodeType":"293","messageId":"294","endLine":5,"endColumn":25},{"ruleId":"291","severity":1,"message":"314","line":5,"column":27,"nodeType":"293","messageId":"294","endLine":5,"endColumn":31},{"ruleId":"291","severity":1,"message":"315","line":6,"column":10,"nodeType":"293","messageId":"294","endLine":6,"endColumn":19},{"ruleId":"291","severity":1,"message":"316","line":8,"column":8,"nodeType":"293","messageId":"294","endLine":8,"endColumn":21},{"ruleId":"291","severity":1,"message":"317","line":9,"column":8,"nodeType":"293","messageId":"294","endLine":9,"endColumn":23},{"ruleId":"291","severity":1,"message":"318","line":12,"column":8,"nodeType":"293","messageId":"294","endLine":12,"endColumn":17},{"ruleId":"291","severity":1,"message":"319","line":19,"column":11,"nodeType":"293","messageId":"294","endLine":19,"endColumn":18},{"ruleId":"320","severity":1,"message":"321","line":71,"column":1,"nodeType":"322","messageId":"323","endLine":73,"endColumn":19},{"ruleId":"320","severity":1,"message":"321","line":75,"column":13,"nodeType":"322","messageId":"323","endLine":92,"endColumn":23},{"ruleId":"320","severity":1,"message":"321","line":93,"column":13,"nodeType":"322","messageId":"323","endLine":100,"endColumn":16},{"ruleId":"287","replacedBy":"324"},{"ruleId":"289","replacedBy":"325"},"no-native-reassign",["326"],"no-negated-in-lhs",["327"],"@typescript-eslint/no-unused-vars","'getUser' is defined but never used.","Identifier","unusedVar","'UserState' is defined but never used.","'SETTING_KEY' is defined but never used.","'SETTING_VALUE' is defined but never used.","'DiagramComponent' is defined but never used.","'TreeviewComponent' is defined but never used.","'ChangeEvent' is defined but never used.","'useDispatch' is defined but never used.","'isEdge' is defined but never used.","'OnLoadParams' is defined but never used.","'Position' is defined but never used.","'currentState' is assigned a value but never used.","'inputConnectorsElemement' is assigned a value but never used.",["326"],["327"],"'AspectDescriptor' is defined but never used.","'useEffect' is defined but never used.","'useSelector' is defined but never used.","'getWorkspace' is defined but never used.","'Node' is defined but never used.","'Edge' is defined but never used.","'RootState' is defined but never used.","'NodeComponent' is defined but never used.","'AspectComponent' is defined but never used.","'PlattForm' is defined but never used.","'service' is assigned a value but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock",["326"],["327"],"no-global-assign","no-unsafe-negation"]