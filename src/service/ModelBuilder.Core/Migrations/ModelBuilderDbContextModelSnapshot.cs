// <auto-generated />
using System;
using Mb.Models.Configurations;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Mb.Core.Migrations
{
    [DbContext(typeof(ModelBuilderDbContext))]
    partial class ModelBuilderDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AttributeType_Unit", b =>
                {
                    b.Property<string>("AttributeTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UnitId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AttributeTypeId", "UnitId");

                    b.HasIndex("UnitId");

                    b.ToTable("AttributeType_Unit");
                });

            modelBuilder.Entity("CompositeType_AttributeType", b =>
                {
                    b.Property<string>("AttributeTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompositeTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AttributeTypeId", "CompositeTypeId");

                    b.HasIndex("CompositeTypeId");

                    b.ToTable("CompositeType_AttributeType");
                });

            modelBuilder.Entity("CompositeType_NodeType", b =>
                {
                    b.Property<string>("CompositeTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NodeTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CompositeTypeId", "NodeTypeId");

                    b.HasIndex("NodeTypeId");

                    b.ToTable("CompositeType_NodeType");
                });

            modelBuilder.Entity("Mb.Models.Data.Attribute", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("AttributeTypeId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AttributeTypeId");

                    b.Property<string>("CompositeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConditionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Discipline")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Discipline");

                    b.Property<string>("FormatId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("InterfaceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit")
                        .HasColumnName("IsLocked");

                    b.Property<string>("IsLockedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("IsLockedBy");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Key");

                    b.Property<string>("NodeId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("NodeId");

                    b.Property<string>("QualifierId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SelectType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SelectType");

                    b.Property<string>("SelectValuesString")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SelectValuesString");

                    b.Property<string>("SelectedUnitId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SelectedUnitId");

                    b.Property<string>("SemanticReference")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SemanticReference");

                    b.Property<string>("SourceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Tags")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Tags");

                    b.Property<string>("TerminalId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("TerminalId");

                    b.Property<string>("TransportId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("TransportId");

                    b.Property<string>("UnitString")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UnitString");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Value");

                    b.HasKey("Id");

                    b.HasIndex("CompositeId");

                    b.HasIndex("ConditionId");

                    b.HasIndex("FormatId");

                    b.HasIndex("InterfaceId");

                    b.HasIndex("NodeId");

                    b.HasIndex("QualifierId");

                    b.HasIndex("SourceId");

                    b.HasIndex("TerminalId");

                    b.HasIndex("TransportId");

                    b.ToTable("Attribute");
                });

            modelBuilder.Entity("Mb.Models.Data.Composite", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<string>("NodeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SemanticReference")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SemanticReference");

                    b.HasKey("Id");

                    b.HasIndex("NodeId");

                    b.ToTable("Composite");
                });

            modelBuilder.Entity("Mb.Models.Data.Connector", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<string>("NodeId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("NodeId");

                    b.Property<string>("SemanticReference")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SemanticReference");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Type");

                    b.Property<string>("Visible")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("Visible");

                    b.HasKey("Id");

                    b.HasIndex("NodeId");

                    b.ToTable("Connector");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Connector");
                });

            modelBuilder.Entity("Mb.Models.Data.Contractor", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("Domain")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Domain");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Contractor");
                });

            modelBuilder.Entity("Mb.Models.Data.Edge", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("FromConnectorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("FromConnectorId");

                    b.Property<string>("FromNodeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("FromNodeId");

                    b.Property<string>("InterfaceId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("InterfaceId");

                    b.Property<bool>("IsTemplateEdge")
                        .HasColumnType("bit")
                        .HasColumnName("IsTemplateEdge");

                    b.Property<string>("MasterProjectId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("MasterProjectId");

                    b.Property<string>("ToConnectorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ToConnectorId");

                    b.Property<string>("ToNodeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ToNodeId");

                    b.Property<string>("TransportId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("TransportId");

                    b.HasKey("Id");

                    b.HasIndex("FromConnectorId");

                    b.HasIndex("FromNodeId");

                    b.HasIndex("InterfaceId");

                    b.HasIndex("MasterProjectId");

                    b.HasIndex("ToConnectorId");

                    b.HasIndex("ToNodeId");

                    b.HasIndex("TransportId");

                    b.ToTable("Edge");
                });

            modelBuilder.Entity("Mb.Models.Data.Enums.EnumBase", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("Aspect")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Aspect");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("InternalType");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<string>("ParentId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ParentId");

                    b.Property<string>("SemanticReference")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SemanticReference");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Enum");

                    b.HasDiscriminator<string>("Discriminator").HasValue("EnumBase");
                });

            modelBuilder.Entity("Mb.Models.Data.Interface", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("InputTerminalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("InputTerminalId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<string>("OutputTerminalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("OutputTerminalId");

                    b.Property<string>("SemanticReference")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SemanticReference");

                    b.HasKey("Id");

                    b.HasIndex("InputTerminalId");

                    b.HasIndex("OutputTerminalId");

                    b.ToTable("Interface");
                });

            modelBuilder.Entity("Mb.Models.Data.Node", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("Aspect")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Aspect");

                    b.Property<string>("Contractor")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Contractor");

                    b.Property<decimal?>("Cost")
                        .HasColumnType("decimal(10,4)")
                        .HasColumnName("Cost");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<decimal?>("Height")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("Height");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit")
                        .HasColumnName("IsLocked");

                    b.Property<string>("IsLockedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("IsLockedBy");

                    b.Property<bool>("IsRoot")
                        .HasColumnType("bit")
                        .HasColumnName("IsRoot");

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Label");

                    b.Property<decimal?>("Length")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("Length");

                    b.Property<int>("Level")
                        .HasColumnType("int")
                        .HasColumnName("Level");

                    b.Property<string>("MasterProjectId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("MasterProjectId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasColumnName("Order");

                    b.Property<decimal>("PositionBlockX")
                        .HasColumnType("decimal(18,4)")
                        .HasColumnName("PositionBlockX");

                    b.Property<decimal>("PositionBlockY")
                        .HasColumnType("decimal(18,4)")
                        .HasColumnName("PositionBlockY");

                    b.Property<decimal>("PositionX")
                        .HasColumnType("decimal(18,4)")
                        .HasColumnName("PositionX");

                    b.Property<decimal>("PositionY")
                        .HasColumnType("decimal(18,4)")
                        .HasColumnName("PositionY");

                    b.Property<string>("PurposeString")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PurposeString");

                    b.Property<string>("Rds")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Rds");

                    b.Property<string>("SemanticReference")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SemanticReference");

                    b.Property<string>("StatusId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("StatusId");

                    b.Property<string>("Symbol")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Symbol");

                    b.Property<string>("TagNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TagNumber");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2")
                        .HasColumnName("Updated");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UpdatedBy");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Version");

                    b.Property<decimal?>("Width")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("Width");

                    b.HasKey("Id");

                    b.HasIndex("MasterProjectId");

                    b.HasIndex("StatusId");

                    b.ToTable("Node");
                });

            modelBuilder.Entity("Mb.Models.Data.PredefinedAttribute", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Key");

                    b.Property<bool>("IsMultiSelect")
                        .HasColumnType("bit")
                        .HasColumnName("IsMultiSelect");

                    b.Property<string>("Values")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Values");

                    b.HasKey("Key");

                    b.ToTable("PredefinedAttribute");
                });

            modelBuilder.Entity("Mb.Models.Data.Project", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<bool>("IsSubProject")
                        .HasColumnType("bit")
                        .HasColumnName("IsSubProject");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<string>("ProjectOwner")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ProjectOwner");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2")
                        .HasColumnName("Updated");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UpdatedBy");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Version");

                    b.HasKey("Id");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("Mb.Models.Data.Transport", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("InputTerminalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("InputTerminalId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<string>("OutputTerminalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("OutputTerminalId");

                    b.Property<string>("SemanticReference")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SemanticReference");

                    b.HasKey("Id");

                    b.HasIndex("InputTerminalId");

                    b.HasIndex("OutputTerminalId");

                    b.ToTable("Transport");
                });

            modelBuilder.Entity("Mb.Models.Data.TypeEditor.AttributeType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("Aspect")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Aspect");

                    b.Property<string>("ConditionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Discipline")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Discipline");

                    b.Property<string>("Entity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Entity");

                    b.Property<string>("FormatId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("QualifierId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SelectType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SelectType");

                    b.Property<string>("SelectValuesString")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SelectValuesString");

                    b.Property<string>("SourceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Tags")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Tags");

                    b.HasKey("Id");

                    b.HasIndex("ConditionId");

                    b.HasIndex("FormatId");

                    b.HasIndex("QualifierId");

                    b.HasIndex("SourceId");

                    b.ToTable("AttributeType");
                });

            modelBuilder.Entity("Mb.Models.Data.TypeEditor.BlobData", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Data");

                    b.Property<string>("Discipline")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Discipline");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("BlobData");
                });

            modelBuilder.Entity("Mb.Models.Data.TypeEditor.CompositeType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<string>("SemanticReference")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SemanticReference");

                    b.HasKey("Id");

                    b.ToTable("CompositeType");
                });

            modelBuilder.Entity("Mb.Models.Data.TypeEditor.LibraryType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<int>("Aspect")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<string>("PurposeId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("PurposeId");

                    b.Property<string>("RdsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SemanticReference")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SemanticReference");

                    b.Property<string>("TypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TypeId");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Version");

                    b.HasKey("Id");

                    b.HasIndex("PurposeId");

                    b.HasIndex("RdsId");

                    b.ToTable("LibraryType");

                    b.HasDiscriminator<string>("Discriminator").HasValue("LibraryType");
                });

            modelBuilder.Entity("Mb.Models.Data.TypeEditor.NodeTypeTerminalType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("ConnectorType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ConnectorType");

                    b.Property<string>("NodeTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Number")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("Number");

                    b.Property<string>("TerminalTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("NodeTypeId");

                    b.HasIndex("TerminalTypeId");

                    b.ToTable("NodeType_TerminalType");
                });

            modelBuilder.Entity("Mb.Models.Data.TypeEditor.Rds", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("Aspect")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Aspect");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<string>("RdsCategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SemanticReference")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SemanticReference");

                    b.HasKey("Id");

                    b.HasIndex("RdsCategoryId");

                    b.ToTable("Rds");
                });

            modelBuilder.Entity("Mb.Models.Data.TypeEditor.TerminalType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<string>("SemanticReference")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SemanticReference");

                    b.Property<string>("TerminalCategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TerminalCategoryId");

                    b.ToTable("TerminalType");
                });

            modelBuilder.Entity("Mb.Models.Data.Version", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Data");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Type");

                    b.Property<string>("TypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TypeId");

                    b.Property<string>("Ver")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Ver");

                    b.HasKey("Id");

                    b.ToTable("Version");
                });

            modelBuilder.Entity("NodeType_AttributeType", b =>
                {
                    b.Property<string>("AttributeTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NodeTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AttributeTypeId", "NodeTypeId");

                    b.HasIndex("NodeTypeId");

                    b.ToTable("NodeType_AttributeType");
                });

            modelBuilder.Entity("Project_Edge", b =>
                {
                    b.Property<string>("EdgeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProjectId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("EdgeId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Project_Edge");
                });

            modelBuilder.Entity("Project_Node", b =>
                {
                    b.Property<string>("NodeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProjectId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("NodeId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Project_Node");
                });

            modelBuilder.Entity("TerminalType_AttributeType", b =>
                {
                    b.Property<string>("AttributeTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TerminalTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AttributeTypeId", "TerminalTypeId");

                    b.HasIndex("TerminalTypeId");

                    b.ToTable("TerminalType_AttributeType");
                });

            modelBuilder.Entity("TransportType_AttributeType", b =>
                {
                    b.Property<string>("AttributeTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TransportTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AttributeTypeId", "TransportTypeId");

                    b.HasIndex("TransportTypeId");

                    b.ToTable("TransportType_AttributeType");
                });

            modelBuilder.Entity("Mb.Models.Data.Relation", b =>
                {
                    b.HasBaseType("Mb.Models.Data.Connector");

                    b.Property<string>("RelationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RelationType");

                    b.HasDiscriminator().HasValue("Relation");
                });

            modelBuilder.Entity("Mb.Models.Data.Terminal", b =>
                {
                    b.HasBaseType("Mb.Models.Data.Connector");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TerminalCategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Terminal_CategoryId");

                    b.Property<string>("TerminalTypeId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TerminalTypeId");

                    b.HasIndex("TerminalCategoryId");

                    b.HasDiscriminator().HasValue("Terminal");
                });

            modelBuilder.Entity("Mb.Models.Data.Enums.AttributeCondition", b =>
                {
                    b.HasBaseType("Mb.Models.Data.Enums.EnumBase");

                    b.HasDiscriminator().HasValue("AttributeCondition");
                });

            modelBuilder.Entity("Mb.Models.Data.Enums.AttributeFormat", b =>
                {
                    b.HasBaseType("Mb.Models.Data.Enums.EnumBase");

                    b.HasDiscriminator().HasValue("AttributeFormat");
                });

            modelBuilder.Entity("Mb.Models.Data.Enums.AttributeQualifier", b =>
                {
                    b.HasBaseType("Mb.Models.Data.Enums.EnumBase");

                    b.HasDiscriminator().HasValue("AttributeQualifier");
                });

            modelBuilder.Entity("Mb.Models.Data.Enums.AttributeSource", b =>
                {
                    b.HasBaseType("Mb.Models.Data.Enums.EnumBase");

                    b.HasDiscriminator().HasValue("AttributeSource");
                });

            modelBuilder.Entity("Mb.Models.Data.Enums.BuildStatus", b =>
                {
                    b.HasBaseType("Mb.Models.Data.Enums.EnumBase");

                    b.HasDiscriminator().HasValue("BuildStatus");
                });

            modelBuilder.Entity("Mb.Models.Data.Enums.Purpose", b =>
                {
                    b.HasBaseType("Mb.Models.Data.Enums.EnumBase");

                    b.Property<string>("Discipline")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Discipline");

                    b.HasDiscriminator().HasValue("Purpose");
                });

            modelBuilder.Entity("Mb.Models.Data.Enums.RdsCategory", b =>
                {
                    b.HasBaseType("Mb.Models.Data.Enums.EnumBase");

                    b.HasDiscriminator().HasValue("RdsCategory");
                });

            modelBuilder.Entity("Mb.Models.Data.Enums.TerminalCategory", b =>
                {
                    b.HasBaseType("Mb.Models.Data.Enums.EnumBase");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("TerminalCategory");
                });

            modelBuilder.Entity("Mb.Models.Data.Enums.TypeAttribute", b =>
                {
                    b.HasBaseType("Mb.Models.Data.Enums.EnumBase");

                    b.HasDiscriminator().HasValue("TypeAttribute");
                });

            modelBuilder.Entity("Mb.Models.Data.Enums.Unit", b =>
                {
                    b.HasBaseType("Mb.Models.Data.Enums.EnumBase");

                    b.HasDiscriminator().HasValue("Unit");
                });

            modelBuilder.Entity("Mb.Models.Data.TypeEditor.InterfaceType", b =>
                {
                    b.HasBaseType("Mb.Models.Data.TypeEditor.LibraryType");

                    b.Property<string>("TerminalTypeId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("InterfaceType_TerminalTypeId");

                    b.HasIndex("TerminalTypeId");

                    b.HasDiscriminator().HasValue("InterfaceType");
                });

            modelBuilder.Entity("Mb.Models.Data.TypeEditor.NodeType", b =>
                {
                    b.HasBaseType("Mb.Models.Data.TypeEditor.LibraryType");

                    b.Property<string>("LocationType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PredefinedAttributeData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SymbolId")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("NodeType");
                });

            modelBuilder.Entity("Mb.Models.Data.TypeEditor.TransportType", b =>
                {
                    b.HasBaseType("Mb.Models.Data.TypeEditor.LibraryType");

                    b.Property<string>("TerminalTypeId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("TransportType_TerminalTypeId");

                    b.HasIndex("TerminalTypeId");

                    b.HasDiscriminator().HasValue("TransportType");
                });

            modelBuilder.Entity("AttributeType_Unit", b =>
                {
                    b.HasOne("Mb.Models.Data.TypeEditor.AttributeType", null)
                        .WithMany()
                        .HasForeignKey("AttributeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mb.Models.Data.Enums.Unit", null)
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CompositeType_AttributeType", b =>
                {
                    b.HasOne("Mb.Models.Data.TypeEditor.AttributeType", null)
                        .WithMany()
                        .HasForeignKey("AttributeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mb.Models.Data.TypeEditor.CompositeType", null)
                        .WithMany()
                        .HasForeignKey("CompositeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CompositeType_NodeType", b =>
                {
                    b.HasOne("Mb.Models.Data.TypeEditor.CompositeType", null)
                        .WithMany()
                        .HasForeignKey("CompositeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mb.Models.Data.TypeEditor.NodeType", null)
                        .WithMany()
                        .HasForeignKey("NodeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Mb.Models.Data.Attribute", b =>
                {
                    b.HasOne("Mb.Models.Data.Composite", "Composite")
                        .WithMany("Attributes")
                        .HasForeignKey("CompositeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Mb.Models.Data.Enums.AttributeCondition", "Condition")
                        .WithMany("Attributes")
                        .HasForeignKey("ConditionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Mb.Models.Data.Enums.AttributeFormat", "Format")
                        .WithMany("Attributes")
                        .HasForeignKey("FormatId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Mb.Models.Data.Interface", null)
                        .WithMany("Attributes")
                        .HasForeignKey("InterfaceId");

                    b.HasOne("Mb.Models.Data.Node", "Node")
                        .WithMany("Attributes")
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Mb.Models.Data.Enums.AttributeQualifier", "Qualifier")
                        .WithMany("Attributes")
                        .HasForeignKey("QualifierId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Mb.Models.Data.Enums.AttributeSource", "Source")
                        .WithMany("Attributes")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Mb.Models.Data.Terminal", "Terminal")
                        .WithMany("Attributes")
                        .HasForeignKey("TerminalId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Mb.Models.Data.Transport", "Transport")
                        .WithMany("Attributes")
                        .HasForeignKey("TransportId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Composite");

                    b.Navigation("Condition");

                    b.Navigation("Format");

                    b.Navigation("Node");

                    b.Navigation("Qualifier");

                    b.Navigation("Source");

                    b.Navigation("Terminal");

                    b.Navigation("Transport");
                });

            modelBuilder.Entity("Mb.Models.Data.Composite", b =>
                {
                    b.HasOne("Mb.Models.Data.Node", "Node")
                        .WithMany("Composites")
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Node");
                });

            modelBuilder.Entity("Mb.Models.Data.Connector", b =>
                {
                    b.HasOne("Mb.Models.Data.Node", "Node")
                        .WithMany("Connectors")
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Node");
                });

            modelBuilder.Entity("Mb.Models.Data.Edge", b =>
                {
                    b.HasOne("Mb.Models.Data.Connector", "FromConnector")
                        .WithMany("FromEdges")
                        .HasForeignKey("FromConnectorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Mb.Models.Data.Node", "FromNode")
                        .WithMany("FromEdges")
                        .HasForeignKey("FromNodeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Mb.Models.Data.Interface", "Interface")
                        .WithMany("Edges")
                        .HasForeignKey("InterfaceId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Mb.Models.Data.Project", "MasterProject")
                        .WithMany()
                        .HasForeignKey("MasterProjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Mb.Models.Data.Connector", "ToConnector")
                        .WithMany("ToEdges")
                        .HasForeignKey("ToConnectorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Mb.Models.Data.Node", "ToNode")
                        .WithMany("ToEdges")
                        .HasForeignKey("ToNodeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Mb.Models.Data.Transport", "Transport")
                        .WithMany("Edges")
                        .HasForeignKey("TransportId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("FromConnector");

                    b.Navigation("FromNode");

                    b.Navigation("Interface");

                    b.Navigation("MasterProject");

                    b.Navigation("ToConnector");

                    b.Navigation("ToNode");

                    b.Navigation("Transport");
                });

            modelBuilder.Entity("Mb.Models.Data.Enums.EnumBase", b =>
                {
                    b.HasOne("Mb.Models.Data.Enums.EnumBase", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Mb.Models.Data.Interface", b =>
                {
                    b.HasOne("Mb.Models.Data.Terminal", "InputTerminal")
                        .WithMany("InputInterfaces")
                        .HasForeignKey("InputTerminalId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Mb.Models.Data.Terminal", "OutputTerminal")
                        .WithMany("OutputInterfaces")
                        .HasForeignKey("OutputTerminalId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("InputTerminal");

                    b.Navigation("OutputTerminal");
                });

            modelBuilder.Entity("Mb.Models.Data.Node", b =>
                {
                    b.HasOne("Mb.Models.Data.Project", "MasterProject")
                        .WithMany()
                        .HasForeignKey("MasterProjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Mb.Models.Data.Enums.BuildStatus", "Status")
                        .WithMany("Nodes")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("MasterProject");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Mb.Models.Data.Transport", b =>
                {
                    b.HasOne("Mb.Models.Data.Terminal", "InputTerminal")
                        .WithMany("InputTransports")
                        .HasForeignKey("InputTerminalId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Mb.Models.Data.Terminal", "OutputTerminal")
                        .WithMany("OutputTransports")
                        .HasForeignKey("OutputTerminalId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("InputTerminal");

                    b.Navigation("OutputTerminal");
                });

            modelBuilder.Entity("Mb.Models.Data.TypeEditor.AttributeType", b =>
                {
                    b.HasOne("Mb.Models.Data.Enums.AttributeCondition", "Condition")
                        .WithMany("AttributeTypes")
                        .HasForeignKey("ConditionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Mb.Models.Data.Enums.AttributeFormat", "Format")
                        .WithMany("AttributeTypes")
                        .HasForeignKey("FormatId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Mb.Models.Data.Enums.AttributeQualifier", "Qualifier")
                        .WithMany("AttributeTypes")
                        .HasForeignKey("QualifierId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Mb.Models.Data.Enums.AttributeSource", "Source")
                        .WithMany("AttributeTypes")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Condition");

                    b.Navigation("Format");

                    b.Navigation("Qualifier");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("Mb.Models.Data.TypeEditor.LibraryType", b =>
                {
                    b.HasOne("Mb.Models.Data.Enums.Purpose", "Purpose")
                        .WithMany("LibraryTypes")
                        .HasForeignKey("PurposeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Mb.Models.Data.TypeEditor.Rds", "Rds")
                        .WithMany("LibraryTypes")
                        .HasForeignKey("RdsId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Purpose");

                    b.Navigation("Rds");
                });

            modelBuilder.Entity("Mb.Models.Data.TypeEditor.NodeTypeTerminalType", b =>
                {
                    b.HasOne("Mb.Models.Data.TypeEditor.NodeType", "NodeType")
                        .WithMany("TerminalTypes")
                        .HasForeignKey("NodeTypeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Mb.Models.Data.TypeEditor.TerminalType", "TerminalType")
                        .WithMany("NodeTypes")
                        .HasForeignKey("TerminalTypeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("NodeType");

                    b.Navigation("TerminalType");
                });

            modelBuilder.Entity("Mb.Models.Data.TypeEditor.Rds", b =>
                {
                    b.HasOne("Mb.Models.Data.Enums.RdsCategory", "RdsCategory")
                        .WithMany("RdsList")
                        .HasForeignKey("RdsCategoryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("RdsCategory");
                });

            modelBuilder.Entity("Mb.Models.Data.TypeEditor.TerminalType", b =>
                {
                    b.HasOne("Mb.Models.Data.Enums.TerminalCategory", "TerminalCategory")
                        .WithMany("TerminalTypes")
                        .HasForeignKey("TerminalCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("TerminalCategory");
                });

            modelBuilder.Entity("NodeType_AttributeType", b =>
                {
                    b.HasOne("Mb.Models.Data.TypeEditor.AttributeType", null)
                        .WithMany()
                        .HasForeignKey("AttributeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mb.Models.Data.TypeEditor.NodeType", null)
                        .WithMany()
                        .HasForeignKey("NodeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Project_Edge", b =>
                {
                    b.HasOne("Mb.Models.Data.Edge", null)
                        .WithMany()
                        .HasForeignKey("EdgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mb.Models.Data.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Project_Node", b =>
                {
                    b.HasOne("Mb.Models.Data.Node", null)
                        .WithMany()
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mb.Models.Data.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TerminalType_AttributeType", b =>
                {
                    b.HasOne("Mb.Models.Data.TypeEditor.AttributeType", null)
                        .WithMany()
                        .HasForeignKey("AttributeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mb.Models.Data.TypeEditor.TerminalType", null)
                        .WithMany()
                        .HasForeignKey("TerminalTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TransportType_AttributeType", b =>
                {
                    b.HasOne("Mb.Models.Data.TypeEditor.AttributeType", null)
                        .WithMany()
                        .HasForeignKey("AttributeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mb.Models.Data.TypeEditor.TransportType", null)
                        .WithMany()
                        .HasForeignKey("TransportTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Mb.Models.Data.Terminal", b =>
                {
                    b.HasOne("Mb.Models.Data.Enums.TerminalCategory", "TerminalCategory")
                        .WithMany("Terminals")
                        .HasForeignKey("TerminalCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TerminalCategory");
                });

            modelBuilder.Entity("Mb.Models.Data.TypeEditor.InterfaceType", b =>
                {
                    b.HasOne("Mb.Models.Data.TypeEditor.TerminalType", "TerminalType")
                        .WithMany("InterfaceTypes")
                        .HasForeignKey("TerminalTypeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("TerminalType");
                });

            modelBuilder.Entity("Mb.Models.Data.TypeEditor.TransportType", b =>
                {
                    b.HasOne("Mb.Models.Data.TypeEditor.TerminalType", "TerminalType")
                        .WithMany("TransportTypes")
                        .HasForeignKey("TerminalTypeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("TerminalType");
                });

            modelBuilder.Entity("Mb.Models.Data.Composite", b =>
                {
                    b.Navigation("Attributes");
                });

            modelBuilder.Entity("Mb.Models.Data.Connector", b =>
                {
                    b.Navigation("FromEdges");

                    b.Navigation("ToEdges");
                });

            modelBuilder.Entity("Mb.Models.Data.Enums.EnumBase", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("Mb.Models.Data.Interface", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("Edges");
                });

            modelBuilder.Entity("Mb.Models.Data.Node", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("Composites");

                    b.Navigation("Connectors");

                    b.Navigation("FromEdges");

                    b.Navigation("ToEdges");
                });

            modelBuilder.Entity("Mb.Models.Data.Transport", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("Edges");
                });

            modelBuilder.Entity("Mb.Models.Data.TypeEditor.Rds", b =>
                {
                    b.Navigation("LibraryTypes");
                });

            modelBuilder.Entity("Mb.Models.Data.TypeEditor.TerminalType", b =>
                {
                    b.Navigation("InterfaceTypes");

                    b.Navigation("NodeTypes");

                    b.Navigation("TransportTypes");
                });

            modelBuilder.Entity("Mb.Models.Data.Terminal", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("InputInterfaces");

                    b.Navigation("InputTransports");

                    b.Navigation("OutputInterfaces");

                    b.Navigation("OutputTransports");
                });

            modelBuilder.Entity("Mb.Models.Data.Enums.AttributeCondition", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("AttributeTypes");
                });

            modelBuilder.Entity("Mb.Models.Data.Enums.AttributeFormat", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("AttributeTypes");
                });

            modelBuilder.Entity("Mb.Models.Data.Enums.AttributeQualifier", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("AttributeTypes");
                });

            modelBuilder.Entity("Mb.Models.Data.Enums.AttributeSource", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("AttributeTypes");
                });

            modelBuilder.Entity("Mb.Models.Data.Enums.BuildStatus", b =>
                {
                    b.Navigation("Nodes");
                });

            modelBuilder.Entity("Mb.Models.Data.Enums.Purpose", b =>
                {
                    b.Navigation("LibraryTypes");
                });

            modelBuilder.Entity("Mb.Models.Data.Enums.RdsCategory", b =>
                {
                    b.Navigation("RdsList");
                });

            modelBuilder.Entity("Mb.Models.Data.Enums.TerminalCategory", b =>
                {
                    b.Navigation("Terminals");

                    b.Navigation("TerminalTypes");
                });

            modelBuilder.Entity("Mb.Models.Data.TypeEditor.NodeType", b =>
                {
                    b.Navigation("TerminalTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
