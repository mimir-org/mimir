// <auto-generated />
using System;
using Mb.Models.Configurations;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Mb.Core.Migrations
{
    [DbContext(typeof(ModelBuilderDbContext))]
    partial class ModelBuilderDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Mb.Models.Data.AspectObject", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("Aspect")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Aspect");

                    b.Property<int>("AspectObjectType")
                        .HasColumnType("int")
                        .HasColumnName("AspectObjectType");

                    b.Property<DateTime?>("Created")
                        .IsRequired()
                        .HasColumnType("datetime2")
                        .HasColumnName("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<int?>("Height")
                        .HasColumnType("int")
                        .HasColumnName("Height");

                    b.Property<bool>("IsLocked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsLocked");

                    b.Property<string>("IsLockedStatusBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("IsLockedStatusBy");

                    b.Property<DateTime?>("IsLockedStatusDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("IsLockedStatusDate");

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Label");

                    b.Property<string>("LibraryType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LibraryType");

                    b.Property<string>("MainProject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MainProject");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Name");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Position");

                    b.Property<string>("Project")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Project");

                    b.Property<string>("Purpose")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PurposeString");

                    b.Property<string>("Rds")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Rds");

                    b.Property<string>("Symbol")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Symbol");

                    b.Property<string>("TypeReference")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TypeReference");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2")
                        .HasColumnName("Updated");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UpdatedBy");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Version");

                    b.Property<int?>("Width")
                        .HasColumnType("int")
                        .HasColumnName("Width");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("Project");

                    b.ToTable("AspectObject", (string)null);
                });

            modelBuilder.Entity("Mb.Models.Data.Attribute", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("AspectObject")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AspectObject");

                    b.Property<string>("AttributeType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AttributeType");

                    b.Property<string>("ConnectorTerminal")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ConnectorTerminal");

                    b.Property<bool>("IsLocked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsLocked");

                    b.Property<string>("IsLockedStatusBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("IsLockedStatusBy");

                    b.Property<DateTime?>("IsLockedStatusDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("IsLockedStatusDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<string>("Qualifiers")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Qualifiers");

                    b.Property<string>("SelectedUnit")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SelectedUnit");

                    b.Property<string>("UnitString")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UnitString");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Value");

                    b.HasKey("Id");

                    b.ToTable("Attribute", (string)null);
                });

            modelBuilder.Entity("Mb.Models.Data.Connection", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromConnector")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FromConnector");

                    b.Property<string>("MainProject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MainProject");

                    b.Property<string>("Project")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Project");

                    b.Property<string>("ToConnector")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ToConnector");

                    b.HasKey("Id");

                    b.ToTable("Connection", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("Connection");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Mb.Models.Data.Connector", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("AspectObject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AspectObject");

                    b.Property<int>("Direction")
                        .HasColumnType("int")
                        .HasColumnName("Direction");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Inside")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Inside");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<string>("Outside")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Outside");

                    b.HasKey("Id");

                    b.ToTable("Connector", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("Connector");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Mb.Models.Data.Project", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("Description")
                        .HasMaxLength(511)
                        .HasColumnType("nvarchar(511)")
                        .HasColumnName("Description");

                    b.Property<string>("Iri")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Iri");

                    b.Property<bool>("IsSubProject")
                        .HasColumnType("bit")
                        .HasColumnName("IsSubProject");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(63)
                        .HasColumnType("nvarchar(63)")
                        .HasColumnName("Name");

                    b.Property<string>("ProjectOwner")
                        .IsRequired()
                        .HasMaxLength(63)
                        .HasColumnType("nvarchar(63)")
                        .HasColumnName("ProjectOwner");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2")
                        .HasColumnName("Updated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(63)
                        .HasColumnType("nvarchar(63)")
                        .HasColumnName("UpdatedBy");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)")
                        .HasColumnName("Version");

                    b.HasKey("Id");

                    b.ToTable("Project", (string)null);
                });

            modelBuilder.Entity("Mb.Models.Data.Version", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Data");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Type");

                    b.Property<string>("TypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TypeId");

                    b.Property<string>("Ver")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Ver");

                    b.HasKey("Id");

                    b.ToTable("Version", (string)null);
                });

            modelBuilder.Entity("Mb.Models.Data.ConnectionRelation", b =>
                {
                    b.HasBaseType("Mb.Models.Data.Connection");

                    b.HasDiscriminator().HasValue("ConnectionRelation");
                });

            modelBuilder.Entity("Mb.Models.Data.ConnectionTerminal", b =>
                {
                    b.HasBaseType("Mb.Models.Data.Connection");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Color");

                    b.Property<string>("TerminalParentType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TerminalParentType");

                    b.Property<string>("TerminalType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TerminalType");

                    b.HasDiscriminator().HasValue("ConnectionTerminal");
                });

            modelBuilder.Entity("Mb.Models.Data.ConnectorRelation", b =>
                {
                    b.HasBaseType("Mb.Models.Data.Connector");

                    b.HasDiscriminator().HasValue("ConnectorRelation");
                });

            modelBuilder.Entity("Mb.Models.Data.ConnectorTerminal", b =>
                {
                    b.HasBaseType("Mb.Models.Data.Connector");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Color");

                    b.Property<string>("TerminalParentType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TerminalParentType");

                    b.Property<string>("TerminalType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TerminalType");

                    b.Property<string>("TypeReference")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("ConnectorTerminal");
                });

            modelBuilder.Entity("Mb.Models.Data.ConnectionFulfilledBy", b =>
                {
                    b.HasBaseType("Mb.Models.Data.ConnectionRelation");

                    b.HasDiscriminator().HasValue("ConnectionFulfilledBy");
                });

            modelBuilder.Entity("Mb.Models.Data.ConnectionHasLocation", b =>
                {
                    b.HasBaseType("Mb.Models.Data.ConnectionRelation");

                    b.HasDiscriminator().HasValue("ConnectionHasLocation");
                });

            modelBuilder.Entity("Mb.Models.Data.ConnectionPartOf", b =>
                {
                    b.HasBaseType("Mb.Models.Data.ConnectionRelation");

                    b.HasDiscriminator().HasValue("ConnectionPartOf");
                });

            modelBuilder.Entity("Mb.Models.Data.ConnectorFulfilledBy", b =>
                {
                    b.HasBaseType("Mb.Models.Data.ConnectorRelation");

                    b.HasDiscriminator().HasValue("ConnectorFulfilledBy");
                });

            modelBuilder.Entity("Mb.Models.Data.ConnectorHasLocation", b =>
                {
                    b.HasBaseType("Mb.Models.Data.ConnectorRelation");

                    b.HasDiscriminator().HasValue("ConnectorHasLocation");
                });

            modelBuilder.Entity("Mb.Models.Data.ConnectorPartOf", b =>
                {
                    b.HasBaseType("Mb.Models.Data.ConnectorRelation");

                    b.HasDiscriminator().HasValue("ConnectorPartOf");
                });
#pragma warning restore 612, 618
        }
    }
}
